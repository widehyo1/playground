"https://news.hada.io/topic?id=12409","BricksLLM - LLM을 위한 AI Gateway","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     BricksLLM - LLM을 위한 AI Gateway

     * Go 로 작성된 클라우드 네이티브 AI 게이트웨이
     * OpenAI 에 대한 Proxy로 동작
     * Rate Limit, Cost Limit, TTL 이 있는 API 키를 생성해서 OpenAI 가 제공해주지 않는 상세한 접근 제어 기능을 제공 가능
     * 목표는 LLama2, Claude, PaLM2 등의 다양한 LLM을 지원하고, LLM 운영을 간소화 하는 것
"
"https://news.hada.io/topic?id=12447","다른 조언 에세이를 모두 읽은 신입 소프트웨어 개발자들을 위한 조언","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 다른 조언 에세이를 모두 읽은 신입 소프트웨어 개발자들을 위한 조언

초급 소프트웨어 개발자를 위한 조언

     * 사람들이 나를 듣는 이유는 프로그래밍 실력 때문이 아니라 글쓰기 실력 때문임. 다른 사람들의 조언도 마찬가지로, 그들의 글쓰기 실력 때문에 듣게 됨.
     * 소프트웨어에 대한 과학적 연구는 매우 적고 대부분 결론이 불확실함. ""객관적 진리""에 대한 주장을 조금 의심하면서 자신의 상황에 어떻게 적용할지 신중히 생각해야 함.
     * 잘못된 것을 배우거나 속는 것에 대해 너무 걱정하지 말고, 좋아하는 아이디어가 있다면 시도해보기를 권장함. 동료들에게 해를 끼치지 않는 한, 결국에는 잘 풀릴 것임.

디버깅: 9가지 규칙

     * ""디버깅: 9가지 규칙""이라는 책을 읽을 것을 권장함. 도서관에서 빌리거나 회사에 구매를 요청해도 좋음. 초보 프로그래머를 위한 다른 책들이 거의 다루지 않는 중요한 기술을 쉽게 가르쳐줌.

올바른 방법의 발견

     * 언젠가는 프로그래밍의 올바른 방법을 발견하게 될 것이고, 모든 사람이 그 방법을 사용하면 분야가 훨씬 나아질 것이라고 확신하게 될 것임.
     * 올바른 방법에 휩쓸리는 것을 막으라고 말하지는 않지만, 그 방법에 휩쓸리고 있다는 사실을 인식하고, 자신의 정체성을 올바른 방법의 사람으로 만들지 말 것을 조언함.
     * 결국 프로그래밍은 어떤 올바른 방법을 사용하든지 간에 답답하고 지저분한 작업이며, 올바른 방법 없이도 훌륭한 소프트웨어를 만들 수 있음을 배우게 될 것임.

최선의 관행 뒤의 이야기

     * 최선의 관행 뒤에는 항상 공포 이야기가 있음. 최선의 관행을 이해하지 못한다면, 그것을 영감으로 한 공포 이야기를 찾아보면 도움이 될 것임.
     * 많은 최선의 관행과 관례는 역사적, 문화적 요인의 혼합으로 발생함. 더 이상 관련이 없는 문제들을 해결하기 위해 멘토들이 사용했던 방법을 따르는 경우가 많음.

다양한 프로그래밍 시도

     * 경력 초기에 가능하다면 다양한 종류의 프로그래밍을 시도해볼 것을 권장함. 이는 직업을 바꾸는 것을 의미하지 않으며, 대부분의 회사에서 동시에 여러 종류의 프로그래밍을 하고 있음.
     * 다양한 프로그래밍을 시도함으로써 배우는 것뿐만 아니라, 정말로 좋아하는 소프트웨어 작업 유형을 찾을 확률을 높일 수 있음.

소프트웨어 분야의 변화

     * 소프트웨어 분야는 계속 변화하고 있으며, 프레임워크 트레드밀에 휩쓸리지 말고 기본 기술을 배우는 데 집중할 것을 조언함.
     * 소프트웨어에서 정보가 빠르게 전파되는 구조적 이유가 있음. 인터넷, 오픈 소스, 컨퍼런스 등으로 인해 아이디어를 공유하는 데 장벽이 낮음.
     * 많은 기술들이 소수의 사용자만을 가지고 있지만, 그것들에 대해 듣는 방식 때문에 널리 채택될 것처럼 보일 수 있음. 이것이 보수적인 접근이 의미 있는 이유임.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 개발자로서 자신만의 경험을 통해 배우고 성장하는 과정임. 다른 사람들의 조언은 참고할 수 있지만, 결국 자신의 상황에 맞게 적용하는 것이 중요함.
     * 프로그래밍의 '올바른 방법'을 찾는 것은 개인적인 여정이며, 이를 통해 다양한 접근 방식을 배우고 결합하는 능력을 키울 수 있음.
     * 기술의 변화를 이해하고, 새로운 트렌드에 대해 합리적인 접근 방식을 취하는 것은 지속 가능한 개발자 경력을 위해 필수적임.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 취미 프로젝트에서 두 개발자와 협업 경험을 공유함.
          + 프로젝트는 작은 규모임에도 불구하고 과도한 엔지니어링 요구 사항에 대한 불만을 표현함.
          + ""올바른 방법""을 고수하는 개발자들에 대한 비판적인 시각을 제시함.
          + 본인도 과거에 비슷한 경험이 있었으나, 실제로 중요한 것은 작동하는 코드라는 것을 깨달았음을 언급함.
     * 두 번째 댓글 요약:
          + 15년 경력의 소프트웨어 전문가가 자신의 경험을 공유함.
          + 초기 불교 교육에서 배운 교훈이 소프트웨어 개발에도 유용하다고 느낌.
          + 개발자로서의 경험을 통해 얻은 교훈을 설명하며, 올바른 방법에만 집착하지 않는 중요성을 강조함.
     * 세 번째 댓글 요약:
          + TDD(Test-Driven Development)와 같은 기술을 배우는 것이 항상 직접 사용되지는 않더라도 도움이 된다고 주장함.
          + 다양한 기술과 언어를 배움으로써 더 나은 코드를 작성하는 방법을 배울 수 있다고 강조함.
     * 네 번째 댓글 요약:
          + ""올바른 방법""에 대한 집착이 개발자의 성장을 방해할 수 있다고 지적함.
          + 개발자들이 지식을 확장하는 데 필요한 주의력이 부족하거나 현재 위치에 너무 편안함을 느끼는 것이 원인일 수 있다고 추측함.
     * 다섯 번째 댓글 요약:
          + 코드, 기억해야 할 정보, 프로젝트 세부 사항 등 모든 형태의 상태(state)를 최소화할 것을 조언함.
          + 상태를 최소화하는 것이 문제 해결에 도움이 된다고 주장함.
     * 여섯 번째 댓글 요약:
          + 좋은 글쓰기 능력이 전문 지식보다 독자들에게 영향을 더 많이 줄 수 있다고 언급함.
          + 다양한 업무 유형을 시도하고, 회사 내 다른 직무에 대해 배우는 것이 중요하다고 조언함.
     * 일곱 번째 댓글 요약:
          + 유튜브와 같은 비디오 공유 서비스에서 배운 내용에 대해 회의적인 태도를 가져야 한다고 강조함.
          + 소프트웨어 개발이 문제를 해결하기 위한 것임을 상기시키며, 다른 사람들과 대화를 통해 소프트웨어가 해결해야 할 문제를 더 잘 이해할 수 있다고 조언함.
     * 여덟 번째 댓글 요약:
          + 디버깅에 관한 책을 추천하며, 이 책이 다양한 기술적 문제를 해결하는 데 도움이 된다고 언급함.
          + 책이 쉽고 흥미롭게 읽히며, 유용한 기술을 제공한다고 평가함.
     * 아홉 번째 댓글 요약:
          + 코드 작성 자체가 목표가 아니라 문제를 해결하는 수단임을 강조함.
          + 코드가 해결해야 할 문제에 집중해야 하며, 그렇지 않을 경우 코드 작성을 중단하고 문제를 명확히 해야 한다고 조언함.
     * 열 번째 댓글 요약:
          + 좋은 글쓰기 능력이 다른 사람들과의 소통에 도움이 되며, 소프트웨어 개발자에게 중요하다고 언급함.
          + 초보 개발자들에게 자신의 경험과 생각을 글로 작성할 것을 권장하며, 이것이 나중에 유용한 기술이 될 것이라고 조언함.
"
"https://news.hada.io/topic?id=12391","키메라 리눅스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                키메라 리눅스

대체 사용자 환경

     * Chimera는 FreeBSD의 핵심 도구, LLVM 툴체인, Musl C 라이브러리의 새로운 조합을 사용함.
     * 이를 통해 여러 주요 이점을 가진 새로운 경험을 제공함.

깔끔하고 일관성 있음

     * Chimera는 가능한 한 레거시 크래프트를 제거하여 간단하지만 완전한 기능을 갖춘 현대적인 범용 운영 체제를 제공하고자 함.

소스에서 빌드 가능

     * Chimera는 바이너리 배포이지만, 소스 패키지 빌드 시스템을 제공하여 새로운 소프트웨어 패키징, 맞춤형 패키지 빌드, 접근 가능한 인프라를 쉽게 할 수 있음.

휴대성

     * Chimera는 Intel/AMD, ARM AArch64, POWER, RISC-V를 포함한 다양한 프로세서에서 사용 가능함.
     * 중앙 빌드 시스템이 모든 곳에서 패키지를 사용할 수 있도록 보장함.

최근 뉴스

     * 2023년 9월 15일: 새로운 이미지가 다시 한 번 출시됨. 주로 새로운 소프트웨어 업데이트와 몇 가지 기능적 변경을 포함하는 리프레시 버전임.
     * 2023년 6월 11일: 프로젝트가 알파 단계에 진입함. Chimera가 롤링 배포임을 고려할 때, 이는 실제 릴리스는 아니지만 잠재적 사용자와 기여자에게 의미가 있음.

   GN⁺의 의견
     * Chimera Linux는 기존 리눅스 배포판에 대한 불만에서 탄생한 새로운 범용 OS로, 복잡한 설정과 맞춤화 없이도 실용적인 간단한 시스템을 목표로 함.
     * FreeBSD, LLVM, Musl C 라이브러리의 조합은 리눅스 사용자들에게 새로운 대안을 제시하며, 다양한 아키텍처 지원으로 휴대성을 강조함.
     * 소스 패키지 빌드 시스템의 제공은 사용자가 자신의 필요에 맞게 시스템을 커스터마이징할 수 있는 유연성을 부여하며, 이는 오픈 소스 커뮤니티에서의 협업과 기여를 촉진할 수 있음.

        Hacker News 의견

     * GNU 사용자의 경험에 대한 의견:
          + 오랜 기간 GNU 도구(예: grep, sed, less, awk, find, tar 등)를 사용한 사람에게는 새로운 시스템의 사용이 예상보다 더 답답할 수 있음.
          + UNIX 시절의 경험을 통해, 명령줄 도구들 간의 미묘한 차이가 큰 불편함을 주었음을 기억함.
          + GNU 도구들이 리눅스가 등장하기 전부터 인기를 얻은 이유 중 하나는, UNIX의 다양한 버전에서 동일하게 작동하여 각기 다른 시스템 간의 차이점을 처리할 필요가 없었기 때문임.
     * systemd에 대한 프로젝트의 접근 방식에 대한 의견:
          + 프로젝트가 systemd에 대해 가지고 있는 입장이 성숙하고, 뉘앙스 있으며, 균형 잡힌 시각을 가지고 있음을 인정함, 비록 완전히 동의하지는 않더라도.
     * Chimera Linux의 디자인 선택에 대한 개인적인 견해:
          + Chimera Linux의 패키징/빌드 시스템에 대한 디자인 선택을 매우 좋아함.
          + 현재 Alpine Linux 사용자로서, musl을 정당화하기 어려움을 느낌.
          + musl은 작고, 단순하며, 올바른 소프트웨어임에도 불구하고, glibc에 비해 느리고, 소프트웨어 포팅 시 문제를 일으키며, 때때로 런타임에서 미묘하게 문제를 일으킴.
     * Chimera Linux의 목적에 대한 해석:
          + Chimera Linux는 Void Linux를 한 단계 더 발전시킨 것으로 보임.
          + Chimera의 창립자는 이전에 PPC용 Void Linux의 유지 관리자였음.
          + FreeBSD 사용자가 리눅스를 사용한다면 Chimera를 원할 것 같은 느낌을 줌.
          + GNOME을 선택한 것은 처음에는 이상해 보이지만, Chimera는 레거시를 피하고자 하며, pipewire와 Wayland를 사용함.
     * Chimera Linux의 사용자 친화성에 대한 우려:
          + 사용자 친화적이고 주류가 되고자 하는 배포판을 볼 때마다 우려를 느낌.
          + Chimera가 실험적인 배포판인지, 아니면 일반 사용자가 사용할 수 있는 배포판인지에 대한 의문.
          + BSD와 비교할 때 Chimera를 강하게 고려할 수 있지만, Ubuntu나 Windows의 대체제로 보기는 어려움.
          + 주류 사용자들이 고려하는 요소가 아닌 '단순함'이라는 개념에 대한 의문.
     * Chimera Linux에 대한 개발자의 관점:
          + 현대적인 소프트웨어를 선호하는 개발자로서, 시장 점유율이 1% 미만인 배포판을 사용할 가능성은 낮음.
          + Arch/Kali/BSD/suckless 타입의 열성적인 사용자가 아닌 이상, 주류 사용자들이 관심을 가질 것 같지 않음.
          + 새로운 프로젝트를 시작하는 것은 시간이 많이 소요되고, 기대 관리가 되지 않으면 실망할 수 있음.
          + 주류 사용자들을 끌어들이기 위해서는 소프트웨어 생태계 전체를 바꿔야 할 수도 있음.
          + Steam이나 Chrome과 같은 대형 애플리케이션을 포팅하는 데 문제가 있을 수 있음.
          + 동적 링킹은 사용자 친화적인 배포판에 적합하지 않을 수 있음.
          + AppArmor와 같은 샌드박싱 기능에 대한 질문.
     * '간단한 시스템'과 '대안적인 사용자 환경'에 대한 의견:
          + '간단한 시스템'이라는 개념과 '대안적인 사용자 환경'이 함께 가지 않음을 지적함.
          + '대안적인 사용자 환경'은 많은 것들을 깨뜨리고, 따라서 많은 조정 작업이 필요함.
     * Chimera Linux와 Void Linux의 관계에 대한 정보:
          + Chimera Linux는 Void Linux를 PowerPC로 포팅한 동일한 개발자에 의해 개발됨.
     * SystemD에 대한 개인적인 견해:
          + SystemD는 유용하지만, 'Linux 특정적'이라는 큰 단점이 있음.
          + Chimera는 SystemD의 유용한 기능을 구현하고자 하지만, 단점 없이 독자적인 방식으로 진행하고자 함.
          + SystemD를 다른 소프트웨어 스택으로 포팅하는 것이 가능한지, 아니면 SystemD를 재작성하는 것보다 더 유용할지에 대한 의문.
     * ChimeraOS와 Chimera Linux의 혼동에 대한 의견:
          + ChimeraOS와 이름이 같아 혼동될 수 있음을 지적함. 둘 다 리눅스 기반임.
"
"https://news.hada.io/topic?id=12465","Show GN: 스레드(Threads) 게시물을 500글자씩 자동으로 나눠주는 웹서비스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            Show GN: 스레드(Threads) 게시물을 500글자씩 자동으로 나눠주는 웹서비스

   안녕하세요! 요즘 저질 광고로 범벅이 되어버린 인스타 대신에 클-린한 스레드를 많이 쓰게 되더라구요.

   근데 쓰다가 500자가 넘는 장문의 글을 쓰게되면 답글로 나누어야 되는데 어디까지가 500자인지 표시도 안해줘서 너무 불편했습니다!!

   그래서 500자 넘는 글을 자동으로 보기 좋게 나눠주고 수동으로도 수정할 수 있는 웹서비스를 만들어 봤습니다!

   많은 피드백 부탁드리겠습니다!

   [개요]
     * 메타의 텍스트 중심 SNS인 Threads 관련 마이크로 웹서비스
     * Threads 는 X (트위터)와 마찬가지로, 텍스트 중심 SNS로 한 단락에 최대 500글자 (띄어쓰기 포함) 까지 쓸 수 있음
     * 500글자가 넘어가면 답글로 이어서 써야함

   [Pain Point]
     * 장문을 작성할 때, 어느 부분까지가 500자인지 표시해주지 않음 (가독성 이슈)
     * 그래서 초과된 단락을 잘라내기 하면서 500자에 맞춰야됨
     * 가독성 좋게 자르려고 하다보니, 글 쓴 시간보다 500자에 맞춰 여러 답글로 나누는데 시간을 더 쓰게됨

   [Solution]
     * 쓰레드에 쓸 장문을 입력하면 자동으로 500자에 맞춰서 나눠줌
     * 엔터와 백스페이스를 이용하여 수동으로 답글 나누기도 가능함

   [Plan]
     * 인스타 프리뷰 앱 (게시물 예약 업로드, 계정 분석 등) 과 비슷한 기능들을 추가하려고 함
     * API가 정식 공개된 게 아니라 많은 어려움이 있을 것 같음

   [Vision]
     * 현재 Threads와 관련된 서비스가 많지 않으며, 서비스 초기에 관련 서비스를 제작해두면 좋은 기회가 될 것으로 예상됨.
     * EU에서는 올 12월 중순에 Threads가 런칭됨
          + Meta에서 Facebook과 Instagram은 광고품질 이슈 등 유저들이 대거 이탈하기 시작했으며, 신생 SNS인 Threads 를 키우기 위해 Meta에서 노력할 것으로 보임

   [ETC]
     * 유저들 또한 X나 인스타에서 점점 스레드로 넘어오는 추세
     * 스레드에도 사진 첨부가 가능한데 이 때문에 인스타와 기능적으로 큰 차이는 없지만, 독보적인 셀럽이 없는 상태라 스레드 셀럽이 되려고 노력하는 파워 유저들이 점점 늘어나고 있음
     * 메타도 페이스북, 인스타가 저품질 광고로 유저 이탈이 많다는 것을 알고 있을 것이고 그로인한 유저 이탈을 막기 위해 스레드에 좀 더 공들일 것 같다는 생각이 듬
     * 그에 반해 외국에도 아직 스레드 관련 공식 커뮤니티나 활동이 많지 않음, EU에서는 올 12월이 되어서야 공식적으로 서비스를 개시함

   쓰레드 게시물을 자동화 하는 프로그램은 없을까요 ? ㅜㅜ

   좋은 서비스 감사드립니다. 블루스카이의 경우 300자 인데 혹시 괜찮으시면 300자도 지원해주시면 좋을것 같습니다.

   블루스카이라는 신규 sns가 또 있었군요! 좋은 의견 너무 감사드립니다!
"
"https://news.hada.io/topic?id=12422","3Blue1Brown 미적분 블로그 시리즈","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        3Blue1Brown 미적분 블로그 시리즈

미적분의 본질

     * 미적분이 무엇인지에 대한 개요 제공
     * 학생들이 스스로 발견할 수 있을 것 같은 방식으로 설명
     * 원의 넓이 공식을 재발견하는 것을 중심 예시로 사용하며, 이것이 미적분의 기본 정리의 한 예임을 강조

도함수의 역설

     * 도함수가 무엇인지 소개
     * 도함수가 어떻게 모순적인 아이디어를 형식화하는지 설명

기하학을 통한 거듭제곱 법칙

     * 다항식 항의 도함수에 대한 기하학적, 직관적 소개
     * 이러한 공식들이 암기 대상이 아니라 학생이 스스로 발견할 수 있는 것처럼 느껴지도록 목표 설정

기하학을 통한 삼각함수 도함수

     * 삼각함수의 도함수에 대한 기하학적, 직관적 소개

연쇄법칙과 곱의 법칙 시각화

     * 미적분에서 연쇄법칙과 곱의 법칙이 마치 공중에서 끌어낸 것처럼 느껴질 수 있음
     * 이들에 대한 직관적인 사고 방식 탐구

오일러 수 e의 특별함

     * a^x의 도함수는 무엇인가?
     * 왜 e^x는 자기 자신의 도함수인가?
     * 지수함수의 미분 규칙에 대한 사고 방식 소개

암시적 미분, 여기서 무슨 일이 일어나고 있는가?

     * 다중 입력을 가진 함수와 그 입력에 대한 미세한 변화 측면에서 암시적 미분에 대한 사고 방식 설명

극한과 도함수의 정의

     * 극한이 무엇인지, 어떻게 정의되는지
     * 극한이 도함수를 정의하는 데 어떻게 사용되는지 설명

(ε, δ) ""엡실론 델타"" 극한의 정의

     * ""엡실론 델타""가 어떻게 하나의 값이 다른 값에 접근하는 것이 무엇을 의미하는지 정형화하는 데 도움이 되는지 설명

로피탈의 법칙

     * 로피탈의 법칙이 무엇이며, 극한을 평가하는 데 어떻게 도움이 되는지 소개

적분과 미적분의 기본 정리

     * 적분이 무엇이며, 왜 미분의 반대로 계산되는지
     * 미적분의 기본 정리가 무엇인지 설명

면적과 기울기의 관계

     * 도함수는 기울기에 관한 것이고, 적분은 면적에 관한 것임
     * 이 두 아이디어가 완전히 다르게 보이지만 왜 역함수 관계에 있는지 설명

고차 도함수

     * 두 번째, 세 번째 도함수가 무엇인지
     * 이들에 대해 어떻게 생각해야 하는지 설명

테일러 급수

     * 테일러 급수가 수학과 공학에서 매우 유용하지만, 이것이 무엇인지
     * 테일러 급수가 유용한 이유와 공식을 이해하는 방법 소개

테일러 급수의 기하학적 관점

     * 미적분의 기본 정리와 관련된 테일러 급수의 다른 관점 소개

도함수를 시각화하는 다른 방법

     * 미적분을 넘어서는 주제로 더 잘 일반화되는 도함수의 시각화
     * 함수를 변환으로 생각하고, 도함수가 주어진 영역을 얼마나 늘리거나 압축하는지 측정하는 방법 설명

   GN⁺의 의견:
     * 이 글은 미적분의 핵심 개념을 시각적으로 이해하는 데 초점을 맞춘 교육 자료임.
     * 도함수, 적분, 극한 등 복잡한 수학적 개념들을 직관적이고 학생들이 스스로 발견할 수 있는 방식으로 설명하는 것이 중요함.
     * 특히 오일러 수 e의 독특한 성질과 테일러 급수의 기하학적 관점은 수학을 공부하는 학생들에게 매우 흥미로운 주제가 될 수 있음.

        Hacker News 의견

     * 3Blue1Brown의 애니메이션에 사용된 코드에 관심이 있는 사람들을 위해, 해당 코드 저장소가 여기에 있다는 정보 공유. 이 애니메이션들을 만드는 데 많은 노력이 들어감을 강조.
          + 저장소 링크: 3b1b/videos
     * 다른 추천하는 유튜브 수학자로는 eigenchris를 언급, 그의 텐서 계산 시리즈를 전설적이라고 평가. PowerPoint를 사용해 비디오를 만드는 것이 재미있다고 덧붙임.
          + eigenchris 시리즈 링크: Tensor Calculus Series
     * 3Blue1Brown의 비디오에서 가장 중요한 점은, 그가 주제를 원리에서 출발하는 사고방식으로 설명하려고 노력한다는 것. 만약 누군가가 그의 유튜브 채널처럼 선형대수를 설명해주었다면, 수업 중보다 훨씬 더 잘 이해하고 즐길 수 있었을 것이라는 개인적인 의견 제시.
          + 선형대수 주제 링크: 3Blue1Brown Linear Algebra
     * 비디오보다 텍스트를 통한 학습을 더 효과적으로 하는 사람으로서, 작성된 버전을 출판하는 크리에이터들에게 감사함을 표현.
     * Grant의 콘텐츠가 놀랍다고 평가하며, 특히 그의 푸리에 변환 시각화는 컴퓨팅에서 가장 많이 사용되는 알고리즘의 '무엇'이 일어나는지가 아닌 '어떻게' 일어나는지를 이해하는 데 도움을 줌.
          + 푸리에 변환 비디오 링크: Fourier Transform Visualization
     * Dwarkesh Patel이 얼마 전에 Grant와 인터뷰를 진행했으며, 이를 추천함.
          + 인터뷰 링크: Interview with Grant
     * 수학에 대한 다른 추천으로, Michael Penn의 유튜브 수학 채널을 언급. 더 고급 주제를 공부하는 데 도움이 됨.
     * 3Blue1Brown의 설명이 일부 교수들이 제공하는 강의를 뛰어넘으며, 학생들에게 자원으로 제공된다면 많은 이점이 있을 것이라고 언급. 그러나 학계가 외부인에 대해 불신하는 태도를 가지고 있어 아쉬움을 표현.
     * 한 학생의 부모가 자녀가 A-level 수학을 공부하는 데 이 비디오들이 다른 관점과 더 깊은 이해를 얻는 데 도움이 되었다고 공유.
     * 3Blue1Brown이 훌륭한 비디오를 만든다고 칭찬하며, 도전적인 주제를 소개하고 각 단계를 명확하고 접근하기 쉽게 만드는 능력을 높이 평가.
     * 또 다른 우수한 수학 유튜버로 Mathologer를 추천. 유머, 훌륭한 그래픽, 명확한 설명을 제공하며 동시에 도전적인 주제를 다룬다고 평가.
          + Mathologer 비디오 샘플 링크: Mathologer Sample Video
"
"https://news.hada.io/topic?id=12407","피그마와 어도비, 제안된 합병 포기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          피그마와 어도비, 제안된 합병 포기

피그마와 어도비, 제안된 인수 합병 포기

     * 피그마(Figma)와 어도비(Adobe)가 제안된 인수 합병에 대한 규제 승인 가능성이 없다고 판단함.
     * 양사는 15개월간의 규제 심사 과정을 거쳤으나, 비즈니스, 제품, 시장 서비스의 차이를 세계 각국의 규제 기관에 상세히 설명했음에도 불구하고 인수 합병 승인을 얻을 수 있는 길이 보이지 않아 공동 결정으로 인수 계획을 종료함.
     * 피그마와 어도비는 각각의 커뮤니티에 대한 서비스를 가속화하기 위해 15개월 전에 이 합의에 도달했으나, 이제 독립 회사로서의 미래를 이어가면서 사용자를 위한 파트너십 방안을 모색하는 데에 흥분됨.

피그마의 성장과 혁신

     * 인수 합병이 불확실한 상황에서도 피그마 팀은 커뮤니티를 위해 훌륭한 성과를 냈으며, 지난 15개월 동안 그 속도를 더욱 가속화함.
     * 피그마 팀은 아이디어를 내고, 디자인하고, 소프트웨어를 구축하기 쉽게 하는 새로운 제품을 개발하여 출시함. 여기에는 첫 번째 네이티브 AI 기능, 개발자 모드(Dev Mode), 변수(Variables), 고급 프로토타이핑(Advanced Prototyping) 등이 포함됨.
     * 피그마는 영국과 아시아에 새로운 허브를 개설했으며, 샌프란시스코에서 Config IRL을 개최하고, AI 스타트업 Diagram을 인수하며, 500명 이상의 새로운 직원을 추가함.

피그마의 미래 비전

     * 피그마의 창립 비전은 ""상상과 현실 사이의 간극을 없애는 것""이었음.
     * 물리적 경제에서 디지털 경제로의 전환과 AI의 큰 진보는 이러한 포부를 11년 전보다 오늘날 더 시급하고 달성 가능하게 느껴지게 함.
     * 피그마는 앞으로 아이디어부터 생산에 이르기까지, 시작부터 끝까지 모든 사람이 단일 멀티플레이어 캔버스에서 디지털 제품을 디자인하고 구축할 수 있도록 만드는 데 집중할 예정임. 이러한 미래에 대해 매우 기대하고 있으며, 커뮤니티의 지원에 감사함을 표함.

GN⁺의 의견

     * 피그마와 어도비의 인수 합병이 규제 승인 없이 종료된 것은 기술 산업 내에서 큰 변화를 의미하며, 독립적인 혁신과 경쟁의 중요성을 강조함.
     * 피그마의 지속적인 성장과 새로운 기능 개발은 사용자 경험을 향상시키고 디지털 디자인 분야에서의 리더십을 유지하는 데 기여할 것임.
     * 피그마의 미래 비전은 디지털 경제와 AI 기술의 발전에 발맞춰 더욱 혁신적이고 포괄적인 디자인 플랫폼을 제공하려는 목표를 반영함. 이는 디자인과 기술에 관심 있는 사람들에게 매우 흥미로운 소식임.

        Hacker News 의견

     * Adobe와 Figma의 거래에 대한 순수한 추측
          + Adobe는 시장의 정점에서 성장 위협을 느끼고 협업 개발 UX로 인해 Figma를 인수했음.
          + 이후 상황 변화:
               o 스타트업 가치 하락으로 인수가격이 더 저렴해짐.
               o Adobe는 Gen AI와 Adobe Firefly로 인기를 되찾고 Figma보다 덜 뛰어나도 협업 기능을 추가하여 경쟁 우위를 점할 수 있음.
               o 10억 달러의 이별 비용 지불이 Adobe에게 현재 최선이자 가장 저렴한 선택일 수 있음.
               o Figma 직원들은 큰 수익을 기대했으나 현재는 다소 의욕을 잃었을 것이며, Adobe와의 통합 작업으로 개발 속도가 느려졌을 수도 있음.
     * Figma에 대한 긍정적인 전망
          + Figma는 10억 달러의 현금을 무희석으로 획득함.
          + 이는 회사의 집중력에 영향을 줄 수 있으나 수익에는 큰 영향을 미치지 않음(이전 해 대비 성장률 감소는 경제적 불황 때문일 수도 있음).
          + 10억 달러의 일회성 자금은 Figma의 2023년 수익 성장을 자연스러운 성장보다 훨씬 높게 만들 것으로 예상됨.
          + Figma가 2024년 판매 추세를 개선한다면 매우 긍정적임.
          + Figma는 생성적 AI에 대한 더 나은 전략이 필요함(예: 와이어프레임에서 목업으로의 자동 변환, 와이어프레임 구축 보조 등).
     * Adobe가 Figma를 망치지 않게 된 것에 대한 안도감
          + Adobe가 Figma를 인수하지 못하면서 이전에 망쳤던 다른 소프트웨어 제품들과 같은 운명을 피함.
          + Figma의 창업자, 투자자, 직원들은 좋은 출구 전략을 가졌다고 생각했을 텐데, 이제 상황이 바뀌어서 실망감을 느낄 수 있음.
          + Adobe가 인수할 수 없다면 Figma의 다른 출구 전략은 무엇일까? 공개 상장?
     * 갱신된 반독점 정책에 대한 흥미로운 실험
          + 반독점 정책의 결과가 어떨지는 모르지만, 정책 실험을 통해 더 현명해지자는 생각에 흥미를 느낌.
          + 불확실한 효과에 대한 두려움보다는 새로운 정책 시도를 통해 지혜를 얻자는 태도를 선호함.
     * Figma의 강력한 제품 지위 유지
          + Figma는 여전히 강력한 제품으로 남아 있으며, Adobe는 XD를 포기하면서 시장을 Figma에게 양보함.
     * 규제 기관의 느린 결정에 대한 비판
          + 규제 기관이 거래를 거절하기까지 15개월이 걸린 것은 비즈니스 운영에 있어 불확실성을 초래함.
          + 규제 기관은 결정을 더 빠르게 내려야 하며, 그렇지 않으면 M&A에 대한 부정적인 영향을 미칠 수 있음.
     * Figma의 이별 비용에 대한 궁금증
          + Figma가 10억 달러의 이별 비용을 받게 될 것인지, 그리고 그 돈이 유동성 이벤트를 기대했던 초기 직원들에게 돌아갈지에 대한 의문 제기.
     * 디자이너로서 Figma의 독립성 유지에 대한 반가움과 우려
          + 매일 Figma를 사용하는 디자이너로서 Adobe에 인수되지 않는 것은 좋은 소식임.
          + 그러나 Figma의 창업자 Dylan Field가 인수를 고려했던 것은 실망스러운 전환점으로, 제품의 장기적 방향에 대한 기대가 변화함.
     * Adobe에 대한 강한 반감 표현
          + Adobe가 Macromedia를 인수하고 망친 것에 대한 용서할 수 없는 감정을 표현함.
     * VC 투자에 대한 미래 영향에 대한 고찰
          + 현재 VC 투자의 목표가 큰 IPO나 인수로 이어지는 것이라면, 규제 문제가 투자를 위축시킬 수 있음에 대한 우려 제기.
"
"https://news.hada.io/topic?id=12413","폭스바겐, 고객 불만에 따라 차량 내 버튼 재도입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      폭스바겐, 고객 불만에 따라 차량 내 버튼 재도입

     * 폭스바겐의 내부 디자인에 대한 고객 및 비평가들의 불만이 많았음
     * CEO 토마스 샤퍼는 터치스크린 컨트롤이 ""많은 피해를 입혔다""고 인정
     * 내부 디자이너 다리우스 와톨라는 새로운 차량에 버튼을 다시 도입할 것이라고 발표

ID.2All 컨셉과 실제 버튼의 복귀

     * _Autocar_에 따르면, ID.2All 컨셉은 모든 모델에 대한 새로운 접근 방식을 보여줌.
     * 대형 인포테인먼트 디스플레이와 디지털 게이지 클러스터는 여전히 존재하지만, 중앙 스택에 스위치를 통해 조작 가능함
     * ID.2All 컨셉은 내부가 여전히 간결하지만, HVAC(난방, 환기, 에어컨)와 모든 창문을 위한 물리적 컨트롤이 있음
     * 버튼은 터치 슬라이더와 달리 제대로 작동하며, 어두울 때 찾기 어려운 문제도 해결함
     * Mk8 Golf와 ID.4의 터치 컨트롤은 때때로 작동하지 않고, 백라이트가 없어 어두운 환경에서 사용하기 어려움
     * 폭스바겐의 최신 기술에 대해 소유자와 전문 비평가들은 매우 비판적임

GN⁺의 의견

     * 폭스바겐의 결정은 사용자 경험을 중시하는 자동차 산업의 중요한 변화를 보여줌
     * 터치스크린 대신 물리적 버튼을 선호하는 사용자들의 의견이 제품 개선에 직접적인 영향을 미친 사례임
     * 이러한 변화는 특히 야간 운전이나 주행 중 조작의 편의성을 중요시하는 운전자들에게 긍정적인 반응을 얻을 것으로 예상됨.

   반가운 글이네요. 최근 높은 신뢰도가 요구되는 인터페이스에도 터치나 단순한 버튼이 도입되는것에 불만이 많았던 사람인지라...

   맥북프로에서 물리 버튼이 복구 된 것이 생각나네요.

        Hacker News 의견

     * 한 해커뉴스 사용자는 자신이 폭스바겐 차량을 3대 구매했으나, 터치스크린 전환 후 마지막 차로 마쓰다를 선택했다고 언급함. 이유를 딜러에게 전달했고, 이것이 독일 본사에 전달되어 변화가 있었다고 농담삼아 말함.

     실제 버튼이 작동하는 것이 터치 슬라이더보다 더 신뢰할 수 있음을 강조함. 특히 폭스바겐의 Mk8 Golf와 ID.4 모델에서 터치 슬라이더가 일관되게 작동하지 않고 어두운 곳에서 사용하기 어렵다고 지적함.
     * 다른 사용자는 버튼이 터치스크린보다 특정 상황에서 더 나은 것이 아니라, 터치스크린이 특정 상황에서 버튼보다 우월하다고 주장함. 그러나 대부분의 경우에는 버튼이 더 직관적이고 일관된 사용자 경험을 제공한다고 설명함. 또한 터치스크린 인터페이스가 때때로 더 나쁜 디자인을 초래할 수 있다고 지적함.
     * 2021년형 마쓰다 차량 소유자는 차량의 인포테인먼트 인터페이스에 대해 긍정적인 평가를 함. 센터 콘솔 뒤의 다이얼과 5개의 버튼이 운전 중 시스템과 상호작용하는 데 훨씬 우수하다고 언급함.
     * 물리적 버튼이 있는 기기를 선호한다는 의견을 제시함. 전자레인지, 오븐, 자동차 볼륨 조절 등을 포함한 다양한 기기들이 물리적 조작이 가능해야 한다고 주장함.
     * 폭스바겐 ID.4 모델의 창문 조절 스위치 설계에 대해 의문을 제기함. 두 개의 창문 스위치와 전후 창문을 전환하는 별도의 버튼이 있는데, 이것이 비효율적이라고 비판함.
     * 한 사용자는 2006년형 혼다 CR-V의 레이아웃을 추가 비용을 지불하고라도 유지하고 싶어함. 해당 차량의 설정을 보지 않고도 조작할 수 있었기 때문임.
     * 2023년형 ID.4 소유자는 차량이 이전 설정을 기억하지 못하고, 조정을 위해 여러 번 탭해야 하며, 화면을 찾기 어렵다고 불편함을 표현함. 이러한 이유로 다음 차량은 폭스바겐이 아닐 것이라고 언급함.
     * 또 다른 2023년형 ID.4 소유자는 터치 컨트롤로 인해 좋은 전기차가 망가졌다고 평가함. 특히 전후 창문 조절을 위한 터치 토글 스위치가 사용자 경험을 저하시킨다고 비판함.
     * 한 사용자는 레인지로버 시승 경험을 공유하며, 버튼의 기능이 모드에 따라 바뀌어 혼란스러웠다고 언급함. 이로 인해 차를 세우고 몇 분 동안 차량을 이해하는 데 시간을 할애해야 했다고 덧붙임.
     * 스피커 세트를 구매한 경험을 공유한 사용자는 볼륨을 조절하기 위해 메뉴를 클릭하는 대신 큰 볼륨 다이얼을 돌려 조절하는 것이 편리하다고 말함.
     * 터치스크린은 설정과 정보 표시에는 적합하지만, 운전 중 활성 제어에는 사용되어서는 안 된다고 주장함. 현대자동차가 적절한 균형을 맞추고 있다고 언급함.
"
"https://news.hada.io/topic?id=12477","50개국에서 금지된 제초제가 미국 노동자들에게 파킨슨병을 유발한다고 주장","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                50개국에서 금지된 제초제가 미국 노동자들에게 파킨슨병을 유발한다고 주장

파라쿼트 사용과 파킨슨병 위험 증가 연관성

     * 1980년대 후반, 게리 문드는 자신의 새끼손가락이 떨리는 것을 느낌.
     * 문드는 1980년부터 1985년까지 일하면서 강력한 제초제인 파라쿼트를 뿌림.
     * 파라쿼트는 스위스 기반의 중국 정부 소유 회사인 신젠타에서 제조함.

파라쿼트의 위험성과 연구 결과

     * 파라쿼트는 최소 58개국에서 금지됨, 그러나 미국에서는 여전히 인기 있는 제초제임.
     * 연구에 따르면 파라쿼트는 파킨슨병을 유발할 수 있는 방식으로 혈뇌장벽을 통과할 수 있음.
     * 2017년 이후 파라쿼트 제품에 노출되어 손해를 입었다고 주장하는 3,600건 이상의 소송이 제기됨.

파라쿼트와 파킨슨병 연관성에 대한 논쟁

     * 신젠타는 파라쿼트가 파킨슨병을 유발한다는 인과 관계를 부인함.
     * 일부 과학자들은 연구에서 파라쿼트를 사용하여 실험용 쥐에게 파킨슨병을 유도함.
     * 2011년 NIH 자금으로 지원받은 연구는 파라쿼트에 노출된 근로자들이 파킨슨병에 걸릴 위험이 250% 더 높다는 강한 연관성을 발견함.

파라쿼트의 건강 위험성

     * 파라쿼트는 미국 환경보호청(EPA) 웹사이트에서 ""매우 독성""으로 분류됨.
     * EPA는 현재 파라쿼트의 승인 상태를 재검토 중임.

신젠타의 연구와 공개된 정보 간의 차이

     * 법정 문서에 따르면 신젠타는 수십 년 동안 제품의 잠재적 부작용에 대해 조사함.
     * 신젠타의 주요 과학 고문은 회사가 동일한 결론에 도달한 자체 분석을 수행했음을 인정함.
     * 신젠타는 파라쿼트가 쥐의 도파민 세포 감소를 유발하는 연구 결과를 축소하려 시도함.

파라쿼트 금지를 위한 노력

     * 지구정의(Earthjustice)와 마이클 J. 폭스 재단과 같은 단체들은 파라쿼트 금지를 위해 노력 중임.
     * 2023년에는 파라쿼트를 금지하는 법안이 미국에서 제안됨.

GN⁺의 의견

     * 이 기사는 제초제 파라쿼트와 파킨슨병 사이의 연관성에 대한 연구 결과와 법적 논쟁을 다루고 있음.
     * 파라쿼트의 위험성에 대한 과학적 증거와 이에 대한 제조사의 부인 사이의 긴장이 중요한 이슈임.
     * 이 문제는 공중 보건의 중요성을 가지며, 특히 농업에 종사하는 사람들과 그들이 사는 지역 사회에 중대한 영향을 미칠 수 있음.

        Hacker News 의견

     * 한 회사의 커뮤니케이션 책임자가 파라쿼트가 파킨슨병을 유발한다는 결론을 내린 과학적 분석이 없다고 이메일을 통해 발표한 것에 대해 한 사용자가 흥미롭다고 언급함. 이 발언에는 많은 조건이 붙어 있으며, '결론'이라는 단어의 사용, '파킨슨병을 유발한다'는 표현의 선택 등이 포함됨. 이러한 조건들은 회사가 매우 엄격한 증거를 요구하고 있음을 나타냄.
     * 또 다른 사용자는 자신의 아버지가 농업 엔지니어로서 농약과 제초제를 다루었고, 제초제가 무해하다고 말했던 기억을 공유함. 그러나 그의 아버지는 결국 파킨슨병과 당뇨병을 앓게 됨. 파킨슨병으로 인한 운동 기능 상실과 소화 기능 장애로 인해 고통스러운 죽음을 맞이했다고 설명함.
     * 한 사용자는 기사의 제목이 모호하다고 지적하며, 미국 노동자들이 50개국에서 금지된 제초제로 인해 파킨슨병에 걸렸다고 주장한다는 더 명확한 제목을 제안함.
     * 미국 내 파라쿼트 사용에 대한 지도를 공유하는 링크가 제공됨.
     * 한 사용자는 가족 구성원이 제초제를 흡입한 후 파킨슨병과 유사한 질병으로 사망했다고 공유함. 가족력에 파킨슨병이 없었기 때문에 의사들은 이를 독소 유발 질환으로 결론지었음.
     * 위험 증가가 약 0.5%의 확률을 의미하는지에 대한 질문이 있으며, 실제 숫자와 기준선이 명확하지 않다는 불만을 표현함.
     * '파킨슨병 벨트'라고 불리는 지역이 있다는 주장에 대해 언급함. 이는 미국 중서부와 북동부 지역에서 파킨슨병의 유병률과 발병률이 높다는 연구 결과를 인용함.
     * 농부들이 파킨슨병과 같은 질병에 더 많이 걸리는 경향이 있다는 사실을 알게 된 사용자의 경험담. 농약의 독성과 알려지지 않은 영향에 대해 언급하며, 농부들이 대량으로 농약을 살포할 때 일부를 흡입하거나 피부에 묻힐 수밖에 없다고 설명함.
"
"https://news.hada.io/topic?id=12448","PyTorch 한 파일에서의 Mamba 구현","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        PyTorch 한 파일에서의 Mamba 구현

mamba-minimal

     * PyTorch로 작성된 단일 파일의 간단한 Mamba 구현체인 mamba-minimal에 대한 설명.
     * 공식 구현체와 동일한 숫자 출력을 제공하며, 순전파와 역전파 모두에 해당함.
     * 코드가 간소화되어 있고, 읽기 쉽고, 주석이 달려 있음.
     * 공식 구현체의 속도 최적화와 같은 기능은 포함되어 있지 않음.
     * 적절한 파라미터 초기화는 포함되어 있지 않지만, 가독성을 해치지 않고 추가 가능함.

Demo

     * prompt 완성 예시를 보여주는 demo.ipynb 파일.
     * Mamba 모델과 AutoTokenizer를 사용하여 텍스트 생성 예시 제공.
     * 생성된 예시 텍스트에서 Mamba가 세계에서 가장 긴 독사로 묘사됨.

References

     * Mamba 아키텍처는 Albert Gu와 Tri Dao가 작성한 논문 ""Mamba: Linear-Time Sequence Modeling with Selective State Spaces""에서 소개됨.
     * 공식 구현체는 GitHub에서 확인 가능함.

  GN⁺의 의견

     * mamba-minimal은 기존 Mamba 구현체의 복잡성을 줄여 초보 소프트웨어 엔지니어도 이해할 수 있도록 만들어진 프로젝트임.
     * 이 프로젝트는 기계학습 분야에서 코드의 가독성과 이해도를 높이는 데 기여함.
     * 실제 사용 예시를 통해 Mamba 모델의 활용 방법을 쉽게 보여주며, 이는 학습자에게 매우 흥미로운 자료가 될 수 있음.

        Hacker News 의견

     * 라이브러리 공유
          + 동료와 함께 공통된 모델 코드 대부분을 추출하는 라이브러리를 만들었음. 대부분의 모델들을 파이썬 import 절차와 주석을 제외하고 약 100줄로 구현 가능.
          + 예시로 BERT, Llama 1/2, MPT 모델을 들며, TorchScript JIT, PyTorch flash attention 등을 지원함.
     * Mamba 추론 구현 공유
          + Mamba 코드에는 속도 최적화 등 학습에 바로 적용하기 어려운 부분이 많아, 이를 도와줄 수 있는 자신의 Mamba 추론 구현을 공유함.
     * Mamba에 대한 비전문가 설명 요청
          + Mamba의 주요 통찰과 상태 공간 모델, Mamba가 성공적인 이유, 컨텍스트 길이에 대한 관심이 없더라도 Mamba의 다른 이점에 대해 비전문가 설명을 요청함.
     * 알고리즘의 핵심 기대
          + Mamba 알고리즘의 핵심이 병렬 접두사 스캔이 될 것으로 기대했으나, 실제 코드는 다른 방식으로 구현됨.
     * Mamba에 대한 재치 있는 농담
          + Mamba가 세계에서 가장 긴 독사라는 농담에 웃음. arXiv 논문을 참조하여 연구 뒤에 숨겨진 내용을 엿볼 수 있어 좋았음.
     * Mamba 모델 훈련 난이도 질문
          + Huggingface에 있는 Mamba 모델을 훈련하는 것이 얼마나 어려운지, 가장 큰 모델을 훈련하는 데 필요한 GPU 수와 시간에 대해 질문함.
     * 공식 CUDA 버전 해석 시도 공유
          + 공식 CUDA 버전을 해석하려 시도했으나 실패 후 다시 시도하지 않았음. 이에 비해 새로운 구현이 훨씬 낫다고 평가함.
     * 단일 파일 PyTorch 구현에 대한 감탄
          + 또 다른 단일 파일 PyTorch 구현에 감탄하며, 이러한 작업이 효율적인 ML 연구에 중요하다고 생각함. 연구 진행 속도가 실험 실행 시간의 역수와 관련이 있으며, 이는 코드의 Kolmogorov 복잡성과 관련이 있음. 연구 도구가 지식 발견 과정을 가속화하는 데 얼마나 중요한지 강조함.
     * 원본 논문 토론 요청
          + 원본 논문 토론이 있었는지 물으며, RWKV와 RetNet 같은 이전 모델들이 효율적인 구현 부족으로 메모리 문제나 비현실적인 계산 요구 사항 때문에 8k 컨텍스트 길이에 대한 전체 결과가 누락되었다는 점을 지적함.
     * 핵심 내용 간소화에 대한 칭찬
          + 복잡한 것들이 본질적인 부분으로 간소화되어 표현된 것을 좋아함.
"
"https://news.hada.io/topic?id=12379","UIDraw - 폰에서 그린 그림으로 웹사이트 생성하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     UIDraw - 폰에서 그린 그림으로 웹사이트 생성하기

     * GPT-4 Vision 과 PencilKit/PKCanvasView를 이용하여 아이폰에서 그린 UI를 HTML로 변환하는 SwiftUI 앱
     * Demo에서 간단한 계산기 모양을 그린후에 Calculator 라고 이름 붙인뒤 Build 누르면 동작하는 계산기 코드를 생성해 줌
     * Figma 및 VisionOS 등에서도 동작
"
"https://news.hada.io/topic?id=12459","Ask GN: 2023년 올해 최고의 콘텐츠는 ?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ask GN: 2023년 올해 최고의 콘텐츠는 ?

   올 한해 나온 콘텐츠 중에서 가장 재밌었다/강력 추천한다 싶은 콘텐츠는 어떤게 있으신가요?
   넷플릭스/디즈니/티빙/웨이브 같은 OTT 오리지널부터 영화, 게임, 만화 등 상관없이 꼽아주세요.

   2년만에 질문을 다시 올리네요. 혹시나 작년까지도 포함해야 한다면 그것도 좋을 것 같아요.
   2021년 : https://news.hada.io/topic?id=5591

   2023
   드라마 - 더글로리
   게임 - 데이브 더 다이버

   2022
   K리그 울산현대
   2022 LCK서머 젠지
   2022 롤드컵 drx
   2022 월드컵 아르헨티나팀

   데이브 더 다이버 이 게임을 생각보다 재밌게 했어요
   가볍게 하루에 1시간 정도씩 몰입하기 좋았습니다.
   진행이 될수록 막노동 느낌이 있긴 하지만, 여러 재미요소들이 있었어요.

   젤다 야숨 완전 인생겜이라서 왕눈도 꼭 해보고 싶은데, 방대하다해서 엄두가 안나네요
   사실 1주일 정도 쉴 때 콕 쳐박혀서 그것만 할 수 있는 환경이 아니라면 시작하고 싶지 않은 류입니다
   언젠가 이직 텀이 생기면 그때 해보려고 쟁여두는 중

   영화 ""더 웨일"" 입니다. 살면서 이렇게 울어본 적이 있었나 싶네요.

   저는 넷플릭스의 리키시가 가장 좋았습니다.
   일본소년만화 클리셰를 따라가긴 하는데, 스모라는 스포츠에 대해서는 잘 모르기도 했고 재미도 없다고 생각했는데 리키시를 보면서 스모에 대해서 조금 알게되고나서 생각도 많이 바뀌게 되었고요
   그리고 티빙에서 본 옐로우스톤과 1883도 무척 좋았습니다!

   일단 게임은 ""젤다의 전설: 왕국의 눈물"" 이 올해를 넘어 현재까지의 탑 게임인듯 합니다.
   제가 이전까진 평생 꼭 한번 해봐야할 게임으로 ""월드 오브 워크래프트""를 꼽았었는데요.
   요즘은 누군가 게임을 아직 안해본 사람들한테, 평생에 젤다 야숨/왕눈은 꼭 한번 해보라고 권하고 있습니다.
   문제는 왕눈을 끝낸 후에 다른 게임은 전혀 못하고 있다는 거네요. 잠깐씩이라도 탐험하는 재미가 있었는데 다른 게임들에 시간을 쏟기가 어렵습니다.
   정작 GOTY는 발더스게이트3가 차지했지만, 아직 손을 못대고 있어요.

   영상 콘텐츠는 정말 많이 소비하긴 했는데, 남에게 엄청 추천할 정도로 재미난 드라마는 별로 없네요.
   대신 쿠팡 오리지널인 ""대학전쟁"" 을 강력 추천합니다.
   서울대, 연세대, 고려대, 카이스트, 포항공대 학생들이 두뇌로만 싸우는 서바이벌인데요.
   정말 뇌지컬 100 이라고 불릴만큼 순수하게 두뇌를 겨루는 게임이라 즐겁게 봤습니다.
   쿠팡이 아니었다면 훨씬 더 많이 홍보가 되었을 프로그램이라고 생각해요. 시즌 2를 넘어서 계속 나오길 기대합니다.
"
"https://news.hada.io/topic?id=12455","2023년은 오픈 LLM의 해","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            2023년은 오픈 LLM의 해

     * 대규모 언어 모델(LLM)에 대한 대중의 관심이 증가하고, 오픈 소스와 비공개 소스에 대한 논의가 확산됨

Pretrained LLM을 위한 레시피

     * 모델 아키텍처: 특정 구현과 수학적 형태를 설명
     * 훈련 데이터셋: 모델이 학습하는 예시와 문서를 포함
     * 토크나이저: 텍스트를 숫자로 변환하는 방법 정의
     * 훈련 하이퍼파라미터: 모델 훈련 방법 정의
     * 컴퓨팅 파워와 전문가의 모니터링 필요
     * 사전 훈련된 모델의 가중치는 추론에 사용됨

2022년, 크기 경쟁에서 데이터 경쟁으로

     * 2022년초까지는 모델 크기가 성능에 중요한 요소
     * BLOOM, OPT, GLM-130B 등의 모델 출시
     * DeepMind의 새로운 연구로 데이터 크기의 중요성이 강조 되며 패러다임 전환

2023년, 오픈 릴리스의 해

     * 작은 LLM의 부상 : 2월에는 LLaMA(Meta), 4월에는 Pythia(Eleuther AI), 5월에는 MPT(MosaicML) , 6월에는 X-GEN(Salesforce), Falcon(TIIUAE), 7월에는 Llama 2(Meta)가 출시되었습니다. 9월에는 Qwen(Alibaba) 및 Mistral(Mistral.AI), 11월에는 Yi(01-ai), 12월에는 DeciLM(Deci), Phi-2(Microsoft) 및 SOLAR(Upstage) 출시
     * 모델 가중치가 포함됭고 있고, 작은측 모델에서 좋은 성능을 보여서 커뮤니티에서 빠르게 채택
     * 핵심 차이점은 훈련 데이터와 모델 라이센스

대화형 모델의 등장

     * 2023년에는 대부분의 사전 훈련된 모델이 대화형 버전과 함께 출시됨
     * 채팅 기반 파인튜닝, 인스트럭션 파인튜닝, 인간 피드백에서 강화 학습(RLHF), DPO(Direct Preference Optimzation) 등의 방법 사용
     * MPT, Falcon, XGen, Llama-2, Qwen, Yi, DeciLM 모델의 대화형 버전 출시

커뮤니티의 역할

     * 커뮤니티와 연구자들은 제공된 기본 모델을 활용하여 새로운 데이터셋과 미세 조정 모델 개발
     * 다양한 데이터셋과 미세 조정 전략의 출시
          + Human Preference: OpenAI의 WebGPT 데이터세트, HH-RLHF 데이터세트(Anthropic) 및 Summarize(OpenAI)
          + Instruction : Public Pool of Prompts by BigScience, FLAN 1 and 2 by Google, Natural Instructions by AllenAI, Self Instruct, SuperNatural instructions, Unnatural instructions
          + Human ChatGPT Instruction corpus (HC3), Alpaca, Vicuna, ShareGPT, Koala, Dolly, UltraChat, UltraLM, Zephyr, OpenHermes2,..

접근성의 대중화

     * 모델/데이터 병합: 모델의 무게를 결합하여 강점을 통합
     * PEFT: 전체 모델을 사용하지 않고도 미세 조정 가능
     * 양자화: 모델 크기를 줄이는 기술로 더 많은 사람들이 LLM을 사용할 수 있게 함

다음은 무엇인가?

     * Transformer를 능가할 새로운 아키텍처의 출현과 성능 향상
     * Mixtral, Mamba, Striped Hyena 등의 새로운 모델 출시

   좋은 오픈소스 모델들 많이 나와서 좋긴 했네요. LLaMA도 그렇고 Web에서도 돌아가게 제공해주는 오픈소스 모델도 그렇고 이것저것 받아서 많이 해봤었구요. 그런데 실제 쓰고 일상에서 쓰고 있는 건 ChatGPT 또는 GPT-4 가져다가 SaaS로 제공하는 친구들만 있으니, 좀 아이러니하긴 합니다. 오픈소스 모델도 중요하지만 결국 안정적으로 돌려줄 인프라랑 그걸 또 안정적으로 지원해줄 재정적 후원자(?)가 없으면 어려워서 그러나 하는 생각이 드네요.
"
"https://news.hada.io/topic?id=12390","MongoDB 보안 공지","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             MongoDB 보안 공지

MongoDB 보안 공지

     * MongoDB에서 로그인 시도 증가로 인해 Atlas 및 지원 포털 로그인에 문제가 발생함. 이는 보안 사고와 관련 없으며 로그인에 어려움이 있는 경우 몇 분 후에 다시 시도할 것을 권장함.
     * MongoDB는 특정 기업 시스템에 대한 무단 접근을 포함하는 보안 사고를 조사 중임. 이로 인해 고객 계정 메타데이터와 연락처 정보가 노출됨. 수요일 저녁에 의심스러운 활동을 감지하고 즉시 사고 대응 절차를 활성화함. MongoDB Atlas에 저장된 고객 데이터의 노출은 현재까지 인지되지 않았으나, 고객들은 소셜 엔지니어링 및 피싱 공격에 대해 경계하고, 피싱 방지 다중 인증(MFA)을 활성화하며, 정기적으로 MongoDB Atlas 비밀번호를 변경할 것을 권장함.

데이터 무결성 관련

     * 샤딩된 시계열 컬렉션에 대한 삽입 문제로 인해 삽입된 문서가 즉시 고아 상태가 되어 쿼리에 의해 반환되지 않고 데이터 손실이 발생할 수 있음.
     * mongosync 1.5에서 발생하는 경쟁 조건으로 인해 소스의 일부 쓰기 작업이 대상에 복제되지 않을 수 있음. 1.6 이상으로 업그레이드 권장.
     * 스토리지 엔진 문제로 인해 Ops Manager 및 Cloud Manager의 증분 백업이 일관성 없게 될 수 있으며, 영향을 받은 증분 백업에서 복원된 클러스터는 체크섬 오류로 인해 충돌할 수 있음.

운영 관련

     * dbhash 결과의 캐싱으로 인해 샤딩된 클러스터 구성 서버 간에 불일치가 발생할 수 있음.

보안 관련

     * Atlas Operator의 디버그 모드에서 민감한 정보가 기록될 수 있음.
     * 일부 MongoDB 드라이버가 응용 프로그램에 의해 구성된 명령 리스너에 인증 관련 데이터를 포함한 이벤트를 게시할 수 있음.
     * Windows 또는 macOS에서 실행되는 MongoDB 서버가 TLS를 사용하도록 구성된 경우 인증서 검증 문제가 발생할 수 있음.

   GN⁺의 의견:
     * 이 글에서 가장 중요한 것은 MongoDB가 최근 발생한 보안 사고에 대해 적극적으로 조사하고 있으며, 고객들에게 보안 조치를 취할 것을 권장하고 있다는 점임.
     * 데이터 무결성과 관련된 여러 문제들이 지속적으로 감지되고 있어, MongoDB 사용자들은 이러한 문제들에 대해 주의 깊게 모니터링해야 함.
     * 보안 사고는 기업과 개인 사용자 모두에게 심각한 영향을 미칠 수 있으므로, 이 글은 MongoDB 사용자들에게 특히 흥미롭고 중요한 정보를 제공함.

        Hacker News 의견

     * Atlas 계정과 지원 포털에 완전히 접속할 수 없는 상황이 발생함. Okta를 통한 Mongo 인증 시도가 모두 실패하고, ""The request contained invalid data.""라는 메시지가 로그인 화면에 표시됨. 지원 포털 이용을 위해서도 인증이 필요한데, 인증 실패에 대한 도움을 받기 어려움. 다른 사용자들도 대시보드 접근에 문제가 있는지 궁금함. 인증은 나중에 다시 작동하기 시작하여 대시보드 접근이 가능해짐.
     * 이 사례는 초기 조사 단계에서 정보가 제한적일 수 있음을 명확히 하며, 추후 정보가 제공될 것임을 알림. 이러한 접근 방식을 긍정적으로 평가함.
     * Atlas 고객이 영향을 받지 않았더라도, 웹사이트나 지원 채널에 대한 압도적인 발표 후 자연스럽게 우려를 가질 수 있음을 강조함. SSPL 라이선스 변경으로 인해 제한적이지만, 독립적인 MongoDB DBaaS 제공업체가 진정한 중복성을 제공할 것임. FerretDB가 실현 가능한 대안을 성공적으로 구축하기를 희망함.
     * MongoDB Atlas 비밀번호를 정기적으로 변경하는 것이 현대 보안 팀의 권장 사항인지에 대한 문맥이 누락되었는지 궁금함을 표현함.
     * MongoDB로부터 보안 사고에 대한 이메일 경보를 받음. MongoDB의 일부 기업 시스템에 대한 무단 접근이 있었으며, 고객 계정 메타데이터와 연락처 정보가 노출됨. MongoDB Atlas에 저장된 고객 데이터의 노출은 현재 인지되지 않음. 수요일 저녁에 의심스러운 활동을 감지하고 즉시 사고 대응 절차를 활성화함. 무단 접근이 발견되기 전에 일정 기간 동안 진행된 것으로 믿어짐. 관련 당국에 통보를 시작함. 고객들은 소셜 엔지니어링과 피싱 공격에 주의하고, 가능한 경우 피싱 방지 다중 인증(MFA)을 활성화하고 정기적으로 비밀번호를 변경할 것을 권장함. MongoDB는 조사가 진행됨에 따라 추가 정보를 mongodb.com/alerts에 계속 업데이트할 예정임.
     * ""데이터는 안전하다. 왜냐하면 우리는 디스크에 데이터를 쓰지 않았기 때문이다.""라는 농담을 함.
     * MongoDB를 사용해본 적이 없는 사람이 MongoDB를 다른 데이터베이스보다 선호하는 이유에 대해 궁금해함.
     * 요즘에도 사람들이 Postgres 대신 Mongo를 선택하는 이유가 무엇인지, json 데이터에 반대하지 않는 입장에서 진심으로 궁금해함.
     * MongoDB가 잘하고 있는지, 그에 대한 흥분이 다소 가라앉은 것 같은지에 대한 의문을 제기함.
"
"https://news.hada.io/topic?id=12358","파이프의 꿈: Yahoo Pipes의 생애와 시대","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      파이프의 꿈: Yahoo Pipes의 생애와 시대

2007년, 인터넷 프로그래밍의 변화

     * 2007년, Yahoo!의 열정적인 팀이 잠시 동안 인터넷 프로그래밍 방식을 변화시킴.
     * 이들의 이야기는 인터넷의 최고 특성 중 하나인 지식 공유를 장려하고 필요로 하는 개방성을 담고 있음.
     * 당시 잃어버릴 뻔했던 인터넷의 좋은 특성들을 보존하는 데 기여함.

일상의 즐거움과 업무의 조화

     * 팀원들은 매일 점심 후 마리오 카트 게임을 즐기며 일과를 이어감.
     * 게임을 통해 팀워크를 다지고 업무에 활력을 불어넣는 문화를 형성함.

Pipes의 직관적인 프로그래밍 경험

     * Pipes를 사용하면 잘못된 프로그램을 작성하기 어려움.
     * 화면에 무언가를 드래그하자마자 바로 작동하기 시작하고 결과물을 생성함.

Retool의 다양한 사용 사례

     * 관리자 패널, 데이터베이스 GUI, 대시보드, 리액트 컴포넌트 등 다양한 사용 사례 제공.
     * 다양한 데이터베이스 및 서비스와의 통합을 지원하여 개발자의 작업을 용이하게 함.

개발자 지원 및 커뮤니티

     * 개발자를 위한 변경 로그, 문서, 자체 호스팅 배포, API 생성기 등의 유틸리티 제공.
     * 지원 포럼, 디스코드 커뮤니티, 쇼 & 텔 등을 통해 개발자 간의 소통과 지원을 강화함.

GN⁺의 의견

     * Yahoo! 팀의 이야기는 협업과 개방성이 기술 발전에 얼마나 중요한지를 보여줌.
     * Pipes의 직관적인 사용성은 개발자들이 더 빠르고 효율적으로 작업할 수 있게 만드는 좋은 예시임.
     * Retool의 다양한 사용 사례와 개발자 지원 도구는 현대 개발자들에게 매우 유용한 자원이 될 수 있음.

        Hacker News 의견

     * Retool 직원이 작성한 이 글은 개발자에게 영향을 준 프로그래밍 환경에 대한 이야기를 담은 시리즈의 두 번째 편이다. 이 시리즈는 Retool 팀이 애정을 가지고 만들었으며, 과거에 영향을 받은 제품을 만든 원래 팀과 대화할 기회를 제공한다. Retool은 과거의 아이디어들을 발전시킨 제품으로, 구형 컴퓨팅 논문과 제품에서 영감을 얻어 새로운 제품을 만드는 데 도움이 되었다고 한다. Retool의 새로운 제품 개발에 Pipes가 중요한 참고점이었다고 언급하며, 독자들이 관심 있어할 만한 프로그래밍 환경에 대한 제안도 받고 있다.
     * 한 사용자는 Pipes를 통해 여러 Jira 프로젝트와 GitHub 커밋 스트림을 결합하여 신속하게 변경 사항을 파악할 수 있었던 경험을 공유한다. 이 방법은 RSS 피드를 통해 빠르게 누가 어떤 변경을 했는지 알 수 있게 해주었다고 말한다.
     * Flowpipe과 Steampie라는 오픈 소스 프로젝트를 소개하는 댓글이 있다. Flowpipe는 HCL을 사용하여 HTTP 쿼리, 컨테이너 실행, 람다 호환 함수 실행, 데이터베이스 쿼리 등을 자신의 기계나 CLI에서 수행할 수 있는 클라우드 스크립팅 엔진이며, Steampie는 SQL을 사용하여 클라우드 리소스를 쿼리하는 프로젝트로, Yahoo Pipes에서 영감을 받았다고 한다.
     * Yahoo Pipes와 YQL에 대한 그리움을 표현하는 댓글이 있으며, 2009년에 구현한 크로스 도메인 XHR 플러그인에 대한 경험을 공유한다. 이 플러그인은 클라이언트 측에서 임의의 웹 페이지를 가져와 CSS 선택자를 통해 쿼리할 수 있게 해주었고, YQL은 JSONP 형식으로 결과를 반환했다고 한다.
     * Pipedream이라는 워크플로우 자동화 도구를 추천하는 댓글이 있다. 사용자는 Pipedream을 Yahoo Pipes 스타일의 자동화를 원하는 사람들에게 추천하며, 자신은 해당 도구의 만족스러운 사용자라고 밝힌다.
     * Chrome on Android, Pixel 7에서 애니메이션이 매우 느리다며 사용할 수 없다는 불만을 표하는 댓글이 있다. 이 사용자는 텍스트 버전이 있는지 묻는다.
     * Yahoo Pipes를 볼 때마다 Tom Scott의 프로그래밍에 관한 비디오를 떠올린다고 말하는 댓글이 있다. 이 비디오는 실시간으로 조회수를 업데이트하는 내용을 담고 있다.
     * 기술이 종종 상위 기업에서 사용하는 도구로 필터링되는 경향이 있으며, HyperCards, Yahoo Pipes, Flash, Delphi 등과 같은 중간 수준의 충분히 좋은 옵션들이 충분한 시장을 얻지 못했다는 의견을 제시한다. Microsoft Excel이 드문 예외로 대부분의 세계를 지원한다고 언급한다.
     * Yahoo Pipes를 사용하여 RSS 피드와 팟캐스트를 필터링하여 관심 있는 콘텐츠만을 얻을 수 있었던 경험을 공유하며, 이 도구를 매우 유용하게 사용했고 많이 그리워한다는 댓글이 있다.
     * Pipes가 웹 2.0 시대에 맞게 개방적인 상호운용성을 통해 간단한 것들을 유용하게 결합하는 데 효과적이었다고 평가하는 댓글이 있다. Retool이 이러한 깊이 있는 분석을 왜 이제야 했는지 궁금해하는 의견도 있다.
     * 어떻게 이런 고품질의 콘텐츠가 만들어지는지에 대한 관심을 표현하는 댓글이 있다. 많은 정성과 시간이 들어간 것으로 보이며, 마케팅 목적은 아니지만 Pipes를 좋아했다면 Retool도 좋아할 것이라는 메시지가 은연중에 담겨 있다고 해석한다.
"
"https://news.hada.io/topic?id=12476","chDB - 임베드 가능한 ClickHouse 엔진","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      chDB - 임베드 가능한 ClickHouse 엔진

     * Embeddable한 In-Process SQL OLAP 엔진
          + SQLite + ClickHouse 느낌
     * 약 100mb 디스크 공간 필요. 64mb 램 컨테이너에서도 동작
     * Python, Node.js, Go, Rust, C/C++ 언어 바인딩 제공
          + Python DB API 2.0 지원
     * Parquet, CSV, JSON, Arrow, ORC 등 60가지 이상의 포맷 Input & Output 지원
     * ClickHouse 와 똑같은 SQL 문법 지원(Join, CTE, Set 명령, Aggregation, Windows 함수등 )
     * 2023년 4월 출시되어 12월에 1.0 도달
"
"https://news.hada.io/topic?id=12361","인공지능 신뢰 위기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               인공지능 신뢰 위기

드롭박스의 새로운 AI 기능에 대한 불신

     * 드롭박스가 새로운 AI 기능을 추가함.
     * 이 기능들이 OpenAI에 데이터를 보낸다는 비판에 직면함.
     * 드롭박스는 개인 파일이 모델 훈련 데이터로 사용되지 않는다고 부인함.

중요한 세부 사항

     * 드롭박스에는 고객의 동의 없이 AI 모델 훈련에 고객 데이터를 사용하지 않겠다는 원칙이 담긴 문서가 있음.
     * 설정에 숨겨진 체크박스가 있으며, 이는 사용자의 동의 여부가 불분명함.

OpenAI를 믿지 않는 사람들

     * 드롭박스의 제3자 파트너인 OpenAI는 데이터를 내부 모델 훈련에 사용하지 않고 30일 내에 삭제한다고 주장함.
     * 사람들은 OpenAI의 주장을 믿지 않으며, AI에 대한 신뢰 위기를 겪고 있음.

페이스북은 당신의 마이크를 통해 도청하지 않음

     * 페이스북이 사용자의 마이크를 통해 도청하고 광고를 보여준다는 이론은 기술적, 비기술적 이유로 쉽게 반박될 수 있음.
     * 그러나 사람들은 자신의 경험을 바탕으로 이러한 주장을 믿지 않음.

이것은 정말 중요함

     * 신뢰는 중요하며, 회사가 개인정보를 거짓으로 다루는 것은 심각한 주장임.
     * 정부의 역할은 이러한 일이 발생하지 않도록 하는 것임.

우리가 할 수 있는 일

     * 큰 AI 연구소들은 훈련 데이터에 대한 정보를 공유하여 신뢰를 개선할 수 있음.
     * ChatGPT의 상호작용이 모델 개선에 사용되지만, 어떻게 사용되는지에 대한 세부 정보가 부족함.

로컬 모델에 대한 기회

     * 사람들은 클라우드가 아닌 자신의 기기에서 실행되는 로컬 모델을 더 신뢰함.
     * 로컬 모델의 품질이 향상되고 크기가 줄어들고 있음.

GN⁺의 의견

     * AI와 개인정보 보호의 교차점은 중요한 문제이며, 이에 대한 투명한 대화가 필요함.
     * 드롭박스와 OpenAI의 주장에 대한 불신은 기술에 대한 이해 부족과 신뢰의 결여에서 비롯됨.
     * 이 글은 AI 기술의 빠른 발전과 그에 따른 개인정보 보호의 중요성을 강조하며, 이해와 신뢰를 바탕으로 한 투명한 커뮤니케이션이 왜 필요한지를 설명함으로써 흥미를 끌고 있음.

        Hacker News 의견

     *

     스크린샷은 내 계정에서 직접 찍은 것이다. '켜짐'으로 설정되어 있지만, 나는 그것을 직접 켜지 않았다.
          + 웹사이트 개인정보 보호와 관련하여 '동의'에 대한 위기도 존재함. 법적으로 실행 가능한 동의의 정의가 필요하며, 이는 사용자가 데이터를 제3자에게 전송하는 것에 대해 긍정적인 동의를 해야 한다는 것을 의미하지 않아야 함. 좋은 기사이지만, '내 전화가 나를 엿듣고 있다'와 'openai가 내 데이터를 어떻게 사용하는지 거짓말을 할 수도 있다'는 비유는 다소 결함이 있음. 아이폰의 마이크에 접근하는 제3자 앱에 대한 강력한 검사가 데이터가 제3자에게 전달될 때와 동등하지 않기 때문임. 일반인에게는 같은 것일 수 있지만, 실제로는 전자로부터 보호받고 있음. 사용자 데이터의 사생활과 주권을 위한 싸움이 이미 패배했다고 행동하는 것은 매우 비생산적임. 기술에 어느 정도 밝은 사람들이 새로운 기업의 남용에 대해 '오래된 뉴스'라는 태도로
            반응하는 것을 많이 보게 됨. 이러한 사람들은 더 나은 예를 보여줘야 함. 이러한 무력감은 신뢰를 해치고, 더 나은 세상이 가능하다는 인상을 주지 못함. 드롭박스의 실수는 이러한 사고방식이 되돌아오는 것으로 보임: 사용자가 우리가 묻지 않고 그들의 개인 파일을 제3자에게 보내는 것을 신경 쓰지 않을 것이라고 생각함. 나는 드롭박스에서 대부분의 데이터를 이미 빼냈고, 어제 드롭박스를 최종적으로 취소할 필요성을 느낌. 감사합니다, 드롭박스!
     *

     이 글은 다소 순진하고 '선의를 가정한다'는 느낌을 준다. AI 외부에서 지난 10년 동안 일어난 일을 보라: 모두가 데이터를 마치 강박적인 수집가처럼 소비하고 있음. 구글과 페이스북뿐만 아니라 모든 사람들이 그렇게 하고 있음. 오늘 스웨덴 전통 요리의 미니 사이트가 자동 재생 비디오, 어두운 패턴의 쿠키 동의 배너 등을 추가한 것을 발견함. 거의 모든 새로운 앱/사이트가 이 경제 축을 중심으로 구성되어 있음. 그리고 LLM이 강해지기 시작할 때 갑자기 3자 API에 대한 조정된 봉쇄가 이루어짐. 이제 우리는 ChatGPT/OpenAI와 그 경쟁자들을 가지고 있음. 다른 플레이어들이 데이터를 마치 비밀스러운 야간 간식처럼 먹는다면, 현재 세대의 AI는 마치 혈액과 뇌를 갈망하는 빠르고 민첩한 좀비와 같음. 데이터가 제품에서 더 직접적인 역할을 하기 때문이지만, 기술
     VC들의 전형적인 하이프 트레인 경쟁 심리도 수십 년 만에 처음으로 잠에서 깨어남. 모든 상황이 좀비 아포칼립스/골드 러시/나중에 용서를 구하는 것 등을 가리킴. 그래서 그들이 (모두) 안전/책임 수사학에 더욱 집중하는 이유라고 강력히 믿음. 불가피한 명성에 관한 PR 위기(복수형)가 오기 전에 물을 흐리기 위한 탄약을 미리 확보함. 한편 우리 기술자들은 마치 지난 10년을 깊이 체험하지 않은 것처럼 빈둥거리고 있고, 이번에는 AI가 학문적 기반이 있기 때문에, 화려한 새로운 회사들 때문에, 안전 수사학 때문에, '발을 딛고 있는' 창업자들의 엣지 있는 트위터 발언 때문에 다를 것이라고 생각함. 무슨 일이 벌어지고 있는지 정확히 알지는 못하지만, 사람들이 어떻게 작동하는지 충분히 오래 알고 있음. 그리고 그들은 더 나아지지 않았음.
     *

     당신의 기사는 내 데이터에 대한 훈련을 넘어서는 프라이버시 문제를 간과하고 있다고 생각한다.
          + 전문직 종사자로서, 내 정보가 어디로 가는지에 대한 기밀 유지 협약과 규정을 준수하는 클라이언트를 가지고 있음. 내 데이터가 서버에 머무르는 서비스를 선호함. 내 데이터가 왜 항상 완전히 암호화되어 있지 않고 오직 나만이 볼 수 있는지 이해하지 못하지만, 내 동의나 관심 없이 인터넷을 통해 다른 회사에 전송되어 처리되는 것은 끔찍함. AI 기능을 사용할 때 동의하지만, 내 개인 파일을 내 동의 없이 인터넷 전체에 보내는 것은 미친 짓임. 솔직히, OneDrive에는 마이그레이션 도구가 있고, 드롭박스 비즈니스에 대한 시험판을 받아 어젯밤에 모든 파일을 자동으로 옮김. 이것은 그들의 회사가 내가 요청하지 않은 것들을 계속해서 하고, 내가 지속적으로 요청하는 기능을 제공하지 않는 것에 대한 마지막 한계임... 끝에서 끝까지 암호화. 드롭박스
            비즈니스에서 Office 365 OneDrive 계정으로 몇 번의 클릭으로 마이그레이션하고 싶다면, 여기 있음: [마이그레이션 도구 링크]
     *

     여기서 핵심 문제는 사람들이 드롭박스의 개인 파일이 OpenAI에게 모델 훈련을 위해 사용되고 있다고 걱정하고 있다는 것이다.
          + 이것은 문제의 일부일 뿐임. 내가 승인하지 않는 한 내 데이터가 어디로든 보내지는 것을 원하지 않음. 이 경우, 우리는 OpenAI가 우리 파일을 훈련에 사용하지 않을 것이라고 그들이 말하는 것을 의심할 이유가 없지만, 그들이 우리 파일을 안전하게 다룰 수 있다는 것을 믿어야 함.
     *

     페이스북은 이것을 하지 않고 있다고 말한다. 거짓말로 들키면 그들의 명성에 미칠 위험은 엄청나다.
          + 페이스북이 누군가의 전화 마이크를 통해 몰래 엿듣고 있다고 믿지 않지만, 그 구체적인 주장은 전혀 설득력이 없음. 페이스북의 명성은 적어도 내가 아는 일반 비기술적인 사람들 사이에서는 최악임. 미국에 거주하고 있으며, 사람들은 페이스북이 2021년 1월 6일의 폭동을 조장하는 데 도움을 주었고, 그 후 모든 책임을 회피하면서 아무것도 고치지 않은 것을 알고 있음. 많은 사람들이 이미 그들이 아마도 하고 있을 것이라고 생각하는 이 일로 인해 그들이 흡수할 명성 피해는 비교가 되지 않음.
     *

     기사에서 마이크로폰 신뢰 측면은 주요 포인트를 더 명확하게 할 수 있는 것에서 주의를 산만하게 하는 붉은 청어로 보인다.
          + 페이스북은 그들의 앱과 인터넷에서 당신의 데이터를 가져와 인터넷에서 당신의 행동을 추적하고, 이 데이터를 당신의 <i>모델</i>에 입력함. 이 모델들은 때때로 당신이 생각하는 것을 거의 예측할 수 있을 정도로 정확함. 그래서 평범한 사람들은 그들이 마이크를 통해 엿듣고 있어야 한다고 결론짓게 됨. OpenAI와 같은 LLM 회사와 그 파트너들은 거의 정확히 같은 모델을 사용함. 원하는 곳에서 데이터를 가져와 모델을 개선하고, 당신이 클릭하길 원하는 곳에 계속 클릭하게 만들고, 당신을 수익화하기 위함임.
     *

     나는 OpenAI나 다른 대기업이 그들이 했다고 말하는 것, 할 것이라고 말하는 것, 하고 있는 것에 대해 '신뢰'하지 않는다.
          + 그러나 나는 OpenAI가 사용자의 동의 없이 드롭박스에서 데이터를 <i>훈련</i>에 사용하지 않는다고 믿음. 하지만 그것이 여기서의 문제가 아님. 문제는 데이터가 이동 중일 때 발생함; 실제로 데이터를 읽을 수 있는 제3자에게 데이터를 보내고, 드롭박스가 통제할 수 없는 불량 직원이 있을 수 있으며, 데이터가 로그에 나타나거나 다른 정책에 따라 처리될 수 있음. 내가 드롭박스에 개인 데이터를 보내면, 그들은 내 명시적이고 정보에 입각한 동의 없이 어떤 이유로든 그것을 제3자에게 보낼 수 없음. 이것이 어떻게 논쟁의 여지가 있는지 확신할 수 없음. 드롭박스가 모델을 보관하고 동의하는 사용자에게 RAG 검색을 제공하려는 것이라면 그것은 하나의 문제임. 드롭박스가 모든 사용자의 모든 데이터를 사전에 아무에게도 알리지 않고 제3자에게 보내는
            것이라면 그것은 또 다른 문제임. 끔찍한 일임.
     *

     AI에 대한 신뢰 위기?
          + 한 회사의 이사회/CEO가 거짓말이나 조작에 대한 혐의로 해고/변경되었다는 소식을 들은 후 어떻게 될까? 드롭박스가 사용자 데이터에서 파생된 데이터를 스캔하여 얻는다면, 그 '파생된' 데이터는 더 이상 '사용자 데이터'가 아니라 드롭박스 데이터가 되고 공유될 수 있음. 그것은 개별 사용자와 직접적으로 관련이 없을 수 있는 통계적인 성격일 수 있지만, 그것이 바로 훈련 데이터가 아닌가? 그것이 작동하는 방식이 아닌가? 그것은 거짓말이 아니라 머리카락을 가르는 것임. 아니, 그것은 비윤리적인 행동이며 대기업에게는 표준이 되었음.
     *

     AI 회사를 신뢰하지 않는 사람들은 다양한 산업의 회사들, 비영리 단체들, 심지어 정부 기관들에 대해서도 비슷한 감정을 가지고 있을 것이라고 생각한다.
          + 나에게는 AI 기반 회사들을 넘어서는 훨씬 더 큰 신뢰 문제가 있는 것 같음. 그래서 이 특정 분야가 모든 전선에서 오는 이러한 불신과 싸우려고 하는 것은 이러한 비즈니스의 범위를 벗어난 불가능한 임무처럼 보임. 이 문제에 대한 해답이 무엇인지, 실제 문제가 있는지, 이러한 만연한 냉소주의가 모든 것과 모든 사람에게 퍼질 경우 우리가 향할 수 있는 것이 무엇인지 확신할 수 없음. 아마도 우리는 단지 흥미로운 시대에 살고 있는 것으로 저주받았을지도 모름.
"
"https://news.hada.io/topic?id=12412","Word2Vec, ICLR2013에서 네 번 '강력 거절' 판정 받아","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Word2Vec, ICLR2013에서 네 번 '강력 거절' 판정 받아

효율적인 단어 표현의 벡터 공간 추정

     * 연구자들은 매우 큰 데이터 세트에서 단어의 연속 벡터 표현을 계산하기 위한 두 가지 새로운 모델 아키텍처를 제안함.
     * 이 표현들의 품질은 단어 유사성 작업에서 측정되며, 이전에 가장 좋은 성능을 보였던 다양한 유형의 신경망 기반 기술과 비교됨.
     * 연구진은 훨씬 낮은 계산 비용으로 정확도가 크게 향상됨을 관찰함. 즉, 16억 단어 데이터 세트에서 100만 어휘에 대한 고품질 300차원 벡터를 하루 이내에 하나의 CPU로 파생시킬 수 있음.
     * 또한, 이 벡터들이 단어 유사성의 다양한 유형을 측정하기 위한 테스트 세트에서 최신 성능을 제공함을 보여줌.
     * 연구 커뮤니티에서 사용할 수 있도록 이 테스트 세트를 공개할 예정임.

의견

     * 리뷰어들은 제안된 모델이 기존 모델과 어떻게 다른지, 그리고 왜 더 우수한지에 대한 명확한 동기 부여가 부족하다고 지적함.
     * 모델의 설명이 최소한이며, 이전 연구와 어떻게 다른지 결정하기 어려움.
     * 리뷰어들은 논문이 다양한 데이터 세트와 다른 차원에서 훈련된 모델 간의 일관성 없는 비교를 포함하고 있으며, 이는 논문의 주장을 설득력 있게 만드는 데 필요함을 강조함.

GN⁺의 의견

     * 이 연구는 단어 벡터를 효율적으로 추정하는 새로운 기법을 제안하며, 이는 자연어 처리 분야에서 중요한 발전임.
     * 제안된 모델이 기존의 복잡한 신경망 모델보다 훨씬 빠르게 훈련될 수 있으며, 이는 대규모 언어 데이터를 다루는 연구에 유용할 수 있음.
     * 논문은 단어 벡터의 품질을 평가하는 새로운 방법을 제시하고 있으며, 이는 향후 연구에서 단어 유사성을 측정하는 표준으로 자리잡을 가능성이 있음.

        Hacker News 의견

     * Tomas Mikolov의 페이스북 게시물에서 word2vec에 대한 더 많은 세부사항을 확인할 수 있음.
          + 전문가들도 실수를 한다는 점이 재미있고 의미심장함.
          + Geoff Hinton과 같은 이들은 ""이미 알고 있었지만 발표를 잊었다""고 말하며, Ian Goodfellow는 트위터에서 이에 대해 분노하는 등 다양한 반응이 있었음.
     * 리뷰어들이 좋은 일을 했다고 생각함.
          + 리뷰는 논문의 품질에 대한 것이며, 미래에 얼마나 영향력을 미칠지에 대한 것이 아님.
          + 모든 영향력 있는 논문이 실제로 좋은 것은 아님.
     * 리뷰어 f5bf의 코멘트가 흥미로움.
          + 최신 모델들(GPT, 이미지 확산 모델 등)은 단어의 이중 의미를 가지고 놀 수 있는 능력이 있음.
          + 이는 인간만의 특징으로 여겨졌지만, 이제는 생성 모델의 도구 상자에 포함됨.
          + word2vec의 모호성이 이러한 단어 놀이 능력에 기여하는지는 확실하지 않지만, 창의적 목적에는 특징이지만 엄격한 벡터 공간으로 의미 공간을 모델링하고자 할 때는 버그가 될 수 있음.
     * 리뷰 과정이 새로운 아이디어에는 효과적이지 않다는 의견이 있음.
          + 새로운 것을 이해하기 위해 수많은 시간을 할애할 수 있는 사람은 없음.
     * 논문의 초기 버전이 거절되었지만, 리뷰를 바탕으로 나중에 업데이트와 명확화가 이루어짐.
          + 이는 리뷰 과정이 어떻게 작동해야 하는지 보여주며, 특히 혁신적인 작업에는 더 많은 설명이 필요함.
     * ""강력 거부""라는 네 개의 의견이 있지만, 모두 같은 리뷰어로부터 동시에 나온 것으로 보임.
          + 왜 해당 리뷰어의 점수만 보이는지 의문임.
     * 피어 리뷰의 가치에 대해 강한 의견을 제시하는 사람들 중 실제로 저자, 리뷰어, 편집자로서 피어 리뷰에 참여한 경험이 있는지 궁금함.
          + 피어 리뷰 없이 연구나 아이디어를 공유할 수 있는 많은 장소가 있음(예: arXiv/bioRxiv).
     * 제목이 오해의 소지가 있다고 지적됨.
          + ""강력 거부"" 네 번은 단일 저자로부터 나온 것으로, openreview의 오류일 가능성이 있음.
     * 리뷰 스레드는 부정적인 Show HN 스레드처럼 읽힘.
          + 논문은 초기에 일부 질문/부정적인 피드백을 받았고, 저자들은 리뷰어들에게 약간의 수정을 요청함.
     * 대학 시절, 간단한 텍스트 수정 시스템을 만들고 이에 대한 논문을 제출했지만, 영어 문법 문제로 거절됨.
          + 리뷰어들에게 피드백을 요청했지만, 시스템이 수정한 ""전/후"" 예시를 오류로 지적받음.
          + 몇 번의 시도 끝에 포기함.
"
"https://news.hada.io/topic?id=12446","웹플랫폼 Baseline 2023","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           웹플랫폼 Baseline 2023

     * Baseline: 웹플랫폼의 기능을 주요 브라우저에서 사용할 준비가 되었는지를 알려주는 기준선. 2단계(Newly로 들어와서, 30개월후 Widely가 됨)
          + 이제 Can I Use 사이트에도 Baseline이 도입되어 특정 기능에서는 Newly/Widly 뱃지가 보여짐
     * 엘리먼트 Size Container Query
     * 새로운 컬러공간 및 함수들 : sRGB 색 영역을 벗어난 색에 접근 가능, lch()/lab()/oklch()/oklab(), color-mix(), color()
     * Compression Streams API
     * Offscreen Canvas : DOM 과 분리되어서 렌더링됨. 속도 향상 및 WebWorker 지원이 가능해짐
     * Module Preload 지원
     * 삼각함수가 베이스라인에 포함됨: sin(), cos(), tan(), asin(), acos(), atan(), atan2()
     * inert 속성 : 설정시 움직이지 못하게 되어서 인터랙션이 불가능해짐 (click 이벤트 발생 안됨. 포커스 못받음. 접근성 트리에서 제외)
     * CSS Grid 레이아웃에서 Subgrid 지원
     * NumberFormat V3
     * Fullscreen API
     * CSS :has() 셀렉터
     * 그외 올해 Baseline에 추가된 기능들
          + Constructable Stylesheets
          + Complex nth-child selectors in CSS
          + The range syntax for media queries
          + Import Maps
          + Multiple values for CSS display
          + @counter-style
          + The counter-set CSS property
          + The linear() easing function
          + Origin Private File System (OPFS)
          + CSS Nesting, including the change that adds relaxed parsing.
          + CSS :dir() pseudo-class selector
          + CSS cap length unit
          + CSS masking
          + Media query support for HTML video <source> elements
          + The HTML <search> element
          + Lazy loading of <iframe> elements (landing in Firefox 121 on December 19th)
          + The lh and rlh CSS line-height units

   언제쯤이면 아무렇지도 않게 사용할 날이 오려나...

   CSS에 멋진 기능이 많이 추가되서 행복해요
"
"https://news.hada.io/topic?id=12430","실시간으로 유체, 불, 그리고 연기를 시뮬레이션하는 기술","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    실시간으로 유체, 불, 그리고 연기를 시뮬레이션하는 기술

     * 실시간으로 불과 연기 같은 유체를 시뮬레이션하는 데 관련된 수학, 알고리듬, 방법에 대한 노트와 소스코드(깃헙)

  1. 유체 시뮬레이션

     * 불을 시뮬레이션하기 전에 유체를 시뮬레이션해야 함
     * 유체가 비압축성이고 비粘性이라고 가정하면 문제가 크게 단순화됨

    1.1 기본 유체 역학

     * 공간의 DDD 영역에 유체가 채워져 있고, 시간 ttt에 대해 유체의 속도가 u(x,t)임
     * 2D 속도장 u를 N×N 그리드로 표현할 수 있음
     * 염료 한 방울을 유체에 떨어뜨리면 어떻게 될까?
     * 염료의 밀도를 나타내는 스칼라장 ψ(x,t)를 정의하고, 유체의 속도에 의해 이동하는 것을 advection이라 함
     * advection을 계산하기 위한 Naive Method는 각 그리드 포인트를 이동시키고 가장 가까운 그리드 포인트를 업데이트하는 것이지만, 병렬화하기 어렵고 불안정함

   Advection에 대한 편미분 방정식
     * advection을 안정적으로 파생하기 위해 명시적인 PDE 표현식이 필요함
     * 고정된 공간 영역 WWW 내의 염료 총 질량은 ∫WψdV이고, 시간에 따른 질량 변화는 ddt∫Wψ(x,t)dV임
     * 질량 보존 법칙에 따라 ddt∫WψdV=−∫Sψu⋅ndA가 됨
     * 발산 정리를 적용하면 ∫W[∂ψ∂t+∇⋅(ψu)]dV=0이고, 단위 부분 영역 W=dV에 대해 ∂ψ∂t+∇⋅(ψu)=0이 됨
     * 이것은 우리가 풀어야 할 명시적인 PDE를 제공함

   Advection에 대한 안정적인 방법
     * eqn. (1)을 자세히 보면, 우측 항이 −u 방향의 방향 미분임
     * Semi-Lagrangian advection이라고 불리는 이 방법은 1999년에 Jos Stam에 의해 발명됨
     * 각 그리드 포인트를 한 번만 업데이트하기 때문에 병렬화가 매우 쉽고, 무조건 안정적임

    1.2 나비에-스토크스 방정식

     * 우리는 유체의 스칼라 속성이 시간에 따라 어떻게 진화하는지에 대한 모델을 찾았지만, 유체 흐름 자체는 어떻게 될까?
     * 나비에-스토크스 방정식은 유체 내의 어떤 지점에서 속도장 u가 시간에 따라 어떻게 변하는지 정의함
     * 우리는 유체가 비粘性이라고 가정했으므로 μ=0이고, 외부 힘도 일단 무시할 수 있음
     * 따라서 우리는 자기-유도(self-advection)와 압력(pressure) 두 가지 항만 남게 됨
     * 각 타임스텝에서 이 항들을 수치적으로 계산하고 더하면 유체를 시뮬레이션할 수 있음

   압력 해결
     * 새로운 속도장이 비압축성 제약을 따르는지 알 수 없으므로 압력 항 p가 이를 수정해야 함
     * 이를 위해 푸아송 방정식을 풀어야 함
     * 푸아송 방정식을 풀기 위해 우리는 Jacobi 방법과 같은 반복적인 알고리즘을 사용할 수 있음
     * Jacobi 방법은 GPU에서 병렬로 실행될 수 있어 구현이 매우 간단함

   요약: 나비에 스토크스 시뮬레이션
     * 나비에-스토크스의 수학은 조금 복잡할 수 있지만, 방정식을 풀어 유체를 시뮬레이션하는 것은 몇 가지 주요 업데이트 절차로 요약됨

    1.3 와도성 제한(Vorticity Confinement)

     * 그리드를 사용하여 속도장을 저장하는 것은 매우 편리하지만, 그리드 포인트 사이의 값을 보간할 때 원치 않는 수치적 스무딩이 발생함
     * 이로 인해 유동의 난류 소용돌이가 소멸되어 일반적으로 지나치게 부드럽고 ""지루한"" 유체 흐름이 됨
     * 와도성 제한은 이러한 소실된 와도성을 증폭시키는 과정임
     * 와도성 제한은 헬리콥터 블레이드의 매우 복잡한 유동장을 해결하기 위해 고안됨
     * 와도성은 u의 컬을 취하여 각 지점에서 계산되며, 와도성을 증폭시키기 위해 각 지점에서 원형 흐름을 추가함

   Curl-Noise Turbulence
     * Curl noise는 와도성 제한과 유사한 방법으로, 속도장의 와도성을 측정하고 증폭하는 대신, 노이즈 함수를 사용하여 스칼라 와도성장을 처음부터 만듦
     * 빠르게 움직이고 매우 난류인 유체들은 와도성 제한과 curl noise의 혜택을 가장 많이 받음

  2. 불 시뮬레이션

     * 불과 연기를 시뮬레이션하기 위해서는 연료와 온도를 나타내는 채널을 추가하고, 연료의 연소를 모델링하여 열을 생성해야 함
     * 또한 열이 많은 유체의 부분이 열 부력 모델에 따라 상승하는 것을 처리하고, 불꽃을 올바르게 렌더링해야 함

    2.1 기본 연소 모델

     * 화학적으로, 불은 연료 물질의 산화 반응으로 인해 발생하며, 열과 빛을 방출함
     * 연료의 밀도를 나타내는 스칼라장 ρ와 온도를 나타내는 스칼라장 T를 정의함
     * 연료가 연소되어 시스템에 온도를 추가하며, 온도는 뜨거운 곳에서 차가운 곳으로 확산됨
     * 열 대류는 이 두 과정의 결합으로 정의되며, 우리는 이미 이를 모델링하는 수학적 모델을 가지고 있음 - advection!

GN⁺의 의견:

    1. 이 글은 실시간으로 불과 연기와 같은 유체를 시뮬레이션하는 복잡한 과정을 설명하고 있으며, 이는 컴퓨터 그래픽스와 게임 개발에 매우 중요한 주제임.
    2. 최근 GPU의 발전으로 복잡한 유체 시뮬레이션을 실시간으로 처리할 수 있게 되었고, 이는 시각적으로 매력적인 게임과 영화 특수 효과를 만드는 데 기여함.
    3. 이 글은 나비에-스토크스 방정식과 와도성 제한과 같은 고급 수학적 개념을 다루고 있어, 이 분야에 관심 있는 초급 소프트웨어 엔지니어에게 유익한 정보를 제공함.

        Hacker News 의견

     * CFD(전산 유체 역학) 박사 학위를 받은 한 사람으로서, 와류 구속 방법이나 컬-노이즈 난류에 대해 접해본 적이 없음을 인정함. 매일 새로운 것을 배운다는 것을 실감함.
          + 산업 분야의 CFD에서는 높은 레이놀즈 수를 다루기 때문에, 수치 방법의 인위적 소산을 상쇄하기 위해 노이즈를 적용하는 것은 바람직하지 않음. 실제로 많은 사람들이 높은 레이놀즈 수 시뮬레이션을 안정화하기 위해 인위적 소산을 원함. 컴퓨터 그래픽스 분야의 요구사항은 물리학적 정확성보다는 올바르게 보이는 것에 더 중점을 둠.
     * 게임용 불과 연기 시뮬레이션과 GPU에서의 유체 시뮬레이션에 대한 언급이 있음. 게임에서 이러한 효과가 실행되어야 한다면, GPU가 이미 바쁘지 않은가 하는 의문이 있음. CFD 문제를 해결하고 동시에 렌더링하는 것은 많은 작업으로 보임.
          + 이러한 시뮬레이션을 iGPU에서 실행할 수 있으며, dGPU는 더 많은 렌더링 관련 작업을 수행할 수 있는지, 아니면 iGPU가 너무 약해서 CPU로 전환하는 것이 나은지에 대한 의문이 있음.
     * ""10 Minute Physics""라는 다른 사람이 이러한 주제를 설명하는 것이 매우 좋음.
     * 수학 전공자에서 소프트웨어 엔지니어로 전환한 사람이 CFD 시뮬레이션에 관심이 있으며, 벡터 미적분학이나 편미분 방정식을 오랫동안 다루지 않아 수학이 많이 녹슬었음에도 불구하고 이 분야에 대해 배우고 싶어하는 의견이 있음.
     * 간단한 유체 시뮬레이션을 구현하는 비디오를 최근에 보았으며 매우 흥미로웠음.
     * EmberGen은 소비자 GPU에서 실시간으로 불과 연기 시뮬레이션을 수행하는 놀라운 소프트웨어로, 노드 기반 워크플로를 지원하여 새로운 효과를 쉽게 만들 수 있음.
          + 워크플로우가 몇 시간 걸리던 작업이 몇 분 만에 완성될 수 있도록 개선됨.
          + EmberGen이 해커뉴스에서 큰 주목을 받지 못한 것에 대해 약간 실망함을 표현함. (EmberGen/JangaFX와 관련 없는 만족스러운 고객의 의견)
     * 기사의 주된 내용은 아니지만, 시뮬레이션을 선택할 때 예술적 통제를 포기하고 종종 압도적인 양의 컨트롤을 통해 고통스러운 협상을 해야 한다는 서론이 다소 잘못되었다는 의견이 있음.
          + 발록과 같은 핵심 장면에서는 시뮬레이션을 결정하지 않고 모든 프레임에 대한 완전한 통제를 선호할 것임.
          + 톨킨 판타지 예시로, 강이 많은 굽이를 돌고, 몇몇 바위가 있으며, 가끔 물고기가 뛰어오르는 풍경 장면은 시뮬레이션에 더 적합함.
     * 64GB의 RAM을 가지고 있음에도 불구하고, 해당 페이지가 탭을 완전히 종료시키는 문제를 겪음.
     * 컴퓨터 그래픽스 폭발이 왜 형편없는지에 대한 좋은 설명을 제공하는 비디오 링크가 있음.
     * distill.pub 템플릿과 페이지 빌딩 시스템의 출력물에 매우 인상을 받았으며, 2021년에 중단되어 더 이상 유지되지 않는 것이 아쉬움.
"
"https://news.hada.io/topic?id=12393","관계형 데이터에서 이벤트로의 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           관계형 데이터에서 이벤트로의 전환

관계형 데이터에서 이벤트로의 전환 안내서

     * 이벤트 소싱 교회에서는 비즈니스 데이터를 잃지 않고 이벤트로 보존함.
     * 이벤트는 발생한 사실들을 나타내며, 각 작업 후에 저장됨.
     * 이벤트 스트림은 기록된 모든 이벤트의 목록으로, 불변성을 가지며 과거의 실수를 새로운 이벤트를 추가하여 수정할 수 있음.

1. 상태 컬럼 찾기

     * 상태 컬럼의 값은 데이터의 생명주기 단계를 반영할 수 있음.
     * 예를 들어, 주문이 시작될 수 있고, 배송될 수 있으며, 결제될 수 있음.
     * 이러한 상태는 Order Initiated, Order Shipped, Order Paid 같은 이벤트로 전환될 수 있음.

2. 날짜 컬럼 확인

     * 날짜 컬럼은 프로세스의 중요한 사건들에 대한 정보를 제공할 수 있음.
     * ShipmentDate, DeliveryDate, OrderPlacementDate 등은 비즈니스 용어를 알려주고 새로운 이벤트를 도입하는 데 도움이 될 수 있음.

3. 컬럼 선택성 분석

     * Nullable 컬럼은 나중에 제공되거나 선택적일 수 있음.
     * 필수 컬럼은 첫 Order Initiated 이벤트에서 제공되어야 함.

4. 1 대 다 관계가 가장 많은 테이블 검색

     * 이벤트 소싱에서는 비즈니스 프로세스를 중심으로 데이터를 그룹화하여 효율적인 처리를 추구함.
     * 1 대 다 관계가 많은 테이블은 스트림 유형의 후보가 될 수 있음.

5. 명시적인 이벤트 도입

     * 관계형 데이터를 이벤트로 마이그레이션할 때, 새로 발견한 이벤트를 임포트 중에 재사용하지 말고, Order Imported 이벤트를 명시적으로 제공해야 함.

6. 실험 및 검증

     * 안전한 환경에서 프로토타입을 시도하고, 결과를 예상과 비교하며, 서두르지 않고 반복해야 함.

   GN⁺의 의견
     * 이 글에서 가장 중요한 것은 관계형 데이터베이스에서 이벤트 소싱으로 전환하는 과정에서 비즈니스 데이터를 보존하는 새로운 접근 방식의 중요성임.
     * 이 글이 흥미로운 이유는 기존의 데이터 관리 방식에서 벗어나 데이터의 생명주기를 더 잘 이해하고 활용할 수 있는 방법을 제시하기 때문임.
     * 이벤트 소싱은 기술적인 관점 뿐만 아니라 비즈니스와 기술 팀 간의 공통된 이해를 구축하는 데 도움이 될 수 있음.

        Hacker News 의견

     * PostgreSQL 및 FOSS 리포팅 도구 사용 권장
          + 애플리케이션에서 PostgreSQL을 이미 사용 중이라면, 이벤트 데이터를 PostgreSQL에 저장하고 FOSS 리포팅 도구(Apache Superset, Metabase 등)를 사용할 것을 권장함.
          + 데이터가 약 2TB에 도달할 때까지 PostgreSQL을 사용하고, 그 이후에는 온라인으로 2TB의 데이터가 필요한지, 아니면 일별/시간별 요약만 필요한지 결정함.
          + 한 클라이언트 사례에서는 10TB 이상의 데이터와 초당 1500개의 이벤트를 처리하고 있으며, 상세 데이터는 2일간 온라인에 유지하고 나머지는 요약하여 S3로 이동시켜 Athena SQL을 통해 쿼리할 수 있음.
          + AWS RDS 멀티-AZ를 사용하여 자동 장애 전환을 지원하고, 한 명의 엔지니어가 월 5시간 미만으로 모든 것을 유지 관리함.
          + PostgreSQL은 데이터를 한 곳에 보관하고, 배우고, 관리하며, 확장할 수 있는 단일 시스템을 제공함.
          + 비테크니컬 인력도 Metabase나 Preset과 같은 시스템에서 쉽게 차트를 만들 수 있음.
          + PostgreSQL은 매년 발전하고 있으며, 필요한 경우 PostgreSQL과 호환되는 시스템(Aurora, TimescaleDB, CitusDB 등)을 통해 추가적인 확장이 가능함.
     * 이벤트 주도 아키텍처의 적절한 사용 시기
          + 고객이 특정 행동을 하고 응답을 기대하는 경우는 이벤트 주도가 아닌 요청/응답 패턴임.
          + 이벤트 주도는 예상치 못한 상황에서 발생하는 경우를 의미함. 예를 들어, GitHub에 코드를 푸시하면 빌드가 트리거되는 것과 같은 상황임.
     * 이벤트 소싱에 대한 회의적인 경험 공유
          + 한 팀이 이벤트 소싱을 고려했으나, 명확한 이점이 보이지 않고 새로운 것을 시도하는 위험성 때문에 결국 사용하지 않기로 결정함.
          + 학습 기회를 놓친 것에 대한 후회는 없으며, 필요하지 않은 상황에서 복잡한 문제에 뛰어들지 않음을 긍정적으로 평가함.
     * 도메인 이벤트 모델링의 유용성
          + 도메인 이벤트 모델링은 문제를 해결하려는 도메인 전문가들과 소통하는 데 유용함.
          + 오랜 기간의 상태 머신에 대한 감사 추적을 제공하는 시스템을 구현할 때는 Temporal.io/durable functions와 같은 도구를 사용하는 것이 더 나음.
          + 이러한 도구는 내부적으로 이벤트 소싱을 사용하며, 중복 제거 및 멱등성을 고려하여 코드를 작성하도록 강제함.
     * 이벤트 소싱의 구현에 대한 질문
          + 이벤트 스트림에서 현재 상태를 효율적으로 재구성하는 방법과 데이터베이스에서 이벤트 스트림을 모델링하는 방법에 대한 설명이 부족함.
     * 상향식 대 하향식, 맞춤형 대 범용
          + 하향식 접근법은 비즈니스 도메인에서 시작하여 사용 가능한 기술, 도구, 벤더에 맞게 구현을 매핑함.
          + 상향식 접근법은 사용 가능한 기술, 도구, 벤더에서 시작하여 작동하는 솔루션을 조합함.
          + 맞춤형 접근법은 DDD, CQRS/ES, Sagas, TBUI, GraphQL, 대수적 데이터 타입 등을 포함함.
          + 범용 접근법은 RDBMS, CRUD, REST, ACID 트랜잭션, CDC, 범용 관리 UI, 노코드/로우코드, 제한된/범용 타입 등을 포함함.
     * 이벤트 기반 아키텍처에 대한 지지와 비판
          + 이벤트 기반 아키텍처에 대한 지지는 있으나, 해당 아티클이 주장을 명확히 전달하는 데 실패함.
          + 데이터 관계와 비즈니스 행동 사이의 차이점에 초점을 맞추면, 운영 관계형 데이터 저장소에서 벗어나는 것이 더 명확해짐.
     * 이벤트 소싱과 관계성의 필요성
          + 이벤트 소싱의 많은 장점에도 불구하고, 여전히 관계성이 필요함.
          + 관계성이 애플리케이션 계층 코드에 모두 암시되어 있다면, 이는 받아들일 수 없음.
          + 관계성을 쿼리하거나 관계 뷰를 최신 상태로 유지하는 방법이 필요함.
     * 관계형 데이터의 지지
          + 복잡성을 피하고 전통적인 관계형 데이터에 충실하기로 결정함.
     * 이벤트 주도 설계에 대한 새로운 인식
          + 최근에 이벤트 주도 설계를 알게 되었으며, AI가 지배하는 세계에서 최적의 데이터 구조를 고려하던 중 비슷한 결론에 도달함.
          + 이벤트 주도 설계가 복잡성을 관리하고 데이터를 실제로 활용할 수 있다면 가치가 있을 것이라고 생각함.
          + 향후 몇 년 동안 AI가 모든 비즈니스 이벤트에 대한 지식을 가지고 쿼리할 수 있게 되면서 이벤트 주도 설계가 보편화될 것으로 예상함.
"
"https://news.hada.io/topic?id=12426","Go 1.22 Release Candidate 릴리스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Go 1.22 Release Candidate 릴리스

     * PGO ( Profile-guided optimization ) 개선
     * devirtualization을 더 많은 경우에 적용.
     * 새로운 PGO 적용 시 성능 2~14% 개선.
     * 실험적인 새로운 inliner 추가.
     * GOEXPERIMENT=newinliner로 활성화 가능.
     * 이제 runtime, math/rand/v2, 시드가 없는 math/rand에서 기본 RNG로 암호학적으로 강력하고 빠른 ChaCha8을 사용합니다.
     * 최초의 std v2 패키지 math/rand/v2 추가
     * For range 구문에서 정수 지원.
     * 실험적인 Rangefunc 지원 추가, GOEXPERIMENT=rangefunc로 활성화 가능.
     * net/http.ServeMux 에서의 URL 향상된 라우팅 패턴 지원 추가.
     * 이제 io.Copy는 사용할 수 있는 경우 splice(2), sendfile(2)를 사용합니다.
     * Allocation Header 도입으로 인한 CPU 성능 개선 1~3%, 메모리 오버헤드 감소 ~1%.
     * 새로운 Trace Web UI 탑재, thread-oriented view로 변경.
"
"https://news.hada.io/topic?id=12401","삶을 바라보는 태도 - 인생을 게임처럼 살아보기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       삶을 바라보는 태도 - 인생을 게임처럼 살아보기

     * 삶을 어떻게 바라볼까에 대한 기준이 있으신가요?
     * 저는 유년 시절 다크세이버, 바람의 나라라는 게임을 매우 즐겼는데, 언제부턴가 인생을 바라볼 때 게임처럼 생각하는 습관이 생겼어요
     * 부트캠프에서 자주 나오는 질문들 중 제가 생각하는 인생을 바라보는 태도를 알려드리면, 해결되는 경우가 있었어요. 그래서 글을 공유해보아요

   인생을 게임으로 생각하기
     * 턴 : 하루 24시간의 시간 제약이 존재
     * 레벨 : 개인의 역량, 신체적 능력, 지식
     * 사냥터 : 직장, 학교에서 진행하는 업무, 프로젝트, 기회
     * 퀘스트, 보상 : 외재적 보상, 내재적 보상. 확정적으로 보이지 않을 수 있음
     * 포션 : 건강 관리, 휴식 등 회복 방법
     * 파티, 문파(길드) : 동료, 친구, 커뮤니티
     * 이벤트 : 산업적인 큰 변화, 새로운 기술 등장
     * 전직 : 경력 변경, 새로운 직업의 이동

   각각을 게임 관점, 인생 관점으로 생각하며 게임에서 어떻게 하지? 그럼 인생에선 어떻게 해볼까?를 떠올립니다. 100% 맞는 관점이 아니긴 하지만 잘 활용하면 좋은 부분이 존재해요.

   이 내용을 바탕으로 인생을 게임으로 적용해요. 아래 내용은 고민(User Story처럼)을 게임에 적용한 내용이에요
    1. 회사에서 하는 프로젝트 = 사냥터

     * 어떤 일이든 나에게 경험치로 남을 수 있음. 단 인생에선 +5, +10처럼 눈으로 보이진 낳음
     * 나의 실력과 작업 난이도와 적절한 수준으로 선택하는 것이 필요함

    2. 회사가 싫증이 나요. 퇴사하고 싶어요

     * 이런 경우엔 회사를 사냥터로 생각하고, 그 회사에서 얻을 수 있는 것을 모두 얻었는지 생각해봄
     * 퀘스트 관점에서 다람쥐 200마리를 사냥할 경우 보너스가 있을 수도 있고, 사냥터 구석에 숨겨진 보물이 있을 수 있음
     * 히든 퀘스트가 있지 않을까? 정말 다 경험했을까?라고 생각해보기

    3. 저는 다른 사람들에 비해 못해서 힘들어요

     * 이런 경우엔 이분들이 나보다 레벨이 높은 것을 인정하고, 그 사람의 과거에 어떻게 레벨업을 했는지 물어봄
     * 누구나 레벨 1인 시절이 있기에, 그 시절에 어떤 경험을 했는지 물어보면 내 상황에 적용할 수 있음
     * 데이터 분석 관점에선 코호트로 볼 수 있음
     * 만약 잘하는 사람이 근처에 있다면 큰 복. 그 사람에게 물어보고 같이 프로젝트를 해보자고 말하기. 쩔 받아서 레벨업하는 것도 능력

    4. 요즘은 그냥 다 지루해요

     * 지금은 전직하기 전이라서 내가 경험치가 많이 필요하구나. 이 시기를 잘 이겨내보자!라고 생각하곤 함
     * 레벨이 낮은 경우엔 레벨업이 빠르지만, 레벨이 높아질수록 레벨업이 느려질 수 있음

    5. 보상 만들기

     * 게임에선 명시적 보상이 존재하나 인생에선 명시적 보상이 보이지 않을 수 있음. 그런 경우 내가 보상을 만들어줘도 좋음
     * 여행은 확정적인 보상으로 여행을 가기 위한 비행기를 예매하는 것부터 기분이 좋아짐. 어떻게 되어도 여행을 갈 예정이니
     * 스스로 하고 싶은 것을 설정하고 그것을 하는 것이 곧 보상

    6. 길이 안보여요

     * 게임에서 공략이 있음. 공략은 다른 사람이 했던 길을 의미하는데, 현실에선 공략을 그대로 적용한다고 해서 되기도 하지만 안되는 경우도 있음
     * 빠르게 성장하는 사람은 다른 사람의 영감을 듣고 간접적으로 성장하는 사람

    7. 잘 안되면 어쩌죠?

     * 특정 사냥터에서 죽는다면 어떻게 하는가? 슬퍼서 눈물을 흘리나?
     * 그냥 다시 HP 채우고 포션 챙겨서 그냥 또 하는 것
     * 어떤 일이 잘 안되어도 괜찮다. 그게 인생이 끝나는 것은 아니다. 조금 더 편하게, 그저 잘 안되었다면 어떻게 해야 더 잘하게 될지 생각해보는 것이 핵심
     * 어떻게 대처하는지가 더 중요함

   본문에 좀 더 자세한 내용이 있으니 읽어보셔도 좋을 것 같아요 :)

   여러분이 인생을 바라보는 태도는 어떤 관점일지 궁금하네요

   결혼과 출산은 신맵입니다... 가보지 않으면 절대 해금할 수 없어요.

   결혼 출산 선배님이 말씀해주시니 더 와닿네요. 신맵.. 전직(?) 퀘스트(??) 느낌이고 몰랐던 히든 역량이 발현되나봐요..! 파이팅입니다..!

   살면서 경험하지 못한 새로운 컨텐츠가 넘쳐나고 있는지도 몰랐던 스탯을 알게됩니다.

   역시 인프런 1등 감사님 :) 좋은글 잘보고 있습니다

   앗..! 1등이라니 아닙니다..! 좋은 글 봐주셔서 감사합니다!

   좋은 마인드네요. 제가 배워둘 점이 많이 보입니다.

   좋은 마인드라고 해주셔서 너무 감사합니다! 공유하길 잘했다란 생각이 들며 동기부여가 되어요!

   명시적이지 않은 보상에 덤빌 수 있는 힘이 진짜 중요한 것 같아요. 마시멜로 이야기 처럼. 게임의 경우에는 명시적이고 즉각적인 보상이 바로바로 피드백되니까 중독성이 생기는데

   인생에선 명시적이지 않은 보상이지만 그것을 그래도 해보는 것..! 그게 정말 큰 가치인 것 같아요

   저도 살면서 만나는 난관들을 게임 속 퀘스트와 같은 것으로 여기곤 하는데, 이렇게 다양하게 깔끔하게 정돈된 글을 만나니 반갑고도 존경스럽니다. :-)

   깔끔하게 정돈된 글이라고 해주셔서 너무 감사합니다! 이렇게 생각을 한번 정리해두면 좋아서 해보았어요 :)

   망겜!

   인생을 게이미피케이션한, habitica 라는 유사한 앱이 있죠 ㅎㅎ

   https://habitica.com/static/home

   오 habitica가 진짜 인생을 게임으로 만든 앱이네요!! 소개 감사합니다!

   잼네요 ㅋㅋ

   재미있게 봐주셔서 감사합니당 :)

   오 재밌습니다 약간 저랑 비슷하신 것 같아요 ! 저는 이렇게 구체적이진 않지만, 인생을 레벨업하는 사냥터라구 생각해요!

   저도 처음엔 인생이 사냥터라고 생각했는데 개념을 좀 더 디테일하게 잡으니까 이렇게 되었네요! 이런 마인드로 하나씩 레벨업하는! 그리고 게임의 레벨 상한은 있지만 인생 레벨의 상한은 없는 것 같은!

   와 너무 좋은 글 감사합니다

   너무 좋은 글이라 해주셔서 감사합니다! 이 글이 도움이 될 분들에게 공유해보셔도 좋을 것 같아요 :)

   어렸을적 호기심에 가득차서 게임했던 시절을 떠올리면서 적용하니 흥미진진하네요.

   저도 어린 시절에 했던 게임이랑 대입해보니까 흥미진진해서 그 관점을 글로 정리해봤어요 :)

   감사합니다!

   댓글 감사합니다!! :)

   독특한 관점이네요. 퀘스트 정도는 생각해본 적 있는데 이정도로 비유해 본 적은 없는 거 같아요.

   게임에서 턴을 타이트하게 사용하는 성향인데, 시간을 턴으로 비유하니 반성하게 되네요 ㅋㅋ 중요성이 생각보다 크게 와 닿았습니다.

   내가 만드는 보상은 몰입이 안되더라구요. 노하우가 있을까요?

   게임속 게임은 뭘까, 퀘스트는 일 같아서 싫은데 업적은 하게 되던데, 비유하면 무엇일지.. 생각하며 재밌게 읽었습니다.

   안녕하세요! 턴에 대해 크게 와닿았다니 다행이네요!
   보상 같은 경우는 제가 좋아하는 것들을 잘 알면 줄 수 있는 것 같아요. 저는 이 글을 작성할 때 저를 위한 보상으로 위스키 한잔을 설정했고(2시간 타임어택) 그 시간 안에 작성해서 위스키를 한잔 마실 수 있게 되었어요..!
   내가 좋아하는 것을 적절하게 배치하는 것이 핵심이 아닐까 싶어요. edunga1님이 어떤 것을 좋아하시는지에 따라 또 다를 수 있을 것 같네요..!

   인생 == 게임이라는 비유는 상당히 적절하네요. 꼭 IT에 있는분들 뿐만 아니라 전역적으로 적용할 비유가 많아서 도움될거 같습니다.

   감사합니다!

   인생 전역적으로 적용할 비유라고 해주셔서 감사합니다!!! :)

   제가 곧 부트캠프에서 수 많은 분들에게 멘토링을 해야할 기회가 생겼는데, 수강생분들에게 동기부여를 어떻게 할 지 고민중이었어요. 말씀주신 비유를 적절히 활용하면 도움이 될 것 같네요 :)

   고맙습니다!

   멘토링할 때 활용하기에도 참 좋은 개념이더라구요! 잘 활용해보셔요!
"
"https://news.hada.io/topic?id=12378","가장 작은 USB-C MIDI 신스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          가장 작은 USB-C MIDI 신스

가장 작은 USB-C MIDI 신디사이저

     * ""가장 작고 나쁜"" MIDI 신디사이저 시리즈의 새로운 작품으로, CH32V003라는 32비트 RISC-V 마이크로컨트롤러를 사용함.
     * 하드웨어 USB가 없음에도 불구하고 프로세서가 48MHz로 클록되어 있어, 소프트웨어 USB 스택을 작성하는 것이 매력적인 아이디어로 떠올랐음.
     * 이미 CNLohr가 소프트웨어 USB 스택을 작성한 것을 발견하고 놀랐으며, 이로 인해 칩이 더 유용하고 인상적이 됨.

USB MIDI 데모

     * USB-MIDI 데모는 완성되지 않았으나, 개발 보드를 납땜하여 시도해봄.
     * TSOP20 브레이크아웃과 마이크로-USB 브레이크아웃을 슈퍼글루로 붙인 후, 전압 조정기, 커패시터, 저항 등을 추가하여 회로를 완성함.
     * 버튼을 누르면 음표를 연주하는 USB-MIDI 장치를 구성하고, MIDI 데이터가 도착하면 칩이 사각파를 생성함.

USB 개발 보드

     * CH32V003용 몇 가지 개발 보드가 있지만, 하드웨어 USB가 없기 때문에 USB 핀을 연결하지 않음.
     * 반복적인 납땜을 피하기 위해 가능한 한 작게 만든 간단한 개발 보드를 설계함.
     * 모든 필요한 핀이 라벨링되어 있고, USB 데이터 라인을 위해 저항을 추가할 수 있는 옵션을 제공함.

USB, 모든 USB

     * 부품이 저렴하고 지원하는 구성 요소가 적어서, USB ATtiny 프로젝트를 재창조하는 것이 재미있을 것 같음.
     * CH32V003은 핀이 충분하지 않아서 키보드와 USB를 동시에 읽을 수 없으나, 두 개의 칩을 사용하여 하나는 키보드의 절반을, 다른 하나는 나머지와 USB를 읽는 것이 가능함.

라우팅

     * 수직 마운트 USB-C 플러그를 사용하여 가능한 한 작은 회로 기판을 만들고자 함.
     * USB-C 플러그의 지지 핀과 충돌하지 않도록 피에조 부저 핀의 간격을 넓힘.
     * USB 3 핀을 연결할 필요는 없지만, CC1과 CC2를 연결해야 하며, 필요한 모든 트랙을 배치하는 것이 가능함.

패널화

     * 패널을 직접 제작하기로 결정함.
     * 패널에는 명시적인 대칭이 있어서, 한쪽을 솔더링한 후 보드를 뒤집어 다른 쪽을 솔더링할 수 있음.
     * 패널을 직접 제작함으로써 USB-C 플러그 주변에 타이트한 핏을 제공하는 구멍을 만들어 조립 시 기본적인 그립을 제공함.

조립

     * 가장 낮은 허용 오차로 보드를 제작하면 제조업체가 가격을 보조함.
     * USB 커넥터를 마지막에 솔더링하고, 나머지 부품은 히트건으로 솔더링함.
     * 패널에서 조심스럽게 보드를 분리하고, 버저 핀을 적절한 길이로 자르고 솔더링함.

GN⁺의 의견

     * 이 프로젝트는 하드웨어와 소프트웨어의 창의적인 결합을 보여줌. 저렴한 마이크로컨트롤러를 사용하여 USB-MIDI 신디사이저를 만드는 아이디어는 DIY 하드웨어 커뮤니티에 영감을 줄 수 있음.
     * 소프트웨어 USB 스택의 구현은 프로그래밍과 하드웨어 설계에 대한 깊은 이해를 필요로 하며, 이는 초급 소프트웨어 엔지니어에게도 학습 기회를 제공함.
     * 이 글은 기술적인 도전을 즐기고, 자신만의 독특한 프로젝트를 만들고자 하는 사람들에게 흥미로울 것임.

        Hacker News 의견

     * 이 사람이 이런 종류의 작업으로 생계를 유지하는지 궁금하다. 그의 결과물은 항상 고급스럽고 독특함.
          + 회사 업무에 쫓겨 Jira에 충분한 작업을 기록하고 매주 충분한 스프린트 포인트를 쌓는 것에 대한 걱정이 많음.
          + 자유롭게 원하는 것을 원하는 때에, 원하는 속도로, 열정 프로젝트에 시간과 노력, 자원을 투자하는 것을 상상하기 어려움.
          + 재료비는 크지 않아 보이지만, 실제로 투자하는 시간은 얼마나 될까? 일과 후 몇 시간씩, 몇 년 동안?
     * 그의 입체적인 촛불 작품이 놀랍다고 함. 링크
     * 각 포트가 10기가로 라벨링된 허브에 이것들을 연결하는 것이 유머러스하다고 함.
     * 손가락 끝의 패드를 매크로 줌으로 찍은 것이 너무 세밀해서, 이 비디오가 지문 보안 침해가 될 수도 있다고 함. 집 열쇠가 들어간 사진을 실수로 공유하는 것보다 더 나쁠 수 있음.
     * 건설 보고서는 매우 상세하지만, 짧은 사운드 데모만 제공함. 사실상 사각파만을 생성하기 때문에, 실제 합성, 변조, 필터가 없어 신디사이저로 인정하기 어려움. USB-MIDI가 있는 인사말 카드 소리 칩으로 더 적절하게 불릴 수 있음.
     * 고해상도로 지문을 볼 수 있는 사진이 조금 걱정됨.
     * USB-C가 가진 특정 방향에서만 작동하는 것은 매우 실망스럽고, USB-C가 의도한 것과 정반대임. Nokia 2780 Flip은 USB-C 충전 포트를 가지고 있지만, 상자에는 Micro-USB라고 적혀 있고, 한 방향에서만 작동함.
     * 재미있지만, 실제로 사각파 이상을 재생할 수 있는 신디사이저가 아님.
     * SMT 커넥터를 양면 리플로우 중에 고정하기 위해 빨간색 열경화성 칩 접착제 사용을 추천함.
     * 아름다운 데모로, 8비트 마이크로컴퓨터 시대의 소리를 떠올리게 함.
"
"https://news.hada.io/topic?id=12424","PostgREST: Htmx를 이용한 HTML 콘텐츠 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PostgREST: Htmx를 이용한 HTML 콘텐츠 제공

HTML 콘텐츠 제공 방법

     * PostgREST와 htmx 라이브러리를 사용하여 HTML 콘텐츠를 반환하고 AJAX 요청을 처리하는 방법 소개.
     * htmx는 HTML 응답을 기대하며, 이를 사용하여 DOM 내의 요소를 대체함.

준비 설정

     * 튜토리얼 0을 기반으로 한 할 일(to-do) 앱 제작.
     * 인증 없이 진행하며, web_anon 사용자에게 todos 테이블에 대한 모든 권한 부여.
     * text/html을 미디어 타입 핸들러로 추가하여 PostgREST가 웹 브라우저의 요청을 HTML 문서로 인식하도록 설정.

HTML 응답 생성

     * Tailwind CSS를 사용하여 기본 HTML 파일을 반환하는 함수 생성.
     * 웹 브라우저는 http://localhost:3000/rpc/index에서 웹 페이지를 열 수 있음.

할 일 나열 및 생성

     * 데이터베이스에 이미 입력된 할 일 목록을 표시하는 함수 생성.
     * 할 일 목록 템플릿을 구축하는 데 사용되며, PostgREST 엔드포인트로 사용되지 않음.
     * 할 일을 데이터베이스에 등록하는 엔드포인트 추가 및 /rpc/index 페이지 수정.

할 일 편집 및 삭제

     * api.html_todo 함수를 수정하여 더 기능적으로 만듦.
     * 새로운 htmx 기능 추가: 할 일 상태 변경, 할 일 편집 가능한 HTML 반환, 할 일 삭제.
     * 할 일을 편집하고 데이터베이스에서 할 일을 수정 및 삭제하는 엔드포인트 추가.

GN⁺의 의견

     * 이 글은 웹 개발자들에게 흥미로울 수 있음. PostgREST와 htmx 라이브러리를 사용하여 웹 애플리케이션에서 동적인 HTML 콘텐츠를 제공하는 방법을 설명하기 때문.
     * AJAX를 활용한 비동기 웹 페이지 업데이트는 현대 웹 개발의 중요한 부분이며, 이 글은 그러한 기능을 구현하는 구체적인 예시를 제공함.
     * 사용자 인터페이스를 개선하고 서버와 클라이언트 간의 통신을 최적화하는 방법을 배울 수 있는 좋은 자료임.

        Hacker News 의견

     * PostgREST에 대한 해커뉴스 댓글 요약:
          + PostgREST의 오픈소스 프로젝트에 대한 애정: 한 사용자는 PostgREST를 자신이 가장 좋아하는 오픈소스 프로젝트 중 하나로 꼽으며, Supabase의 성공이 PostgREST와 Postgres의 훌륭한 설계 덕분이라고 언급함. 이 사용자는 Supabase가 PostgREST 프로젝트에 얼마나 많은 후원을 하는지 모르지만, 많은 기업들이 이를 사용하고 있음에도 불구하고 후원자가 12명뿐이라는 사실에 대해 아쉬움을 표현함.
          + PostgREST 앱 개발의 어려움: 다른 사용자는 PostgREST를 사용한 앱 개발 경험이 좋지 않았다고 언급하며, 간단해 보이는 프레임워크도 요구사항이 복잡해지면 문제가 생긴다고 지적함. 이 경우, 개발자들이 원하는 결과를 얻기 위해 데이터베이스에 많은 저장 프로시저를 작성해야 했고, 이로 인해 확장성 문제가 발생했다고 함.
          + 유지보수의 어려움: 또 다른 사용자는 PostgREST가 개념 증명으로서는 멋지지만, 실제로 복잡한 웹 애플리케이션을 유지보수하는 것은 악몽 같을 것이라고 의견을 제시함.
          + 단순한 웹 개발 스택의 매력: 한 사용자는 HTML과 데이터베이스만으로 구성된 웹 개발 스택이 매력적이라고 평가하며, 백엔드나 프론트엔드가 필요 없다는 점을 긍정적으로 평가함.
          + 새로운/현대적 애플리케이션에서의 코딩 패턴: Couchdb와 같은 JSON 문서 데이터베이스의 예를 들며, 클라이언트가 직접 데이터베이스에 접근하여 HTML이나 JSON을 받을 수 있는 방식에 대해 설명함. 그러나 이러한 방식이 유지보수에 어려움을 주어 개발이 중단되었다고 언급함.
          + Haskell 관점에서 본 PostgREST의 독창성: 한 사용자는 Haskell 관점에서 보면 PostgREST가 명백한 프로젝트이며, 그것이 바로 이 프로젝트의 천재성이라고 평가함.
          + SmoothDB의 소개: 한 개발자는 PostgREST와 호환을 목표로 하는 SmoothDB라는 새로운 프로젝트를 GitHub에 공개했다고 소개하며, 아직은 베타 버전이라고 언급함. SmoothDB는 Go로 작성되었으며, 독립 실행형 또는 복잡한 서버 애플리케이션의 모듈로 사용될 수 있음.
          + PostgREST를 사용한 데이터 검증 파이프라인에 대한 기사: 한 사용자는 PostgREST를 사용하여 일반적인 데이터 검증 파이프라인으로 사용하는 방법에 대한 기사를 작성했다고 언급하며, CQRS/REST API 레이어로 사용하는 방법에 대한 다음 기사를 준비 중이라고 함.
          + PostgREST와 HTMX의 결합: 한 사용자는 이전 프로젝트에서 PostgREST를 사용했으며, HTMX와 잘 어울린다고 평가함. 그러나 SQL 함수 내부에 HTMX 템플릿을 유지보수하는 것에 대한 우려를 표현함.
          + 유지보수 가능한 스택으로 발전시키기 위한 추가 도구: 한 사용자는 이 개념을 중대형 애플리케이션에 좋은 UX를 제공하는 유지보수 가능한 스택으로 발전시키기 위해 필요한 추가 도구에 대한 의견을 물음.
"
"https://news.hada.io/topic?id=12460","Ask GN: 근처 사람들은 잘 안 쓰는데, 유용하게 쓰고 계신 유틸리티가 있으신가요? (2023)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Ask GN: 근처 사람들은 잘 안 쓰는데, 유용하게 쓰고 계신 유틸리티가 있으신가요? (2023)

   근처 사람들은 잘 안 쓰는데, 유용하게 쓰고 계신 유틸리티가 있으신가요? (2022)

   올해도 다시 여쭤봅니다. 각자 유용하게 쓰고 계신 유틸리티를 추천해볼까요?
     * WinSetView (https://lesferch.github.io/WinSetView/) Windows 11 탐색기 default view를 수정할 때 써봤습니다. 가볍게 쓰기 좋아요.
     * whisper-standalone-win (https://github.com/Purfview/whisper-standalone-win) whisper를 별다른 의존성 없이 터미널에서 쓰려다 찾았습니다. medium, large 모델 다 받아도 용량이 5gb 남짓이고 초벌 자막 작성에 유용합니다.

   저는 WindowGrid를 자주 사용합니다.
   윈도우에서 각 창의 크기와 위치를 격자에 맞춰 쉽게 설정할 수 있는 유틸리티입니다.
   저는 12×4 격자로 설정하여 쓰고 있습니다.

   요즘 윈도우에서 대부분의 스크린샷은 내장 캡쳐 도구를 쓰지만, ShareX의 완성도가 좋아서 항상 설치해둬요.

   캡쳐 후 자동 클라우드 업로드, qr코드 스캔, OCR 같은 기능이 내장이라 자주 사용해요.
     * Stats: 맥 메뉴바에 시스템 정보를 보여주는 앱
          + 저는 CPU 사용량, RAM 사용량, 현재 네트워크 속도, SSD 용량, CPU 온도를 띄워놓고 씁니다.
          + 가용 시스템 리소스를 파악하기에 좋고, 특히 네트워크 속도를 항시 확인할 수 있어서 좋습니다.
     * HiddenBar: 맥 메뉴바에서 자주 사용하지 않는 아이콘을 숨깁니다.
          + Bartender를 매번 구매하기 싫어서 쓰고 있습니다. 딱 적당히 필요한 기능만 있습니다.
          + 원본 프로젝트는 더 이상 업데이트가 되지 않아, 포크 버전을 사용하고 있습니다.
     * Shottr: 맥 스크린샷 툴
          + 맥 기본 스크린샷에 없는 기능들이 많아서 쓰고 있습니다.
          + 특히 스크린샷에 UI 간격 등을 바로 측정해서 메모할 수 있는 기능이 아주 좋습니다.
     * Powertoy의 FancyZone: Windows 창 위치 관리 툴
          + 미리 정의한 크기와 위치로 창을 빠르게 이동할 수 있습니다.
          + 이거 없으면 Windows에서 작업할 때 너무 불편합니다.
     * PowerToys Run: Windows용 빠른 명령 실행기
          + 맥의 Spotlight, Alfred, Raycast 등과 비슷한 기능을 합니다.
     * PEKORA: srt 자막을 프리미어 프로에서 사용할 수 있는 형식으로 변환해주는 사이트
          + 제가 직접 사용하지는 않지만, 편집하는 지인을 위해 만든 서비스입니다. Whisper로 자막 작업하신다길래 같이 적어둡니다.

   맥용 유틸리티 입니다.
     * TextSniper : 화면에 어떤 것이든 OCR 해줍니다. 한글도 잘 인식합니다. 단축키 ""⇧⌘2"". $7.99인데 얼마전에 잠깐 무료로 풀렸었네요.
     * Rectangle : 키보드 단축키로 창 이동 및 크기 조절해주는 유틸리티입니다. 무료
     * Stay : 각 화면별 창의 위치를 기억했다가 그대로 세팅해줍니다. $15
     * Lunar : 외장 모니터 밝기 및 볼륨 조절용 유틸리티입니다. 유료인데 무료버전으로도 쓸만합니다.

   윈도우용 유틸리티 입니다.
     * BatchNamer : 한국분이 만드신 유틸로 여러개의 파일명을 일괄로 변환해줍니다. 정말 옵션이 다양하고 변환될 이름 미리 보기가 가능해서 유용합니다.
     * Everything : 긱뉴스에서도 한번 소개했었던 윈도우용 빠른 파일 검색 도구 입니다.

   크로스 플랫폼
     * Briss 2.0 : PDF 를 크롭해주는 도구 입니다. A3를 A4로 분할하거나 할때 자주 씁니다.
"
"https://news.hada.io/topic?id=12369","안드로이드, 리눅스, macOS, iOS에서의 블루투스 키스트로크 인젝션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                안드로이드, 리눅스, macOS, iOS에서의 블루투스 키스트로크 인젝션

블루투스 인증 우회 취약점

     * 여러 블루투스 스택에 사용자 확인 없이 연결하고 키 입력을 주입할 수 있는 인증 우회 취약점 존재.
     * 공격자는 인증되지 않은 블루투스를 통해 취약한 장치에 연결하여 앱 설치, 임의 명령 실행, 메시지 전달 등의 키 입력 주입 가능.
     * 공격에 특별한 하드웨어 필요 없으며, 일반 블루투스 어댑터를 사용하는 리눅스 컴퓨터에서 수행 가능. 자세한 취약점 정보와 증명 스크립트는 추후 컨퍼런스에서 공개 예정.

안드로이드

     * 다음 안드로이드 기기에서 취약점 발견: Pixel 7(Android 14), Pixel 6(Android 13), Pixel 4a(5G)(Android 13), Pixel 2(Android 11), Pixel 2(Android 10), Nexus 5(Android 6.0.1), BLU DASH 3.5(Android 4.2.2).
     * 2023-12-05 보안 패치로 안드로이드 11-14에서 취약점 완화, 안드로이드 4.2.2-10에 대한 수정 사항 없음.
     * 공개 일정: 2023-08-05 구글에 보고, 2023-12-06 공개.

리눅스/BlueZ

     * 다음 우분투 버전에서 취약점 발견: Ubuntu 18.04, 20.04, 22.04, 23.10.
     * 구글에 따르면 ChromeOS는 취약하지 않음. ChromeOS는 테스트하지 않았지만, BlueZ 구성이 취약점을 완화하는 것으로 보임.
     * 다음 패치로 BlueZ에서 취약점 완화: https://git.kernel.org/pub/scm/…
     * 공개 일정: 2023-08-10 Canonical에 보고, 2023-09-25 Bluetooth SIG에 보고, 2023-10-02 CERT/CC에 사례 개설, 2023-12-06 공개.

맥OS

     * 다음 기기에서 취약점 발견: 2022 MacBook Pro(MacOS 13.3.3, M2), 2017 MacBook Air(macOS 12.6.7, Intel).
     * Lockdown Mode가 공격을 방지하지 않음.
     * 공개 일정: 2023-08-01 애플에 보고, 2023-12-06 공개.

iOS

     * 다음 기기에서 취약점 발견: iPhone SE(iOS 16.6).
     * Lockdown Mode가 공격을 방지하지 않음.
     * 공개 일정: 2023-08-04 애플에 보고, 2023-12-06 공개.

제조사 성명

     * Google: 안드로이드 11부터 14에 영향을 미치는 이슈에 대한 수정 사항이 영향을 받는 OEM에게 제공됨. 모든 현재 지원되는 Pixel 기기는 12월 OTA 업데이트를 통해 이 수정 사항을 받게 될 것임.

  GN⁺의 의견

     * 이 연구는 블루투스 기기의 보안에 대한 일반적인 가정을 뒤집는 중요한 발견을 포함하고 있음. 블루투스가 안전하다고 여겨졌지만, 실제로는 키 입력 주입과 같은 취약점이 존재함을 보여줌.
     * 다양한 플랫폼(Android, Linux, macOS, iOS)에서 발견된 취약점은 사용자들에게 널리 퍼져 있는 기술의 잠재적 위험성을 상기시키며, 보안 연구의 중요성을 강조함.
     * 이 글은 소프트웨어 및 하드웨어 개발자들에게 보안을 설계 초기 단계부터 고려해야 하는 이유를 제공하며, 보안 연구 커뮤니티와의 협력을 장려하는 흥미로운 사례임.

        Hacker News 의견

     * 안드로이드 및 리눅스 사용자를 위한 보안 조치 안내
          + 안드로이드 사용자는 사용하지 않을 때 블루투스를 비활성화하고, 최신 보안 업데이트를 받을 것을 권장함.
          + 리눅스 사용자는 /etc/bluetooth/input.conf 파일에서 ClassicBondedOnly=true 설정을 활성화하고, 블루투스 서비스를 재시작할 것을 권장함.
          + macOS와 iOS에 대한 정보는 불확실함.
     * 윈도우에 대한 블루투스 취약점 관련 정보 부족
          + 윈도우가 취약점에서 자유로운 이유에 대한 설명이 필요함.
          + 윈도우 블루투스 스택의 구조적 특징이나 보안 설정에 대한 정보가 필요함.
          + 윈도우 시장 점유율이 높고 많은 시스템 관리자들이 관심을 가질 것으로 예상되므로, 관련 정보 제공이 중요함.
     * 무선 오디오 연결의 취약점 해결에 대한 긍정적 반응
          + 스마트폰에서 물리적 오디오 연결이 사라지고 무선 연결이 주를 이루는 상황에서 취약점 해결이 중요함.
     * 맥OS와 iOS의 블루투스 취약점 해결 상황
          + 맥OS 14.2와 iOS 17.2에서 해당 취약점이 해결되었음을 알림.
     * 블루투스 취약점의 작동 원리에 대한 질문
          + 블루투스 호스트 상태 기계를 속여 사용자 확인 없이 가짜 키보드와 페어링하는 취약점에 대한 상세한 설명 요청.
     * UBPorts Pinephone 사용자의 보안 우려
          + UBPorts Pinephone 사용자로서, iOS/안드로이드에 비해 보안 취약점이 더 많을 것이라는 우려 표현.
     * Arch Linux에서의 블루투스 취약점 해결 상황
          + Arch Linux에서 bluez 5.70-2 버전부터 취약점이 해결되었음을 알림.
     * 블루투스 보안에 대한 오해와 실제 취약성
          + 블루투스가 안전하다는 잘못된 가정과 실제로 존재하는 키스트로크 주입 취약점에 대한 경험담 공유.
     * USB 연결의 취약성에 대한 경험담
          + ""충전 전용"" 포트에 키보드를 연결하면 작동하는 것을 경험하고, 이것이 실제로 악용될 수 있는지에 대한 의문 제기.
     * USB 러버 더키와 관련된 취약점 정보
          + 블루투스 키보드로 가장하여 초인적 속도로 키스트로크를 보내는 방식을 이용하는 USB 러버 더키에 대한 정보 공유.
"
"https://news.hada.io/topic?id=12392","Atree: 간단하고 효율적인 포인터 없는 Tree 구현체","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Atree: 간단하고 효율적인 포인터 없는 Tree 구현체

     * Apter Trees in C++
     * [노드값, 부모인덱스) 두개의 벡터만 사용하여 단순하게 표현한 트리
     * 대부분의 트리는 이진 트리처럼 구현되며,각 노드가 자신의 값과 왼쪽/오른쪽 자식노드에 대한 포인터를 포함
     * 이런 데이터 구조는 재귀로 구현해야 하고, 캐시 동작 및 빈번한 malloc()으로 인해 속도가 느려질수 있음
     * 누가 트리 노드를 '소유'하는 지에 대한 개념은 멀티레이어 소프트웨어에서는 복잡해 질수 있음
     * Apter 트리는 훨씬 빠르고, 추론하기 쉬우며, 구현하기 쉬움

동작 방식

     * 크기가 같은 두개의 배열로 구현
          + 데이터의 벡터(배열) d
          + 부모 인덱스의 벡터 p. d 벡터의 인덱스가 키로 사용됨(c)
          + 종종 키/인덱스 c 는 정수형
     * Coco 가 Molly 와 Arca의 부모이고, Arca가 Cricket이라는 자식이 있다면 아래와 같은 구조가 됨
       tree.d = [""Coco"", ""Molly"", ""Arca"",""Cricket""]
       tree.p = [0,0,0,2]
     * 부모가 0이면서 키가 0인 노드가 루트노드 (Apter 트리는 루트노드가 필수이거나 또는 -1 이 ""부모 없음""을 의미하지만 여기서는 무시)
     * 컴퓨터는 벡터를 매우 빠르게 조작할 수 있음. 포인터 연산보다 훨씬 빠르기 때문에 알고리즘에 대한 빅-O 표기법을 비교하는 것은 실제로는 의미가 없음

중요성

     * 이 구현 방식은 본인이 본 트리 구현 방식 중 가장 우아함
     * 적절한 벡터 연산 라이브러리를 사용하면 이해하기 쉽고 버그를 찾기 쉬움
     * 간단함으로 인해 다른 사용 시나리오에 쉽게 적용 가능
     * 부모 인덱스 벡터를 무시하고 값들을 빠르게 반복할 수 있으며, 이는 무료로 사용가능한 Deep Map과 같음
     * GPU 친화적이며, 임베디드 환경에서 사용하기 쉬움
     * 벡터의 크기를 특정 크기 이상으로 성장하지 않게 함으로써 보안을 쉽게 유지할 수 있음

기원

     * 이 기술을 발명한 사람을 찾기 위해 노력 중이며, 60년대와 70년대 벡터 지향적인 시기에 이미 이름이 있었을 것으로 추측함.
     * Apter가 설명한 대로 처음 완전한 설명을 보았지만, K3에서도 널리 문서화되었음
     * APL은 전통적인 방식으로 트리를 구현하지만, 벡터 그래프에 대해 유사한 기술을 사용함
     * J 사용자들에게도 알려져 있으며, Rosetta Code의 J 언어 트리 구현에 대한 설명이 있음
     * John Earnest는 벡터 트리 구현에 대해 더 자세히 설명하며, ""오프셋 인덱스"" 접근 방식을 포함하여 삭제 항목에 대해 설명함.
     * 더 복잡한 접근 방식은 각 항목의 깊이를 추적하는 것임

다른 일반적인 트리 구현

     * FreeBSD의 커널 트리 구현, klib의 트리, Ruby의 트리 클래스, Python 선언적 트리 클래스 등이 있음
     * 이들은 Apter 트리와 동일한 기능을 수행하지 않으며, 일부는 일반화로 인해 훨씬 더 큼

이 코드의 현황

     * C++17을 배우기 위해 이를 구현해보는 시도를 함.
     * 아직 사용 준비가 되지 않았으며, C++에 대해 더 많이 배울 필요가 있음.

GN⁺의 의견

     * Apter Trees는 기존의 복잡한 트리 구조를 단순화하여 빠르고 효율적인 데이터 관리를 가능하게 함.
     * 벡터 기반의 트리 구현은 메모리 오버헤드를 최소화하고, 선형적인 접근을 통해 성능을 향상시킬 수 있음.
     * 이 기사는 소프트웨어 엔지니어링에서 데이터 구조의 혁신적인 접근 방식을 탐구하는 데 흥미로움을 제공함

        Hacker News 의견

     * 한 사용자는 자신의 작업이 해커뉴스에 링크되어 있는 것을 보고 놀랐음을 표현함. 그는 가벼운 배열 기반 데이터 구조에 관심이 많았고, 특히 3D 모델 스키닝을 위한 노드 트리에 자주 사용되는 구현 방식에 대해 언급함. 부모 노드가 자식 노드보다 먼저 오도록 배열을 정렬하면, 모든 노드에 대해 세계 변환을 재계산하는 것이 단순한 반복문으로 처리될 수 있음을 설명함.
     * 다른 사용자는 이러한 트리 스타일에서 자식 노드를 반복하는 것이 O(N)이라는 댓글에 대해, '첫 번째 자식'과 '다음 형제'를 가리키는 포인터를 추가함으로써 atree 디자인을 일반화하는 것이 실제로 쉽다고 언급함. 또한, 필요한 작업을 지원하기 위해 데이터 구조를 변경하는 것을 권장함.
     * 한 사용자는 노드를 배열에 저장하고 인덱스를 포인터로 사용하는 것이 트리 알고리즘 구현에 필수적이라고 주장함. 특히, 노드의 자식에 접근해야 할 경우, 메모리 절약을 위해 내부 노드와 잎 노드에 대해 별도의 구조를 고려해야 한다고 조언함.
     * 또 다른 사용자는 부모 배열로 트리를 표현하는 방식이 해커뉴스에서 많은 관심을 받는 것이 다소 이상하다고 언급함. 이는 좋은 프레젠테이션이 기본적인 아이디어를 얼마나 멀리 나아가게 할 수 있는지 보여준다고 생각함.
     * 한 사용자는 이 프로젝트가 시스템 포인터를 자체 포인터로 대체하는 것에 불과하다고 지적함.
     * 다른 사용자는 mallocs를 줄이고 데이터 지역성을 증진시키고자 한다면, 노드 풀을 사용하는 전통적인 트리 구현을 시도해볼 것을 제안함.
     * Aaron Hsu의 APL을 사용한 설명을 참고할 것을 권장하는 댓글이 있음.
     * 한 사용자는 노드의 모든 자식을 함께 패킹하는 구조 변경을 제안함. 이렇게 하면 이진 검색으로 노드의 모든 자식 목록을 찾을 수 있고 캐시 친화적인 특성을 가질 수 있음을 언급함.
     * 배열 내 인덱스를 '핸들' 또는 '인덱스-핸들'로 일컫는 것에 대한 댓글이 있으며, 이 트리 표현 방식이 힙과 분리 집합과 같은 클래식한 데이터 구조를 연상시킨다고 언급함.
     * 마지막으로, 배열 인덱스도 일종의 '포인터'라고 할 수 있으며, 전통적인 트리 구현이 malloc을 요구하는 것은 동적으로 노드를 추가하거나 제거할 필요성 때문이라고 설명하는 댓글이 있음. 트리의 크기가 제한적이고 자주 삭제하지 않는 경우 배열 구현이 적합할 수 있음을 언급함.
"
"https://news.hada.io/topic?id=12373","Ratatui - TUI 작성용 Rust 라이브러리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Ratatui - TUI 작성용 Rust 라이브러리

     * 복잡한 TUI를 쉽게 만들기 위한 위젯 및 유틸리티를 제공
     * 개발이 중단된 tui-rs 에서 포크하여 계속 개선중
     * Crosterm, Termion, Termwiz 등의 백엔드를 선택해서 키보드/마우스 입력등을 처리 가능
     * gitui, repgrep, gpring, kdash 등에서 이용중

   이름이 너무 마음에 드는데요ㅋㅋㅋㅋㅋㅋㅋ
"
"https://news.hada.io/topic?id=12355","FunSearch: LLM을 활용한 수학 과학 분야의 새로운 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  FunSearch: LLM을 활용한 수학 과학 분야의 새로운 발견

FunSearch: 수학 과학에서 새로운 발견을 위한 대규모 언어 모델 활용

     * 대규모 언어 모델(LLMs)은 개념을 결합하는 데 뛰어난 능력을 가지고 있으며, 읽기, 쓰기, 코딩을 통해 문제 해결을 돕는 유용한 도구임.
     * LLMs가 때때로 사실이 아닌 정보를 ""환상화""하는 경향이 있어, 검증 가능한 정확한 발견을 하는 것이 도전적임.
     * FunSearch는 창의적인 솔루션을 제공하는 사전 훈련된 LLM과, 잘못된 아이디어를 걸러내는 자동 ""평가자""를 결합하여 새로운 수학 및 컴퓨터 과학 솔루션을 탐색하는 방법임.

언어 모델을 통한 진화로 발견 추진

     * FunSearch는 가장 높은 점수를 받은 아이디어를 발전시키는 진화적 방법을 사용하며, 이 아이디어들은 자동으로 실행 및 평가될 수 있는 컴퓨터 프로그램으로 표현됨.
     * 사용자는 문제를 코드 형태로 작성하고, 이는 프로그램을 평가하는 절차와 초기 프로그램 풀을 초기화하는 시드 프로그램으로 구성됨.
     * FunSearch는 반복적인 절차로, 각 반복마다 현재 프로그램 풀에서 일부 프로그램을 선택하여 LLM에 제공하고, LLM은 새로운 프로그램을 생성하여 평가함.

수학에서 새로운 길을 개척

     * FunSearch는 수십 년간 수학자들을 괴롭혀온 캡 세트 문제에 대한 새로운 솔루션을 발견함.
     * 캡 세트 문제는 고차원 그리드에서 선상에 세 점이 놓이지 않는 가장 큰 점 집합을 찾는 것으로, 극단적 조합론에서 중요한 모델임.
     * FunSearch는 일부 설정에서 지난 20년간 발견된 것 중 가장 큰 캡 세트를 발견함.

FunSearch는 간결하고 인간이 해석 가능한 프로그램을 선호

     * FunSearch는 단순히 문제의 해결책을 생성하는 것이 아니라, 그 해결책이 어떻게 도출되었는지를 설명하는 프로그램을 생성함.
     * FunSearch는 콜모고로프 복잡성이 낮은, 즉 매우 간결한 프로그램을 통해 해결책을 찾는 것을 선호함.
     * FunSearch의 프로그램 출력은 연구자들이 이해하기 쉬우며, 연구자들에게 실행 가능한 통찰력을 제공함.

컴퓨팅에서 악명 높은 어려운 도전 과제 해결

     * FunSearch는 이론적인 캡 세트 문제에 성공한 후, 컴퓨터 과학에서 중요한 실용적 도전 과제인 ""빈 패킹"" 문제에 적용됨.
     * FunSearch는 기존의 휴리스틱보다 더 적은 수의 빈으로 동일한 수의 항목을 포장하는 데 성공함.

LLM 주도 발견으로 과학과 그 너머를 위한 길 열기

     * LLM의 환상화를 방지한다면, 이 모델들의 힘을 활용하여 새로운 수학적 발견을 할 뿐만 아니라 중요한 실제 문제에 대한 영향력 있는 해결책을 밝힐 수 있음.
     * 많은 과학 및 산업 문제에 대해 LLM 주도 접근법을 사용하여 효과적이고 맞춤형 알고리즘을 생성하는 것이 일반적인 관행이 될 것으로 예상됨.

GN⁺의 의견

     * FunSearch는 수학적 문제 해결에 있어서 인공지능의 새로운 가능성을 보여줌. 특히, 캡 세트 문제와 같은 오랜 기간 해결되지 않은 문제에 대한 새로운 솔루션을 제시함으로써, 수학 분야에서의 AI의 역할이 더욱 중요해질 것임.
     * 이 기술이 실제 산업 문제, 예를 들어 데이터 센터의 효율성 향상과 같은 문제에 적용됨으로써, AI가 실용적인 문제 해결에도 기여할 수 있음을 보여줌.
     * FunSearch가 생성하는 프로그램은 인간이 해석 가능하며, 이는 연구자들이 더 깊은 통찰력을 얻고, AI와 협력하여 문제를 해결하는 데 도움이 될 것임.

        Hacker News 의견

     * LLM의 필요성에 대한 질문:
          + LLM의 목적은 주어진 타입 시그니처에 맞는 파이썬 함수를 생성하는 것으로 보임.
          + LLM 없이도 주어진 타입 시그니처에 맞는 무작위, 정확한 파이썬 함수를 생성할 수 있어야 함.
          + 제한된 언어가 더 효율적일 수 있음을 제안하며, PushGP 같은 언어를 예로 듦.
          + LLM이 가치를 더하는지, 다른 유전 프로그래밍 기법과 비교하여 경쟁력이 있는지, 전통적인 접근법과 비교해 계산 비용에 차이가 있는지에 대한 질문을 함.
     * 조합론에서의 발견에 대한 중요한 맥락:
          + 특정 조합론 숫자가 이전에 알려진 범위보다 더 좁은 범위 내에 있음이 밝혀짐.
          + 이 발견은 논리 중심의 수학적 증명이 아닌, 특별한 속성을 가진 숫자 시퀀스를 찾는 방법으로 이루어짐.
          + 유전 알고리즘과 LLM을 사용하는 방법으로 흥미롭고 유용할 수 있음.
     * ""자가 대결""에 대한 관련 코멘트:
          + FunSearch는 LLM을 이용한 진화 방법을 사용하여 가장 높은 점수를 받는 아이디어를 발전시킴.
          + 사용자는 코드 형태로 문제를 기술하고, 프로그램을 평가하고 초기화하는 데 사용될 프로그램 풀을 생성함.
          + 각 반복에서 FunSearch는 현재 풀에서 몇몇 프로그램을 선택하고, LLM이 이를 바탕으로 새로운 프로그램을 생성하여 자동으로 평가함. 최고의 프로그램들이 기존 풀에 다시 추가되어 자기 개선 루프를 생성함.
     * 웹 검색에 대한 개인적 사용 경험:
          + pplx.ai와 phind.com을 사용하여 질문을 하고, 웹 링크를 찾아냄.
          + 질문을 다듬거나 후속 질문을 하여 다른 또는 더 깊이 있는 참조를 찾아냄.
          + Tech Twitter의 콘텐츠도 유용하며, Grok을 연구에 사용하는 것을 기대함.
     * DeepMind의 발견에 대한 트위터 게시물:
          + 만약 신경망이 진정으로 새로운 지식을 생성할 수 있다면, 이는 불 발견 이후 가장 중요한 발견일 것임.
          + 이러한 발견이 사실이라면 모두가 이에 대해 이야기할 것이라는 의문 제기.
          + Palm 2에서 이루어진 것에 대한 인상과, 향후 모델들이 이 방법을 활용할 때의 가능성에 대한 기대감 표현.
     * 트위터 게시물 요약:
          + AI 기능이 지속적으로 증가하고 있으며, AI 자동 완성, 리팩토링, 코드 리뷰 차이 생성 등을 통해 개인적인 생산성이 20-30% 향상됨.
          + AI 모델을 사용하여 비즈니스 흐름의 일부를 연결하면 시스템을 ""개선""하는 것이 모델 교체만큼 간단함.
          + 초기 통합 이후 몇 년 동안 모든 것이 마법처럼 개선될 것으로 기대함.
     * 프로그램 생성에 대한 요약:
          + 프로그램 템플릿/스켈레톤과 적합성 함수를 주어진 상태에서 LLM을 사용하여 프로그램 집단을 생성함.
          + 새로운 프로그램을 생성하는 프롬프트를 사용하고, 입력에 대해 프로그램을 실행하여 적합성 함수로 점수를 매김.
          + 진화에 대한 섬 모델을 사용하며, LLM 호출 횟수가 약 1e6으로 낮음.
          + 프로그램 평가/점수 매기기에 대한 깊이 대 너비의 트레이드오프에 대한 고찰.
     * 캡 세트 문제에 대한 접근:
          + 캡 세트 문제는 고차원 그리드에서 세 점이 일직선에 있지 않은 가장 큰 점 집합을 찾는 문제임.
          + FunSearch는 이 문제에 대해 최대 캡 세트를 발견하는 프로그램 형태의 솔루션을 생성함.
          + 이는 지난 20년간 캡 세트 크기 증가 중 가장 큰 증가를 나타냄.
     * LLM과 상징적 추론의 통합 가능성에 대한 궁금증 표현.
     * 새로운 지식 생성 여부와 관계없이, AI 모델 크기나 기타 규제 조치에 기반한 AI 접근 제한을 고려할 때의 사례 연구에 대한 흥미.
     * 보편 근사 정리와 관련하여, ReLU를 사용하는 인공 신경망으로 함수를 정확하게 근사할 수 있음을 언급.
          + 이 접근법은 유사하지만, 최종적으로 코드를 제공함.
"
"https://news.hada.io/topic?id=12387","3M이 수십 년 전부터 자사 화학물질의 유해성을 알고 있었으나, 공개하지 않았던 사실","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            3M이 수십 년 전부터 자사 화학물질의 유해성을 알고 있었으나, 공개하지 않았던 사실

3M의 화학물질이 유해하다는 사실을 수십 년 전부터 알고 있었지만, 대중과 정부에 알리지 않았다

     * 3M의 내부 문서에 따르면, 회사는 수십 년 동안 화학물질의 위험성을 숨겨왔음.
     * 1998년, 3M의 독성학자 리처드 퍼디는 회사의 퍼플루오로화학물질이 독수리와 알바트로스의 혈액에서 발견되는지 연구함.
     * 퍼디는 이 화학물질이 식물 사슬을 통해 이동하고 동물에 축적될 가능성이 있다고 경고했으나, 3M 관리자들은 데이터 수집 팀을 해산시킴.

3M과 미네소타 주의 합의

     * 3M은 환경과 인간 건강에 대한 화학물질의 위험성을 수십 년간 보고하지 않았다는 이유로 2010년 미네소타 전 법무장관에 의해 고소됨.
     * 2018년 재판 시작 당일, 3M은 미네소타 주와 8억 5천만 달러를 지불하여 깨끗한 식수를 제공하는 데 도움을 주기로 합의함.
     * 이 합의는 미국 역사상 세 번째로 큰 자연 자원 손상 합의이지만, 3M의 2018년 수익의 2.6%에 불과함.

3M의 법적, 규제적, 정치적 도전

     * 3M은 화학물질의 발명과 폐기로 인해 앞으로 수십억 달러의 비용을 지불해야 할 수 있음.
     * 2019년 의회 청문회에서 미국 하원의원은 미국인의 식수, 지하수, 공기, 식품 공급 오염을 국가 비상사태로 불렀음.
     * EPA는 두 가지 퍼플루오로화학물질을 슈퍼펀드 법에 따라 유해 물질로 지정하고 새로운 식수 건강 자문 수준을 발표할 계획임.

3M이 알고 있었던 것과 그들이 알게 된 시기

     * 1950년대부터 3M과 듀퐁 과학자들은 화학물질이 인간과 동물의 몸에 축적되고 있음을 발견함.
     * 3M은 화학물질의 위험성에 대한 연구 결과를 정부 규제 기관, 미네소타 커뮤니티, 심지어 자사 직원들에게도 전달을 지연시키거나 최소화함.

'가장 야생적인 고양이'

     * 3M의 인공 독성 화학물질은 제2차 세계대전 중 원자 폭탄 개발을 위한 맨해튼 프로젝트로 거슬러 올라감.
     * 과학자들은 불소 가스를 사용하여 우라늄을 분리하고 탄소와 결합할 때 거의 불가능한 결합을 형성함을 발견함.

3M 직원: 우리는 무지를 주장했다

     * 1975년, 플로리다의 교수가 3M에 전화하여 테프론 조리기구와 스카치가드와 같은 가정용품에서 사용되는 3M 화학물질이 인간 혈액 샘플에서 발견되었을 수 있다고 의심함.
     * 3M은 화학물질이 인간 몸에 축적되고 독성이 있다는 사실을 알고 있었음에도 불구하고 이를 부인함.

'이 화학물질은 많은 암석보다 더 안정적이다'

     * 1998년, 퍼디는 화학물질이 식물 사슬을 통해 이동하고 해양 포유류를 죽이고 있다고 경고함.
     * 퍼디는 3M이 환경 영향 평가를 위한 데이터 수집을 지연시켰다고 주장함.

3M은 과학을 '지배'하기 시작한다

     * EPA는 3M에게 2000년 미국에서 스카치가드에 사용되는 화합물(PFOS)의 제조를 중단하도록 압력을 가함.
     * 3M은 규제 기관에 경고한 후, 회사의 명성을 보호하고 과학적 서사를 제어하기 위한 커뮤니케이션 계획을 수립함.

GN⁺의 의견

     * 3M이 화학물질의 유해성을 오랜 기간 동안 알고 있었지만 이를 공개하지 않은 것은 환경과 공중 보건에 대한 중대한 윤리적 위반임.
     * 이러한 화학물질이 전 세계적으로 확산되어 인간과 야생 동물의 혈액에서 발견되는 것은 화학물질 관리의 중요성을 강조함.
     * 3M과 같은 대기업이 법적, 규제적 책임을 회피하기 위해 과학적 데이터를 조작하거나 숨기려 한 사례는 기업 윤리와 투명성의 중요성을 일깨움.

        Hacker News 의견

     * 환경보호청(EPA)의 규정이 화학 회사들에게 스스로를 감독할 수 있는 권한을 부여함으로써, PFOA가 북극의 빗물과 구름에서 검출되는 등 환경 문제가 발생하고 있음. 이로 인해 향후 건강 문제가 야기될 수 있음.
     * Purdy는 검출된 물질의 ""해로움""을 과장하여 환경주의자들이 이를 부풀려왔음을 지적함. PFOS/PFAS가 환경적 악당으로 몰리고 있지만, 많은 플루오린화된 의약품을 우리가 매일 섭취하고 있어 그 해로움을 입증하기 어려움. PFAS의 ""올바른"" 정의를 찾는 과학 언론의 모습이 흥미로움.
     * PFAS가 ""해로운"" 것으로 알려져 있음에도 불구하고, 수십 년 동안 우리 주변에 존재해왔고, 그 기간 동안 삶의 질이 향상되었다는 점을 지적함. 한국을 포함한 여러 국가에서 PFOA 혈중 농도가 높게 나타남.
     * 환경 문제가 끝나기 전에 관리 체인의 모든 사람에게 개인적인 형사 책임을 부여해야 한다는 의견 제시. 내부 문서를 EPA에 보고하지 않는 사람이 FBI의 방문을 두려워해야 한다는 주장.
     * 환경 연구를 피하려는 기업들이 생겨나는 것은 아닌지, 환경 연구를 방해하는 것을 장려하는 것 같은 현 상황에 대한 우려 표명.
     * 3M이 여전히 PFAS를 사용하는 ""패브릭 프로텍터""를 판매하고 있음. 제품 목록이나 포장에서는 알 수 없지만, 데이터 시트에서 ""3% 미만의 플루오로케미컬 우레탄""을 명시하고 있음.
     * 지난 100년 동안 증가한 암 사례가 PFCs와 어떻게 연관되어 있는지, 만성 저용량 노출로 인한 다른 해로움은 무엇인지에 대한 질문 제기. EPA나 다른 정부 기관이 화학 제조 회사나 환경 단체의 영향 없이 PFCs의 장기적인 만성 효과에 대한 제대로 된 연구가 필요함.
     * 화학 회사에 외부 효과에 대한 비용을 지불하게 하고, 이로 인해 파산하면 그에 합당한 결과라는 의견.
     * 3M이 수십 년 전부터 화학 물질이 해롭다는 것을 알고 있었지만, 공개하지 않았음. Du Pont도 같은 행위를 했지만, 경미한 처벌로 넘어갈 수 있었다는 사실을 지적.
     * 2001/2002년 대학 시절, 3M 법무부 인턴이었던 친구가 3M이 테플론과 관련 제품에 대해 법적 책임을 지지 않도록 돕고 있었다는 이야기 공유.
"
"https://news.hada.io/topic?id=12381","심천에서의 전자제품 필수 가이드 새 버전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         심천에서의 전자제품 필수 가이드 새 버전

심천의 전자제품 안내서 새 버전

     * 2016년에 출시된 ""심천의 전자제품 필수 가이드""가 많은 변화를 거쳐 새로운 버전으로 업데이트됨.
     * 새로운 관리자인 나오미 우(@realsexycyborg)가 업데이트된 버전을 크라우드펀딩을 통해 출시하며, 새로운 버전은 ""심천의 전자제품 새로운 필수 가이드""라는 이름과 함께 눈에 띄는 빨간색 표지를 특징으로 함.
     * 기술적인 중국어 용어는 크게 변하지 않았지만, 문화와 비즈니스 방식에 많은 변화가 있었으며, 새로운 가이드는 위챗 사용법, 중국의 디지털 에티켓, 업데이트된 지도 등을 포함한 다양한 정보를 제공함.

GN⁺의 의견

     * 이 가이드는 심천의 전자제품 시장을 방문하려는 사람들에게 매우 유용한 자료가 될 것임.
     * 나오미 우의 새로운 관리와 현대적인 업데이트는 중국에서의 비즈니스와 문화적 상호작용에 대한 최신 정보를 제공함으로써 사용자들에게 실질적인 도움을 줄 것임.
     * 크라우드펀딩을 통한 새로운 버전의 출시는 기술 커뮤니티 내에서의 협력과 지원을 반영하는 좋은 예시임.

   기존 버전은 그냥 공개했는데, 이번엔 $30 크라우드 펀딩이네요.
     * 중국 심천(선전,Shenzen)에서 전자부품 사기 가이드 [영문 PDF,124p]
"
"https://news.hada.io/topic?id=12433","Coffee - AI를 이용한 프론트엔드 개발 도우미","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Coffee - AI를 이용한 프론트엔드 개발 도우미

     * COFFEE = COFrame Front-End Enginner
     * 사용중인 IDE 내에서, AI를 이용하여 10배 더 빠르게 UI를 빌드하고 반복하기
     * Next.js, Remix 등을 포함한 모든 React 코드베이스에서 작동
     * 대부분의 표준 UI 컴포넌트에 충분히 안정적
     * 대부분의 간단한 속성 유형(데이터, 콜백 등) 지원
     * 기존 컴포넌트를 편집할 때와 처음부터 새 컴포넌트를 만들 때 모두 동일한 DX를 사용
     * 깔끔하고 유지 관리 가능한 코드 생성

   데모 영상은 놀라울 정도로 신기하네요. +_+
"
"https://news.hada.io/topic?id=12366","법원 판결에 따라 용의자들이 경찰에게 휴대폰 비밀번호 제공을 거부할 수 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               법원 판결에 따라 용의자들이 경찰에게 휴대폰 비밀번호 제공을 거부할 수 있음

휴대폰 비밀번호 보호

     * 미국 유타주 대법원의 만장일치 판결에 따르면, 범죄 용의자들은 자기 비밀번호를 경찰에게 제공하지 않아도 된다.
     * 이 판결은 미국 헌법 제5조의 자기 비밀 보호 권리에 근거하며, 미국 대법원에서 검토될 수 있다.

알폰소 발데즈 사건

     * 알폰소 발데즈는 전 여자친구를 납치하고 폭행한 혐의로 체포되었다.
     * 경찰은 발데즈의 휴대폰 내용을 검색하기 위한 영장을 받았지만 비밀번호를 풀지 못했다.
     * 발데즈는 경찰에게 비밀번호를 제공하는 것을 거부했고, 재판에서 그의 거부가 증거 부족으로 이어져 유죄 판결을 받았다.

항소 법원의 판결

     * 항소 법원은 발데즈가 제5조에 따라 비밀번호 제공을 거부할 권리가 있으며, 재판에서 이를 사용한 것은 위반행위라고 판결했다.
     * 유타 대법원은 항소 법원의 판결을 확정했다.

대법원 검토 가능성

     * 전자 장치의 암호화된 정보에 대한 법 집행의 노력과 관련하여 제5조가 어떻게 적용되는지에 대한 중요한 질문이 제기되었다.
     * 발데즈 사건은 장치를 잠금 해제하도록 강제하는 명령과 관련이 없으며, 대법원이 아직 다루지 않은 현대 기술 상황이다.
     * 유타 대법원은 비밀번호를 구두로 제공하는 것이 제5조에 따른 증언적 의사소통이라고 판결했다.

GN⁺의 의견

     * 이 사건은 개인의 프라이버시 보호와 법 집행 간의 균형을 찾는 데 중요한 역할을 한다.
     * 휴대폰과 같은 개인 전자 장치의 보안이 점점 더 중요해지고 있으며, 이러한 판결은 이러한 장치의 보안을 강화할 수 있다.
     * 이 사건은 미국 대법원이 디지털 증거 수집과 관련된 법적 문제를 명확히 할 기회를 제공할 수 있으며, 이는 기술과 법의 상호작용에 대한 흥미로운 사례가 될 수 있다.

   영장을 발부 받았으면 가능해야하는 것 아닌가.. 이렇게 하면 영장의 의미가 뭐지

        Hacker News 의견

     * 암호화된 데이터나 비밀 코드와 관련된 법정 사례에 대한 질문
          + 전화선을 도청하여 암호화된 언어를 사용하는 경우, 법적으로 그 의미를 설명하도록 강요받을 수 있는지에 대한 의문 제기.
     * 휴대폰에 민감한 정보를 저장하지 말 것에 대한 조언
          + 휴대폰은 결코 사용자의 친구가 아니며, 생체 인식, 원격 측정, 공공 클라우드, 기업 감시 소프트웨어가 없는 간결한 리눅스 기기가 더 안전할 수 있음.
     * 다중 프로필과 암호화에 대한 궁금증
          + 코드를 입력하여 프로필을 전환하고 다른 프로필을 암호화하는 경우에 대한 의문.
     * 영국에서의 비밀번호 제출 의무
          + 영국에서는 명령에 따라 비밀번호를 제출해야 함.
     * 법적 판결의 지역적 적용 범위
          + 유타 주에만 적용되는 판결이며, 다른 주에서는 다른 판결이 있을 수 있음. 전국적으로 영향을 미치는 미국 대법원의 판결을 기다려야 함.
     * 생체 인식과 숫자 비밀번호 사용에 대한 경고
          + 법적으로 강제될 수 있으므로 생체 인식이나 숫자 비밀번호 대신 알파벳과 숫자를 혼합한 비밀번호 사용 권장.
     * 비밀번호 공개에 대한 역사적 변화와 토론
          + 과거에는 개인 소유물이 자기 자신을 범죄자로 만들 수 없었으나, 이제 비밀번호 공개 여부가 토론의 대상이 됨.
     * 유타 주의 판결에 대한 오해와 그 본질에 대한 설명
          + 판결은 비밀번호 제공 거부권에 관한 것이 아니라, 비밀번호 제공 거부가 재판에서 불리한 증거로 사용될 수 있는지에 대한 미묘한 질문임.
     * 비밀번호 입력 시 화면에 나타나는 문자에 대한 경고
          + 입력하는 동안 화면에 평문 비밀번호 문자가 나타나는 휴대폰은 주변의 비디오 카메라에 의해 기록될 수 있으므로 피할 것.
     * 개인 정보를 이용한 비밀번호 추측 가능성에 대한 질문
          + 대상의 개인 정보를 대규모 언어 모델(Large Language Model, LLM)에 입력하면, 비밀번호를 인간보다 빠르게 추측할 수 있는지에 대한 의문. 비밀번호 추측에 특화된 LLM의 경우, 비밀번호의 종말을 의미할 수도 있음.
"
"https://news.hada.io/topic?id=12452","당신이 아마도 몰랐을 Apache 프로젝트들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        당신이 아마도 몰랐을 Apache 프로젝트들

     * APISIX, ShardingSphere, SeaTunnel, SkyWalking, Doris

Apache APISIX

     * Apache APISIX는 API 게이트웨이로, 유명한 nginx 리버스 프록시 위에 구축된 OpenResty의 Lua 레이어를 기반으로 함
     * Route, Service, Upstream과 같은 추상화를 제공하며, 플러그인 기반 아키텍처를 가짐
     * 변환, 인증, Observability, 트래픽, 서버리스, 메시징 등 다양한 플러그인을 기본 제공하며, 필요에 따라 사용자 정의 플러그인 작성 가능
     * Kubernetes에서 Ingress Controller로 APISIX를 활용할 수 있으며, 이를 위한 Helm Chart를 제공함

Apache ShardingSphere

     * ShardingSphere는 모든 데이터베이스를 분산 데이터베이스 시스템으로 변환할 수 있는 생태계를 제공한다고 주장
     * 코드와 데이터베이스 사이에서 프록시 역할을 하며, ShardingSphere-JDBC와 ShardingSphere-Proxy 두 가지 형태로 제공됨
     * 데이터 샤딩, 분산 트랜잭션(XA), 읽기/쓰기 분할, 데이터 암호화 등 여러 핵심 기능을 제공

Apache SeaTunnel

     * Apache SeaTunnel은 데이터 소스, 변환, 싱크의 세 가지 기둥을 제공하는 데이터 통합 플랫폼
     * SeaTunnel의 Zeta 엔진이나 Apache Spark, Apache Flink을 래핑하는 추상 API를 제공
     * SQL 및 NoSQL 커넥터를 포함한 다양한 커넥터 생태계를 제공하며, Jira, Google Sheets, Notion과 같은 독특한 커넥터도 포함됨
     * 웹 UI를 통해 작업 관리, 스케줄링, 실행 및 모니터링 기능을 시각적으로 제공함

Apache SkyWalking

     * Apache SkyWalking은 마이크로서비스, 클라우드 네이티브 앱, 쿠버네티스 아키텍처에 초점을 맞춘 APM(Application Performance Monitor) 도구
     * 프로브, 플랫폼, 스토리지, 웹 UI 등 네 가지 주요 구성 요소를 기반으로 아키텍처를 구축
     * OpenTelemetry를 포함한 여러 출력 형식을 지원하며, 현재 업계의 OpenTelemetry에 대한 집중을 고려할 때 이 옵션을 심각하게 고려해 볼 것을 권장

Apache Doris

     * Apache Doris는 실시간 데이터 웨어하우스
     * 보고서 분석, Ad-Hoc 쿼리, 통합 데이터 웨어하우스 구축, 데이터 레이크 쿼리 등 네 가지 주요 시나리오를 제시
     * 대부분 MySQL과 호환되므로 일반적인 MySQL 클라이언트를 사용할 수 있음

토론

     * 위의 Apache 프로젝트들은 모두 Apache 재단에서 호스팅되며, 중국에서 시작되었다는 공통점이 있음
          + 현재 아파치에는 300개가 넘는 프로젝트가 있음
     * 최근 몇 년 동안 Apache 재단에서 시작된 프로젝트 수가 급격히 증가했으며, 많은 프로젝트가 중국 출신임
     * 이러한 추세는 점점 더 커지고 있으며, 중국을 오픈소스 세계와 통합하려는 좋은 움직임이라고 생각
"
"https://news.hada.io/topic?id=12376","Supabase가 관리하는 Fly Postgres","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Supabase가 관리하는 Fly Postgres

Supabase와 Fly.io가 함께하는 Fly Postgres 출시

     * Supabase와 Fly.io가 협력하여 관리형 Postgres 서비스인 Fly Postgres를 출시함.
     * Fly.io의 엣지 컴퓨팅 플랫폼에서 37개 이상의 위치 중 어디서나 데이터베이스를 시작할 수 있음.
     * Supabase 관리 데이터베이스에서 기대할 수 있는 모든 기능을 제공함: 40개 이상의 확장 기능을 갖춘 완전한 기능의 Postgres 데이터베이스, 벡터/AI 워크로드를 위한 pgvector 지원, Supavisor(Postgres 연결 풀러), 일일 백업 및 시점 복구, 브랜칭, 관찰 가능성, 마이그레이션, 데이터베이스 관리 대시보드, 자동 생성된 데이터 API (REST 및 GraphQL).

기대 관리

     * 이 서비스는 점진적으로 출시될 예정임.
     * 회사 간 통합을 구축하는 것은 청구, 지원 이양, Supabase 직원 교육 등을 고려할 때 많은 작업이 필요함.
     * 초기 테스터와 함께 작업 중이며, 몇 가지 버그를 수정해야 함.
     * 테스트를 돕고 싶다면 대기자 명단에 등록할 수 있으며, 다음 달에 더 많은 테스터를 받아들일 예정임.

Supabase + Fly = SupaFly?

     * 이 파트너십이 2024년에 전 세계에 Postgres를 배포하는 것을 의미하는 것에 대해 기대하고 있음.
     * Firecracker VM은 Postgres에 대한 몇 가지 흥미로운 아이디어를 제공함.
     * Fly와의 통합은 데이터베이스 바로 옆에 쉽게 구축할 수 있는 컴퓨팅 자원을 제공함.

관리형 대 비관리형 Postgres

     * Fly의 현재 Postgres 제공은 비관리형임.
     * 비관리형은 스케일링, 시점 복구, 복제, 주요 버전 업그레이드 등을 사용자가 직접 관리해야 함.
     * 관리형 Postgres는 이러한 작업을 대신 처리해주므로 사용자는 빌딩에 집중할 수 있음.
     * 관리형 서비스는 Fly 확장 API를 사용하여 구축되며, 테스터는 fly extensions 명령을 사용하여 Postgres 데이터베이스를 시작할 수 있음.

내부 구조

    Fly 기계와 함께 작업

     * Fly Postgres는 Fly 기계 위에 구축됨.
     * 기계는 가벼운 Firecracker VM임.
     * 기계 API는 애플리케이션의 생명주기에 대한 상당한 제어를 제공함.
     * fly-admin은 Fly API와의 상호 작용을 단순화하는 Typescript 래퍼임.
     * Supabase는 몇 가지 추가 서비스를 Postgres에 번들로 제공하므로 단일 Docker 이미지를 Fly 기계 API에 전달할 수 있음.

    멀티 클라우드로 이동

     * 이 출시로 Supabase는 공식적으로 멀티 클라우드가 됨.
     * Supabase는 멀티 클라우드 전환을 단순화하기 위해 AWS의 관리 서비스 사용을 피함.
     * 예를 들어, Fly 기계는 사용하지 않을 때 VM을 일시 중지하는 간단한 방법을 제공함.
     * 반면, Fly가 제공하지 않는 몇 가지 AWS 기본 기능을 우회해야 함.

    Fly 확장 구축

     * Fly는 플랫폼을 확장하는 뛰어난 접근 방식을 가지고 있음.
     * 사용자와 프로젝트를 프로비저닝하기 위해 API에 몇 가지 경로를 추가함.

도전 과제

     * Fly 팀과 함께 몇 가지 도전 과제를 해결 중임.

    네트워크 제한 지원

     * 네트워크 제한 기능은 컨테이너가 클라이언트의 올바른 IP를 받는 것에 의존함.
     * 현재 설정에서는 컨테이너가 Fly 프록시 IP를 볼 수 있음.

    Fly 내 백업

     * Fly 프로젝트는 Fly가 관리하는 Blob 스토리지를 아직 제공하지 않기 때문에 AWS S3에 백업됨.

시작하기

     * 미리보기에 등록하고, 조직이 허용 목록에 추가될 때까지 기다린 후, 문서의 Quickstart를 사용하여 시작할 수 있음.
     * Fly 조직은 하나의 무료 프로젝트를 받게 됨.
     * 청구에 관한 세부 사항은 아직 작업 중이지만, 가격은 현재 가격과 크게 달라지지 않을 예정임.

GN⁺의 의견

     * 이 기사에서 가장 중요한 것은 Supabase와 Fly.io의 협력을 통해 전 세계적으로 분산된 관리형 Postgres 서비스를 제공한다는 점임. 이는 개발자들이 데이터베이스 관리에 드는 시간을 줄이고, 애플리케이션 개발에 더 집중할 수 있게 해줄 것임.
     * 기사가 흥미로운 이유는 클라우드 컴퓨팅과 데이터베이스 관리의 최신 동향을 반영하고 있으며, 멀티 클라우드 전략과 엣지 컴퓨팅의 결합이라는 새로운 기술적 접근 방식을 소개하기 때문임.
     * 이 서비스는 특히 데이터 집약적인 애플리케이션을 Fly 플랫폼에서 배포하는 개발자들에게 낮은 지연 시간과 향상된 성능을 제공할 것으로 기대됨.

        Hacker News 의견

     * Supabase CEO의 발표:
          + 현재 Fly의 Postgres 서비스는 관리되지 않는 상태이며, Supabase는 Fly와 협력하여 관리형 서비스를 제공하기 위해 노력 중임.
          + Supabase는 고가용성(HA) 기능을 테스터들과 함께 출시하기 위해 작업 중이나, 아직 확정된 일정은 없음.
          + CEO는 질문이나 댓글에 답변할 준비가 되어 있음.
     * Supabase에 대한 혼란:
          + 한 사용자는 Supabase를 살펴보았지만, 기본 REST API를 구현하는 방법에 혼란을 느낌.
          + Supabase는 생성된 테이블과 상호작용하는 API를 자동 생성하는데, 비즈니스 로직이 어디에 존재하는지 명확하지 않음.
          + 사용자는 edge 함수를 확인했지만, 그것이 비즈니스 로직을 위한 용도로 사용되는지 예제들이 명확히 설명하지 않아 이해에 어려움을 겪음.
     * Fly.io와의 경험:
          + 다른 사용자는 Fly.io에서 Booklet을 구축하고 있으며, Fly의 Postgres를 사용하여 앱을 분산시키고자 함.
          + Fly의 Postgres 설정에 문제가 있으며, 특히 HAProxy가 30분 연결 시간 제한으로 인해 연결이 끊어지는 문제를 겪고 있음.
          + 새로운 Postgres 서비스에서도 같은 HAProxy 설정이 적용될지에 대한 질문이 있음.
     * Fly.io 문서에서의 발견:
          + 또 다른 사용자는 Fly.io의 문서에서 'Fly의 Postgres'와 'Supabase의 Postgres'가 나란히 있음을 발견하고 이전에 해커뉴스에서 보지 못한 것에 놀람.
          + Fly에서 앱을 배포하고 Postgres를 사용하고 싶을 때 어떤 것을 사용해야 하는지 비교가 제공되지 않아 혼란스러움.
          + 사용자는 Fly에서 DBMS를 사용하고 싶다면 LiteFS 분산 SQLite를 사용할 것이며, Postgres가 필요하다면 Fly와 Supabase의 차이는 관리되는 서비스와 관리되지 않는 서비스의 차이라고 생각함.
     * Supabase의 네트워크 제한 설정:
          + 한 사용자는 Supabase의 네트워크 제한 설정을 좋아하지 않으며, Fly 앱의 IP를 Supabase에 노출시키고 이를 제한하는 데 어려움이 있었음.
          + Supabase가 Fly 네트워크 내부에 실제로 존재하는 것은 좋은 변화라고 생각함.
     * Supabase의 확장성 문제:
          + Supabase가 프로토타입 프로젝트를 넘어서는 확장성에 문제가 있다는 소문이 있으며, 실제로 프로덕션 경험이 있는 사용자의 의견을 묻는 댓글이 있음.
     * Fly 볼륨과 네트워크 연결 스토리지의 차이:
          + Fly 기계는 네트워크 연결 스토리지가 없으며, Fly 볼륨의 데이터를 일시적인 것으로 간주함.
          + AWS나 네트워크 연결 스토리지에 익숙하지 않은 사용자가 Fly 볼륨과 다른 제공업체의 네트워크 연결 스토리지 간의 차이점에 대해 설명을 요청함.
          + Fly 볼륨을 생성하면 같은 지역의 다른 서버로 이동할 수 있으므로 기술적으로 네트워크 연결 스토리지라고 생각함.
     * Supabase와 Fly.io의 협력에 대한 기대:
          + 한 사용자는 현재 Fly에서 큰 데이터베이스를 운영하고 있으며, 관리형 Postgres를 찾고 있음.
          + 완전한 Elixir 샵을 운영하고 있으며, 이 협력이 매우 적절한 시기에 이루어졌다고 생각함.
     * Fly.io 팀의 대응:
          + Fly.io 팀의 Joshua가 이 통합에 대한 질문에 답변할 준비가 되어 있음을 밝힘.
     * 'SupaFly' 참조에 대한 댓글:
          + 'SupaFly' 참조를 이해하지 못한 사람들을 위해 재미있는 비디오 링크를 공유하는 댓글이 있음.
"
"https://news.hada.io/topic?id=12383","Show GN: 올해 당신에게 영감을 준 것","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Show GN: 올해 당신에게 영감을 준 것

   개인적으로 매년하는 시상식 입니다. 이번에는 Public하게 진행해보려 합니다. 자신만의 GOAT를 한 번 만들어보셔요!
"
"https://news.hada.io/topic?id=12410",""단돈 1달러에 구입한 2024 쉐비 타호"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ""단돈 1달러에 구입한 2024 쉐비 타호""

        Hacker News 의견

     * 챗봇을 고객 서비스로 활용하는 것에 대한 이해 부족

     한 사용자는 챗봇을 고객 서비스로 활용하는 것에 대해 이해할 수 없다고 언급함. 이 사용자는 챗봇이 매우 불쾌하며, 전화 응대 로봇과 별반 다르지 않다고 느낌. 여러 단계를 거쳐야만 인간 상담원과 연결되고, 그 후에도 상당한 대기 시간이 필요하다고 지적함. 그러나 결국 문제 해결을 위해서는 인간과의 대화가 필요하다고 강조함.
     * 챗GPT 출력을 걸러내지 않고 고객에게 직접 제공하는 것에 대한 경고

     누군가는 챗GPT의 출력을 걸러내지 않고 고객에게 직접 제공하는 것이 왜 위험한지에 대한 경고 이야기를 공유함. 관련 링크를 통해 새로운 종류의 자원 소비 공격에 대한 정보를 제공함.
     * 챗GPT로 생성된 차량과 유명 인사 사이의 사랑 이야기

     Reddit 사용자가 챗GPT를 이용해 Chevy Tahoe와 Chevy Chase 사이의 사랑 이야기를 만들어낸 것에 대해 언급함. 관련 이미지와 링크를 제공함.
     * 챗GPT와 LLM에 대한 이해와 기대치

     한 사용자가 LLM과 챗GPT를 이해하는 사람에게 이 기술이 어떻게 작동할 것으로 예상했는지 설명해달라고 요청함. 사이트에 직접 챗GPT 프롬프트를 내장한 것은 어떤 목적이었는지, 일반적인 LLM인 챗GPT가 고객의 질문에 어떻게 답변할 수 있는지 의문을 제기함. 챗GPT가 가진 정보는 공개적으로 접근 가능한 것에 불과하므로, 고객이 찾지 못한다면 웹사이트를 더 잘 설계해야 한다고 주장함.
     * GPT 챗봇의 실용성에 대한 회의적인 시각

     사용자는 GPT 챗봇이 실제로 유용하다고 느껴지는 경우가 점점 줄어든다고 언급함. 불필요한 명령을 걸러낼 중간 분류기가 필요한지, 아니면 이전 고객 지원 상호작용을 많이 학습한 모델이 필요한지 의문을 제기함. 그리고 이상한 것이 감지되면 인간 대표에게 전환해야 한다고 생각함. 그렇다면 GPT를 사용하는 이유가 무엇인지, 좁은 목표에 해가 되는 많은 지식을 가지고 있다고 비판함.
     * HTML 폼을 통한 가격 협상의 역사적 사례

     과거 웹사이트가 HTML 요소를 통해 제품의 가격을 전송하고, 프론트엔드 디자이너가 클라이언트로부터 주문이 돌아올 때 수정되지 않을 것으로 예상하지 않았던 시절에 대한 이야기를 공유함. 주문 시스템은 이 조작된 값들을 읽고 그에 따라 금액을 계산했다고 함.
     * 챗봇이 ""법적으로 구속력이 있다""고 말한 것이 실제로 효력이 있는지에 대한 의문

     챗봇이 ""법적으로 구속력이 있다""고 말한다고 해서 실제로 그러한 효력이 있는 것은 아니라고 지적함. 마찬가지로 카탈로그의 HTML을 변경하여 가격을 편집하는 것이 무언가에 대한 권리를 주는 것은 아니라고 언급함.
     * 비인간 고객 지원에 대한 신뢰 상실

     앞으로 비인간 고객 지원 페이지에는 단순히 조언일 뿐이며 신뢰할 수 없다는 면책 조항이 추가될 것이라고 예측함. 이로 인해 컴퓨팅에 대한 신뢰가 더욱 감소할 것이라고 우려를 표함.
     * 공격으로부터 보호하기 위한 다층적 접근 방식

     한 사용자는 자신이 만든 프롬프트를 통해 공격으로부터 보호하는 방법을 공유함. 입력된 내용을 특정 형식으로 재작성하고, 내용 정책에 따라 입력을 거부하거나 수락하는 다층적 접근 방식이 효과적이라고 설명함.
     * ""Pepsi, Where's My Jet?"" 사건과 유사한 에너지

     이 이야기가 ""Pepsi, Where's My Jet?"" 사건과 비슷한 분위기를 가지고 있다고 언급함. 관련 위키백과 링크를 제공함.
"
"https://news.hada.io/topic?id=12416","AMD의 CDNA 3 컴퓨트 아키텍처","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          AMD의 CDNA 3 컴퓨트 아키텍처

AMD의 CDNA 3 컴퓨트 아키텍처

     * AMD는 GPU 컴퓨트 시장 점유율을 높이기 위해 오랜 역사를 가짐.
     * Nvidia의 Tesla 아키텍처 이후, AMD는 계속해서 추격 중.
     * Terascale 3은 VLIW5에서 VLIW4로 변경하여 컴퓨트 워크로드에서 실행 유닛 활용도를 향상.
     * GCN은 Terascale을 대체하고 GPGPU 및 그래픽 애플리케이션 모두에 대해 일관된 성능을 강조.
     * AMD는 컴퓨트와 그래픽에 특화된 별도의 CDNA 및 RDNA 라인으로 GPU 아키텍처 개발을 분리.
     * CDNA 2는 AMD에 주목할 만한 성공을 가져옴. MI250X 및 MI210 GPU는 여러 슈퍼컴퓨터 계약을 수주.
     * CDNA 3는 AMD가 제공할 수 있는 모든 것을 앞세워 격차를 좁힘. MI300X는 정교한 칩렛 구성을 통해 고급 패키징 기술을 선보임.
     * 메모리 측면에서 RDNA 라인의 Infinity Cache가 CDNA 세계로 도입되어 대역폭 문제를 완화.
     * CDNA 3의 컴퓨트 아키텍처는 처리량과 활용도를 높이기 위한 중요한 세대 간 개선을 받음.

  GPU 레이아웃

     * AMD는 Ryzen 및 Epyc CPU에서 코어 수를 저렴하게 확장하기 위해 칩렛을 사용하는 전통을 가짐.
     * MI300X는 유사한 전략을 사용하며, XCD라 불리는 Accelerator Complex Dies로 컴퓨트를 분리.
     * 각 XCD는 코어 세트와 공유 캐시를 포함하며, MI300X는 총 8개의 XCD를 가지고 있어 304개의 Compute Units를 제공.
     * Nvidia의 H100은 132개의 Streaming Multiprocessors(SMs)를 가지며, 이를 프로그래머에게 하나의 큰 통합 GPU로 제시.
     * Intel의 Ponte Vecchio(PVC)는 Compute Tiles과 Base Tile을 사용하여 비슷한 기능을 제공하지만, EMIB 브리지의 대역폭 제한으로 인해 통합 GPU로서의 도전이 있음.

  대역폭 문제 해결

     * 컴퓨트는 수십 년 동안 메모리를 앞서고 있으며, GPU는 점점 더 정교한 캐싱 전략으로 이를 대응.
     * CDNA 2는 8 MB L2 캐시를 사용하고 HBM2e에 의존했지만, AMD는 RDNA(2)에서 사용된 ""Infinity Cache""를 추가.
     * Infinity Cache는 메모리 측 캐시로, 모든 메모리 트래픽은 Infinity Cache를 통과.
     * CDNA 3의 Infinity Cache는 대역폭 최적화를 위해 설계되었으며, 128개의 슬라이스로 구성되어 총 17.2 TB/s의 대역폭을 제공.

  Cross-Die 대역폭의 가능한 도전

     * MI300X의 Infinity Fabric은 4개의 IO 다이를 포함하며, 각각은 두 개의 HBM 스택과 관련 캐시 파티션에 연결됨.
     * 다이 간 연결의 대역폭이 단일 논리 GPU로 작동할 때 이론적인 Infinity Cache 대역폭에 도달하는 것을 제한할 수 있음.

  Cross-XCD 일관성

     * Infinity Cache는 일관성에 대해 걱정할 필요가 없지만, L2 캐시는 그렇지 않음.
     * AMD는 MI300X를 단일 큰 GPU로 노출하기 위해 Infinity Fabric의 Coherent Masters(CMs)와 Coherent Slaves(CS)를 사용.

  L2 캐시

     * 각 MI300X XCD는 4 MB L2 캐시를 포함하며, 이는 전통적인 GPU 캐시로서 중요한 역할을 함.

  L1 캐시

     * CDNA 3은 L1 캐시의 처리량을 두 배로 늘리고 용량을 16 KB에서 32 KB로 증가시킴.

  스케줄링 및 실행 유닛

     * 복잡한 칩렛 구성과 수정된 캐시 계층을 통해 AMD는 MI300X를 단일 GPU로 제시함.
     * CDNA 3은 FP32 유닛 활용에 어려움을 겪었던 CDNA 2의 코어 Compute Unit 아키텍처에 반복적인 개선을 함.

  행렬 연산

     * 행렬 곱셈은 기계 학습이 증가함에 따라 점점 더 중요해짐.
     * MI300X는 CU당 행렬 처리량을 두 배로 늘려 이전 CDNA 세대와 비교하여 성능을 향상시킴.

  명령어 캐시

     * CDNA 3은 명령어 캐시 용량을 64 KB로 늘리고, 연관성을 4-way에서 8-way로 두 배로 증가시킴.

  마지막 말

     * CDNA 3의 가장 큰 세대 변화는 메모리 계층에 있으며, Infinity Cache의 추가가 주요 개선 사항임.
     * AMD는 MI300을 하나의 큰 통합 가속기로 만들기 위해 다이 간 대역폭을 크게 증가시킴.

GN⁺의 의견

     * CDNA 3 아키텍처는 GPU 컴퓨팅 분야에서 AMD의 경쟁력을 강화하는 중요한 발전을 나타냄.
     * Infinity Cache의 도입은 메모리 대역폭 문제를 해결하는 혁신적인 접근 방식으로, 이는 특히 대규모 데이터 세트를 처리하는 고성능 컴퓨팅 애플리케이션에 중요함.
     * AMD가 MI300X를 단일 GPU로 제시하는 전략은 프로그래밍의 복잡성을 줄이고, 개발자들이 더 효율적으로 리소스를 활용할 수 있게 함으로써, AMD의 GPU 제품군이 더 넓은 시장에 호소력을 가질 수 있게 만듦.

        Hacker News 의견

     *

     AMD가 컴퓨팅과 그래픽을 위해 각각 전문화된 CDNA와 RDNA GPU 아키텍처 개발로 분기했다는 것을 알게 되었다.
          + AMD의 소비자용 그래픽 카드가 컴퓨팅 작업에 적합하지 않은 것은 아키텍처 차이 때문임을 이해함. 이는 고속도로에 진입로가 없는 것과 같은 문제로 보임.
     *

     많은 과학자들이 ML/AI 분야의 핵심 라이브러리 개발에 NVidia로부터 무료 혹은 할인된 GPU를 받고 있기 때문에, AMD가 가까운 미래에 NVidia와 경쟁하기 어려울 것이라고 생각한다.
          + NVidia가 학계에 침투하는 방식은 비윤리적이라는 의견 제시.
     *

     VLIW(Very long instruction word)에 대해 처음 알게 되었다.
          + VLIW는 명령어 수준 병렬성을 활용하기 위해 설계된 명령어 세트 아키텍처를 의미함. 기존 CPU가 순차적으로만 명령어를 실행하도록 허용하는 반면, VLIW 프로세서는 병렬 실행을 명시적으로 지정할 수 있음. 이는 다른 설계의 복잡성 없이 더 높은 성능을 제공하려는 의도임.
     *

     AMD가 칩렛과 버스 패브릭에 대한 지식을 활용하여 AI 분야에서 복귀할 것이라고 예측했던 것에 대해 자신의 의견을 표현함.
          + 해당 기사를 읽거나 일반적으로 읽는 것에 자신이 없음을 인정하며, 단지 자신의 견해를 표명하고 싶었음.
     *

     ""compute""라는 단어가 언제 명사로 사용되기 시작했는지에 대한 의문을 제기함.
          + ""compute""라는 단어의 명사 사용이 불편함을 표현함.
     *

     수십 년 동안 컴퓨트가 메모리를 앞지르고 있다. CPU처럼 GPU도 점점 더 정교한 캐싱 전략으로 이를 대응하고 있다.
          + CPU와 달리 GPU는 직접적인 대응을 시도하지 않고, 높은 대기 시간을 받아들이면서 훨씬 더 넓게 병렬화함으로써 '지연 시간 숨김' 효과를 제공함. 이는 GPU 코드 최적화에 관한 프레젠테이션에서 예시로 들 수 있음.
"
"https://news.hada.io/topic?id=12478","Microsoft, AI와의 페어프로그래밍을 위한 GitHub Copilot 마스터하기 강의 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Microsoft, AI와의 페어프로그래밍을 위한 GitHub Copilot 마스터하기 강의 공개

     * 약 10시간, 6개의 강의로 구성된 과정
     * GitHub Copilot과 AI 페어링 프로그래밍 리소스 활용에 대해 알아야 할 모든 것

강의 목차

    1. GitHub 소개 : 리포지토리, 브랜치, 커밋, 풀 리퀘스트
    2. GitHub 코드스페이스 소개 : 코드스페이스 만들기, 코드 푸시하기, 커스텀 이미지 선택하기, 코드스페이스 커스터마이즈 하기
    3. GitHub Copilot 소개 : 코드 및 주석 제안을 위해 Copilot AI가 생성한 코드가 포함된
       파일 만들기
    4. 자바스크립트에서 GitHub Copilot 활용하기 : 프롬프트 작성. GitHub Copilot을 사용하여 JavaScript 프로젝트를 개선
    5. Python에서 GitHub Copilot 활용하기 :프롬프트 작성. GitHub Copilot을 사용하여 Python 프로젝트를 개선
    6. GitHub Copilot으로 미니 게임 만들기 : GitHub Copilot을 활용하여 파이썬 기반 미니 게임을 빌드. 게임 로직을 통합하고 파이썬 기반 게임을 개선하기 위해 GitHub Copilot에서 유용한 제안을 생성할 수 있는 프롬프트를 작성

   Microsoft, Generative AI for Beginners 강의 공개
   Microsoft, ML for Beginners 강의 공개
   Microsoft, Web-Dev for Beginners 강의 공개
   Microsoft, IoT for Beginners 강의 공개
   MS Beginner's Series to: Rust
"
"https://news.hada.io/topic?id=12454","온라인에서 벌어지는 일을 아무도 모르는 현상","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        온라인에서 벌어지는 일을 아무도 모르는 현상

인터넷의 현재 상황에 대한 이해

     * 현재 인터넷은 역사상 가장 큰 규모로, 50억 명 이상의 사람들이 매일 생성하는 정보의 양은 이해할 수 없을 정도로 방대함.
     * 인터넷의 확장은 혼란스러워지고 있으며, 일부 미디어 종사자들은 인터넷이 '장소 없음'과 같이 더욱 덧없고, 심지어 '증발하는 듯한' 느낌을 받는다고 언급함.
     * 소셜 미디어 시대의 종말, 인공지능에 의한 합성 정보의 홍수, 구 웹의 죽음 등 다양한 이론이 있지만, 온라인에서 실제로 무슨 일이 일어나고 있는지 이해하기가 점점 더 어려워지고 있음.

인터넷에서의 인기와 추세에 대한 논의

     * 인터넷은 오래전에 단일 문화의 개념을 파괴했지만, 현재는 TikTok의 불투명한 추천 시스템, 유료 벽의 상승, 트위터의 붕괴, 소셜 미디어 사이트에서의 뉴스의 관련성 감소 등 새로운 복잡성이 추가됨.
     * 이러한 변화는 각 개인의 이념과 브라우징 습관에 따라 독특한 온라인 경험을 느끼게 함.
     * 인기의 개념조차도 논란의 여지가 있으며, 특정 추세가 정말로 바이럴인지, 모두가 그 게시물을 본 것인지, 아니면 단지 내 인터넷의 작은 구석에만 해당되는 것인지에 대한 의문이 생김.

GN⁺의 의견

     * 인터넷의 규모가 커지고 정보의 양이 폭발적으로 증가하면서, 전 세계적으로 공유되는 단일 문화나 추세를 파악하기가 점점 더 어려워지고 있음.
     * 개인화된 경험과 알고리즘에 의해 형성되는 정보의 거품은 우리가 온라인에서 무엇이 진정으로 인기 있는지, 무엇이 중요한지를 판단하는 데 혼란을 줌.
     * 이 글은 인터넷 사용자들에게 자신의 온라인 경험이 얼마나 주관적이며, 전체적인 인터넷 생태계에서 어떤 위치를 차지하고 있는지에 대한 흥미로운 통찰을 제공함.

        Hacker News 의견

     * 한 해커뉴스 사용자는 젊은 세대의 문화와 접점이 없음을 인지하고, 이는 세대 간 일반적인 현상이라고 생각하면서도, 실제로 어떤 것이 인기 있는지 알 방법이 없음을 깨달음.
          + 과거에는 새로운 라디오 채널을 듣거나 TV 프로그램을 보는 것으로 젊은이들의 취향을 알 수 있었지만, 현재는 Spotify가 추천하는 것이 실제 인기 있는 것인지, TikTok에서 보는 것이 젊은이들이 보는 것과 같은지 알 수 없음.
          + Reddit의 첫 페이지 콘텐츠가 젊은 세대의 생각을 반영하는지, 아니면 단순히 알고리즘의 피드백 루프 결과인지 불명확함.
          + 1900년대의 각 십년대는 뚜렷한 문화적 경향과 정체성을 가졌으나, 현재는 분열되어 있어서 이것이 좋은 것인지 나쁜 것인지 판단하기 어려움.
     * 또 다른 사용자는 인터넷의 재분화가 지난 십년간의 중앙집중화된 웹에 비해 상쾌한 변화라고 생각함.
          + 인기 있는 콘텐츠의 개념 자체가 논란의 여지가 있으며, 모든 사람이 그 콘텐츠를 보았는지, 아니면 단지 자신의 인터넷 구석에서만 인기 있는 것인지 의문임.
     * 한 사용자는 소셜 미디어가 사용자의 현실 인식에 미치는 영향에 대해 우려를 표함.
          + 소셜 미디어가 사용자를 '독성'으로 분류하고 그들의 게시물을 친구들에게서 숨기는 경우, 이는 사용자에게 친구들이 자신을 무시하는 것처럼 느껴지게 하여 우울감을 유발할 수 있음.
          + 소셜 미디어의 사용이 청소년들에게 불안과 우울증을 증가시킨다는 것은 명백한 사실임.
     * 또 다른 사용자는 바이럴 콘텐츠의 가치에 대해 회의적인 시각을 가지고 있음.
          + 사람들은 바이럴 콘텐츠의 중요성이 아니라 단순히 바이럴됨 자체에 가치를 두는 것에 대해 의문을 가지기 시작함.
          + 이 사용자는 소셜 미디어 사용을 의도적으로 줄이고 책 읽기와 대면 활동에 더 많은 시간을 할애함으로써 삶의 질을 향상시킴.
     * 한 사용자는 TikTok의 인기 동영상이 중동의 소식이나 Z세대의 댄스 트렌드가 아니라 메이크업 튜토리얼, 음식 ASMR, 거대한 집고양이를 보여주는 여성, 천장을 아이언맨처럼 스프레이로 칠하는 남성의 클립이라고 언급함.
          + 이 사용자는 현재의 바이럴 콘텐츠가 알고리즘에 의해 완전히 통제되고 있으며, 이는 초기 인터넷 역사의 일시적인 현상이었다고 생각함.
          + 너무 많은 콘텐츠가 있고 모두 비슷하며 창의성이 부족하다고 느낌.
     * 또 다른 사용자는 인터넷이 자신의 실제 삶과 관심사와 넓은 사람들과의 교류를 가능하게 하는 전문화된 온라인 커뮤니티로 구성되어 있음을 밝힘.
          + 이 사용자는 대부분의 소셜 미디어에 참여하지 않으며, Facebook과 Instagram을 주로 생활용품 광고와 디자인 아이디어 공유 목적으로 사용함.
     * 한 사용자는 현재의 세계에서는 다른 사람들이 소비하는 것에 대해 전혀 모르고 살기가 더 쉬워졌다고 언급함.
          + 개인의 취향에 맞춘 맞춤형 콘텐츠 생성이 증가하고 있으며, 이는 개인의 창의성 폭발로 이어질 수 있음.
          + 미래에는 뇌의 다운로드를 통해 개인에게만 최적화된 콘텐츠가 생성될 것이며, 이는 사회에 좋은 것인지에 대한 도덕적 논쟁은 하지 않음.
     * 마지막 사용자는 현재의 인터넷 콘텐츠가 수많은 카운터컬처에 의해 주류 문화를 잠식하고 있다고 주장함.
          + 수백만 명의 콘텐츠 제작자들이 관심을 끌기 위해 경쟁하고 있으며, 관객을 얻기 위해서는 독특하고 흥미로운 것이 필요함.
          + '피자 쥐'와 'Dat boi' 같은 인터넷 현상이 마지막으로 모두가 같은 것을 보았던 시절을 회상함.
"
"https://news.hada.io/topic?id=12445","Jepsen의 MySQL 8.0.34 평가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Jepsen의 MySQL 8.0.34 평가

MySQL의 배경

     * MySQL은 지난 28년 동안 가장 널리 배포된 SQL 데이터베이스 중 하나임.
     * 주로 온라인 트랜잭션 처리(OLTP)에 사용되며, OLAP 및 큐잉 시스템의 일부로도 배포됨.
     * 단일 서버 데이터베이스로 설계되었으나, 다양한 멀티 노드 복제 방식으로 확장됨.
     * InnoDB 스토리지 엔진을 사용하는 MySQL에 대해 집중적으로 분석함.

ANSI SQL 격리 수준은 실제로 나쁨

     * SQL 격리 수준의 미묘함을 논의하기 위해, 1977년에 제안된 트랜잭션 일관성의 네 가지 안전 수준과 1986년 ANSI가 발표한 SQL 표준의 역사적 배경 설명 필요.
     * ANSI SQL은 격리 수준을 세 가지 가능한 현상(더티 리드, 논리피트 리드, 팬텀)을 통해 정의함.
     * 1995년에 ANSI SQL 격리 수준의 결함이 지적되었고, 1999년에 Adya는 ANSI SQL의 격리 수준에 대한 형식적이고 구현 독립적인 정의를 개발함.

MySQL의 격리 수준

     * MySQL 문서는 SQL:1992 표준에 의해 설명된 네 가지 트랜잭션 격리 수준을 제공한다고 함.
     * 각 격리 수준에서 MySQL이 어떻게 이를 달성하는지에 대한 설명이 포함됨.
     * MySQL의 Repeatable Read 격리 수준은 스냅샷 메커니즘을 통해 안전성을 보장함.

테스트 설계

     * Jepsen 테스트 라이브러리를 사용하여 MySQL에 대한 테스트 스위트 설계.
     * 단일 MySQL 노드 및 binlog 복제 클러스터, AWS RDS 클러스터 등 다양한 환경에서 테스트 수행.
     * Elle의 list-append 검사기를 사용하여 트랜잭션 격리에 대한 주요 워크로드 수행.

결과

     * MySQL의 Repeatable Read는 Adya의 PL-2.99 격리 수준이 금지하는 G2-item을 허용함.
     * MySQL의 Repeatable Read는 또한 G-single(읽기 왜곡)을 허용함.
     * MySQL의 Repeatable Read는 P4(잃어버린 업데이트) 현상을 허용함.
     * MySQL의 Repeatable Read는 내부 일관성 오류를 보임.
     * MySQL의 Repeatable Read는 Monotonic Atomic View를 위반함.

   GN⁺의 의견
     * MySQL의 Repeatable Read 격리 수준이 표준에 명시된 것과 다른 동작을 보이는 것은 개발자와 데이터베이스 관리자에게 중요한 정보임. 이는 데이터 일관성과 격리에 대한 기대를 충족시키지 못할 수 있음을 의미함.
     * 테스트 결과는 데이터베이스 시스템의 격리 수준을 이해하고 적절한 격리 메커니즘을 선택하는 데 필수적인 정보를 제공함.
     * 이러한 발견은 데이터베이스의 격리 수준과 관련된 표준이 실제 구현과 어떻게 다를 수 있는지에 대한 통찰력을 제공함. 이는 데이터베이스 기술의 복잡성과 격리 수준의 미묘한 차이를 이해하는 데 도움이 됨.

        Hacker News 의견

     * ""repeatable read""가 나쁜 아이디어라고 오랫동안 주장해왔음. 구현이 완벽하더라도, 데이터베이스에서 올바르게 작동하더라도 복잡한 쿼리를 다룰 때 이해하기 어려움.
          + 두 가지 격리 수준이 의미가 있다고 생각함:
               o read committed
               o serializable
          + serializable 설정은 예상치 못한 일이 없음. read committed 방향은 데이터에 일관된 뷰를 원하면 행을 읽기 시작하기 전에 잠가야 한다는 것이 명백함.
          + read committed는 일반 멀티스레드 코드와 메모리 관리와 매우 유사하여 대부분의 엔지니어가 직관적으로 이해할 수 있음.
          + serializable은 매우 엄격해서 예상치 못한 실수를 하기 어려움.
          + 중간 수준은 아무도 속하지 않는 땅이며, Read Committed보다 덜 일관된 것은 더 이상 데이터베이스가 아님.
     * FOSSDEM-2024에서 ""Isolation Levels and MVCC in SQL Databases: A Technical Comparative Study"" 발표 예정.
          + Oracle, MySQL, SQL Server, PostgreSQL, YugabyteDB 비교 연구.
     * AWS RDS에 대한 글을 평가하고 있으나, AWS Aurora (MySQL)에 대한 초점이 있는지 궁금함. AWS는 MySQL이나 PostgreSQL인 척하는 데이터베이스 플랫폼을 구축함. Aurora MySQL이 RDS나 MariaDB와 같은 ""기능""을 가지고 있는지 보는 것이 흥미로울 것임.
     * 많은 일관성 아티팩트를 보여주는 기반 위에 구축된 ""실제로 작동하는 시스템""들을 보여주는 훌륭한 예시라고 생각함.
     * RDS 복제가 5분 만에 작동을 멈추고 건강 검사 실패 알림이 없는 것이 다소 걱정됨.
     * append (a)가 주어진 테이블에서 실제 SQL 작업에 어떻게 매핑되는지, TEXT 필드가 리스트로 사용되는지 궁금함.
          + MySQL의 repeatable read 모드에서 단일 SELECT가 단일 행을 선택하고 불가능한 결과를 반환한 문제가 있었음. 예를 들어, SELECT min(value), max(value) FROM table WHERE id = 1;에서 id가 기본 키인데 min과 max에 대해 서로 다른 값을 얻은 적이 있음.
     * 이론적인 격리 모드 정의와의 비교뿐만 아니라 PostgreSQL, MS SQL, Oracle과 같은 다른 인기 있는 관계형 데이터베이스와의 비교가 도움이 될 것임. 개발자들이 호환성을 확보하고자 할 때 염두에 둬야 할 사항임.
     * ""SELECT ... FOR UPDATE""가 이러한 모든 문제에 대한 해답인 것 같음, 업데이트할 행을 잠그면 모든 것이 광고된 대로 작동함.
     * 오늘 일을 좀 하려고 했는데, aphyr의 'call me maybe'와 jepsen.io는 인터넷에서 읽은 최고의 콘텐츠 중 일부임에 감사함.
     * MySQL 분석 내용 중 얼마나 많은 부분이 기본 스토리지 엔진으로 InnoDB를 사용하는 MariaDB에 대해 동일할지 궁금함.
"
"https://news.hada.io/topic?id=12428","팀 쿡에게 이메일을 보낸 후 내 맥북의 복구 성공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      팀 쿡에게 이메일을 보낸 후 내 맥북의 복구 성공

맥북의 잠금 해제: 팀 쿡에게 이메일을 보내다

     * 토쿄데브의 창립자인 폴 맥마흔은 분실 후 돌아온 맥북이 활성화 잠금 상태였고 애플이 이를 해제해주지 않았던 경험을 공유했음.
     * 맥마흔은 해커 뉴스 상단에 자신의 기사가 올라가길 바랐지만 애플로부터 연락은 없었음.
     * 일본의 영어 사용 소프트웨어 개발자 커뮤니티 디스코드 서버에서 한 모더레이터가 tcook@apple.com으로 이메일을 보내는 것이 과거에 효과가 있었다고 제안함.

맥북 잠금 해제 과정

     * 폴 맥마흔은 다른 방법이 무위로 돌아가자 팀 쿡에게 이메일을 보내 활성화 잠금에 대한 지원 거부에 대해 호소함.
     * 네 영업일 후 일본의 팀 쿡의 집행 보조원으로부터 답변을 받고 이후 2주간 이메일과 전화 통화를 통해 상황을 해결함.
     * 보조원은 맥북이 8월 중순에 초기화되었고 새로 생성된 iCloud 계정으로 분실 신고되었다고 설명함.
     * 제공된 증빙 문서 덕분에 맥마흔의 맥북임을 확신하고 잠금을 해제해줌.

맥북에 실제로 무슨 일이 있었나

     * 맥마흔은 이미 대체 기기를 구입했지만 원칙적인 문제와 궁금증 해결을 위해 맥북의 잠금 해제를 추진함.
     * 애플은 맥북이 어떻게 잠겼는지는 설명해주었지만 왜 그런 일이 발생했는지는 알려주지 않음.
     * 맥북을 돌려준 사람에게 연락하여 상황을 파악한 결과, 그 사람은 맥북을 상점에 가져가 잠금 해제를 요청했으나 상점은 초기화만 하고 잠금 해제는 하지 않았음.

애플은 이것을 보안 취약점으로 간주하지 않지만, 아마도 그래야 할 것

     * 맥북을 처음 활성화할 때 FindMy 설정을 건너뛰기 쉽지만, 그렇게 하지 않을 경우 심각한 결과를 초래할 수 있음.
     * 맥마흔은 자신의 사례가 예외적이었지만 비양심적인 상점이 다른 사람들에게도 같은 일을 할 수 있다고 지적함.
     * 애플 보안 연구에 문제를 보고했지만 ""보고서에서 보안 문제를 식별할 수 없다""며 기각됨.

GN⁺의 의견

     * 이 사례는 소비자가 기술적 문제에 직면했을 때 고위 경영진에게 직접 연락하는 것이 유용할 수 있음을 보여줌.
     * 애플의 활성화 잠금 정책과 고객 지원의 한계에 대한 중요한 통찰을 제공하며, 이는 다른 사용자들에게도 영향을 미칠 수 있음.
     * 이 기사는 기술 기업의 고객 서비스 정책과 보안 취약점에 대한 인식이 어떻게 개선될 수 있는지에 대한 논의를 촉발할 수 있음.

        Hacker News 의견

     * 사용 가능한 상태로 복원된 기계에 대해 기쁘다는 의견이 있음. 과거에 도난당한 노트북이 1000개 조각으로 돌아온 경험을 언급하며, 이는 기업이 고객에게 강요하는 인위적인 문제라고 지적함. 사용자가 자신의 기기에 대한 개인 키를 갖고 있지 않아, 결국 기기 사용이 부유하고 무관심한 이들의 호의에 달려 있다고 비판함.
     * 제품 문제를 지원팀이 해결하지 못할 때, CEO의 연락처를 구매하여 직접 연락하는 방법을 사용한다고 언급함. 구글 집단 소송 지급과 관련하여 이 방법을 사용해 빠르게 해결했지만, Cash App에서는 이 방법이 역효과를 냈다고 함. 구글 계정 접근 문제를 해결하기 위해 Sundar Pichai의 연락처를 구매하는 데 드는 비용에 대해 궁금해함.
     * 개인적으로 더 이상 MacBook을 구매하지 않는 이유를 설명함. 2019년에 3천 유로 이상을 지불했지만, 보증 기간이 끝나기 직전에 스페이스바가 고장나고, 1년 후에는 배터리 교체 비용이 매우 비싸서 비공식 수리점에서 수리를 받았으나, 이후 애플에서 공식 수리를 거부하여 MacBook이 사용 불가능한 상태가 됨을 경험담으로 공유함.
     * Apple로부터 AirPod Max를 수리 받았으나, iCloud 계정과 연결되어 있어 추적 가능한 상태였다고 함. 이 문제를 Tim Cook에게 이메일로 문의했고, Apple의 고위팀으로부터 연락을 받아 문제를 해결했지만, 비수리 제품을 받지 못하고 추적 가능성에 대해서는 사과만 받았다고 함.
     * OP가 Tim Cook의 집행팀으로부터 문제 해결을 받은 것은 기쁜 일이지만, 이는 개인의 실제 정체성을 디지털 정체성 및 기기와 연결하는 메커니즘이 필요함을 시사함. 정부 자격증명을 제공하여 신뢰할 수 있는 인증 과정을 통해 기기나 계정에 접근할 수 있어야 함을 주장함.
     * 모든 기업은 인간 대 인간의 상호작용을 통해 고객 서비스를 제공할 수 있어야 한다고 강조함. ""우리는 너무 커서 인간 고객과 대화할 수 없다""는 태도가 정상화되는 것은 역행하는 추세라고 비판함.
     * 도난당한 Apple ID를 Tim Cook이 되찾아줄 수 있을지 궁금해하는 의견이 있음. 도둑이 휴대폰을 훔쳐 신뢰할 수 있는 전화번호를 변경하고 계정에서 잠금을 설정했으며, Apple 지원팀이 이 문제를 해결해주지 못했다고 함. 구매한 앱과 수년간의 사진을 잃은 경험을 공유함.
     * MacBook을 처음 활성화할 때 'FindMy' 설정을 건너뛰기 쉽게 만들어져 있지만, 이로 인한 심각한 결과를 고려할 때, 설정 워크플로우를 수정하거나 잠금 정책을 전반적으로 재검토할 필요가 있다는 제안이 있음.
     * 기기를 판매한 후 다시 도난당하고 Apple에 잠금 해제를 요청하는 것을 방지하기 위한 정책이라는 의견이 있음.
     * 활성화 잠금과 유사한 기능에 만료 기간을 설정해야 한다는 의견이 있음. 이는 로그아웃하지 않은 완벽하게 작동하는 컴퓨터로 인한 불필요한 전자 폐기물을 크게 줄일 것이라고 주장함.
"
"https://news.hada.io/topic?id=12482","HN 공개: 내 게임 엔진 오픈 소스화","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HN 공개: 내 게임 엔진 오픈 소스화

Moddio 게임 엔진 2

     * Moddio는 멀티플레이어를 우선으로 하는 게임 엔진임.
     * 서버 권한을 가진 네트워크 코드, 스냅샷 보간, 클라이언트 측 조정 기능을 내장하고 있음.
     * 월 5달러짜리 VM에서 50명 이상의 동시 플레이어 또는 300개 이상의 움직이는 객체를 지원함.

데모

     * 박스에 포함된 내용: Box2D 물리 엔진, 서버 권한을 가진 네트워크 코드, 인벤토리 및 아이템 시스템, 내장 속성(HP, 에너지 등)과 재생률, 대화 시스템, 상점, 유닛 컨트롤, 클라이언트 측 예측된 발사체 및 유닛 이동, 유닛 AI 및 A* 경로 찾기, 모바일 컨트롤 등.

게임 실행 방법

     * Node 18 이상이 필요함.
     * 저장소 설정 후, /src 디렉토리로 이동하여 game-sample.json을 game.json으로 이름을 바꾸고, 루트 디렉토리로 돌아와 서버를 실행함.
     * 이제 http://localhost:80에서 게임을 플레이할 수 있음.

새 게임을 처음부터 만드는 방법

     * Moddio 게임은 https://www.modd.io에서 제공하는 Moddio 게임 에디터를 사용하여 생성 및 편집됨.
     * 게임을 만든 후, 로컬 설치에서 사용할 수 있는 game.json을 내보낼 수 있음.
     * 내보낸 게임 JSON을 game.json으로 이름을 바꾸고 ./src 디렉토리로 이동함.

기여하는 방법

     * Moddio는 MIT 라이선스 하에 완전히 무료이며 오픈 소스임.
     * 기여자가 되는 방법에 대해 알아보려면 기여 방법 페이지를 방문함.

크레딧

     * Isogenic 게임 엔진, Phaser, PlanckJS, uWebsocket, Box2D, Kenney 자산, Hero Icons 등이 사용됨.

GN⁺의 의견

     * Moddio 게임 엔진은 멀티플레이어 게임 개발에 특화되어 있으며, 저렴한 비용으로 많은 플레이어를 지원하는 강력한 기능을 제공함.
     * 오픈 소스이며 커뮤니티의 기여를 통해 지속적으로 발전하고 있어, 초급 소프트웨어 엔지니어들에게도 접근성이 좋음.
     * 게임 개발에 필요한 다양한 기능들이 내장되어 있어, 개발자들이 빠르게 프로토타입을 만들고 테스트할 수 있는 환경을 제공함.

        Hacker News 의견

     * 안드로이드 앱 가입 페이지에서 Google 사용자 이름과 비밀번호를 앱 내부의 웹 폼처럼 보이는 곳에 입력하도록 요구하는 것에 대한 우려
          + 앱이 비밀번호를 엿보는지 사용자가 알 수 없음
          + 앱이 로그인 페이지로 이동했다가 돌아오는 일반적인 패턴 구현이 어려운 것인지, 플랫폼 간 지원 문제인지에 대한 질문
     * 게임 엔진 사용자 확보는 쉽지 않은 일이며, 특히 폐쇄 소스일 경우 더욱 그러함
          + 사이트에 있는 게임 갤러리를 통해 어떻게 잘 관리해왔는지, 몇몇 친구들의 작품인지 아니면 활발한 커뮤니티의 산물인지에 대한 질문
     * modd.io가 IO 게임을 만드는 데 사용되는 인기 있는 프레임워크/플랫폼이라는 사실에 대한 놀라움 표현
     * 게임을 완성하지 못하는 확실한 방법 중 하나는 엔진 작성부터 시작하는 것임
          + 자체 기술을 만들 수는 있지만, 그 기술은 프로젝트에 맞춰져야 하며, 일반적인 게임 플랫폼이 아니어야 함
     * Brains 서버에 참여하여 50명 정도의 플레이어 경험에 대한 호기심
          + 웹소켓으로 인한 움직임의 불안정함
          + 네트워킹 압축에 대한 궁금증, 특히 LZ-string 압축의 충분성에 대한 의문
          + 클라우드 대역폭 비용이 많이 들 수 있으므로 네트워킹 측면에서 개선의 여지가 많음
     * 새로운 엔진을 만드는 동기에 대한 질문
          + 엔진에 특정 기능을 내장한 이유, 예를 들어 무기 시스템, 상점, 클라이언트 측 예측 발사체 및 유닛 이동 등
          + 이러한 기능들이 게임 엔진에 필요한 것인지, 특정 장르의 게임 엔진인지에 대한 의문
     * 취미 프로젝트에 적합해 보이는 저코드 및 인터랙티브 에디터의 장점
          + 지도 및 세계 생성에 대한 흥미
          + JSON으로 게임을 내보내고 프로그래밍 방식으로 편집한 후 다시 가져오는 것이 최선의 방법인지에 대한 질문
          + JSON을 이해하고 수정하는 방법에 대한 두려움과 접근 방식에 대한 제안
     * Node.js 기반 멀티플레이어 백엔드가 연결 수가 증가함에 따라 점점 느려질 수 있다는 지적
          + 이 문제를 해결한 방법과 Go와 같은 대안에 대한 질문
     * 오픈 소스 프로젝트에 대한 감사의 표현과 연말 휴가 동안 코드를 자세히 살펴볼 계획
     * AI 에이전트를 NPC로 만드는 작업에 유용할 수 있으며, 작업을 오픈 소스로 제공해준 것에 대한 감사 표현
"
"https://news.hada.io/topic?id=12395","LLM을 이용한 한줄짜리 Bash 스크립트들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        LLM을 이용한 한줄짜리 Bash 스크립트들

     * 파일 하나로 LLM을 실행하는 llamafile을 이용해서 유용한 쉘 스크립트를 작성
     * 이미지 요약하기 : 이미지에 대한 설명을 출력 (LLAVA 모델)
     * 파일이름 생성 : 이미지 파일의 내용을 요약해서 파일 이름으로 지정 (LLAVA 모델)
     * URL 요약 : URL을 넘겨서 웹 페이지의 내용을 요약하기 (Mistral 7B Instruct 모델)
     * Librarian Chatbot : 원하는 어조로 대화하는 챗봇 만들기 (오리지널 LLaMA 모델)
     * 코드 자동완성 : Emacs나 Vim에서 현재 라인을 자동 완성하도록 설정 (Wizard Coder 모델)
     * Email 작성 : Rocket 3b 모델로 메일 내용 자동 작성

   llamafile - 단일 파일로 LLM 배포 및 실행 하기
"
"https://news.hada.io/topic?id=12372","SSH3: HTTP/3 및 QUIC을 사용하는 SSHv및 QUIC을 사용하는 SSHv2

SSH3: HTTP/3를 사용하는 더 빠르고 풍부한 보안 쉘

     * SSH3 개요: SSH3는 SSH 프로토콜을 전면적으로 재검토하여 HTTP 메커니즘 위에 그 의미를 매핑함. SSH3는 안전한 채널 설정을 위해 QUIC+TLS1.3을 사용하고 사용자 인증을 위해 HTTP 인증 메커니즘을 활용함.

SSH3는 더 빠름

     * 세션 설정 속도: SSH3는 SSHv2에 비해 세션 설정이 훨씬 빠름. SSHv2는 5~7번의 네트워크 왕복 시간이 필요하지만, SSH3는 단 3번의 왕복 시간만 필요함.

SSH3는 안전함

     * 보안 메커니즘: SSH3는 TLS 1.3, QUIC, HTTP와 같은 강력하고 오랜 시간 검증된 메커니즘에 의존함. 이 프로토콜들은 이미 인터넷상의 보안이 중요한 애플리케이션들에 널리 사용됨.

SSH3 공개 서버는 숨길 수 있음

     * 서버 숨김: SSH3 서버는 비밀 링크 뒤에 숨겨져 있으며, 특정 링크로 HTTP 요청을 한 인증 시도에만 응답함. 이를 통해 인터넷 사용자들로부터 SSH3 서버를 보이지 않게 할 수 있음.

SSH3는 이미 기능이 풍부함

     * 새로운 기능: UDP 포트 포워딩, X.509 인증서 사용, 서버 숨김, 키 없는 사용자 인증(OpenID Connect) 등이 가능함.
     * OpenSSH 기능 구현: ~/.ssh/authorized_keys 파싱, ~/.ssh/config 파싱, 인증서 기반 서버 인증, known_hosts 메커니즘, ssh-agent 자동 사용, SSH 에이전트 포워딩, TCP 포트 포워딩 등 OpenSSH의 인기 있는 기능들을 구현함.

SSH3 설치하기

     * 소스에서 컴파일: 최신 Golang 버전이 필요하며, 소스 코드를 다운로드하고 바이너리를 컴파일하는 단계를 거침.
     * SSH3 서버 배포: SSH3 서버를 호스트에 배포해야 하며, X.509 인증서와 개인 키가 필요함. ssh3-server 실행 파일 사용법이 제공됨.
     * SSH3 클라이언트 사용: SSH3 서버가 실행되면, SSH3 클라이언트를 사용하여 연결할 수 있음. ssh3 실행 파일 사용법이 제공됨.

  GN⁺의 의견

     * 중요성: SSH3는 기존 SSH 프로토콜에 비해 빠른 세션 설정과 보안 강화를 제공함. 특히 HTTP/3 기반의 새로운 인증 방식과 서버 숨김 기능은 보안에 큰 이점을 줌.
     * 흥미로움: 기존의 SSH 사용자들에게는 OpenSSH의 인기 있는 기능들을 그대로 사용할 수 있다는 점이 매력적임. 또한, UDP 포트 포워딩과 같은 새로운 기능들은 네트워크 관리자와 사용자들에게 새로운 가능성을 열어줌.
     * 재미: SSH3의 실험적인 특성과 새로운 기능들은 IT 전문가들에게 새로운 도구를 탐색하고 실험하는 즐거움을 제공함. OpenID Connect를 통한 키 없는 인증 방식은 사용자 경험을 혁신적으로 바꿀 수 있는 잠재력을 가짐.

        Hacker News 의견

     * SSH over QUIC에 대한 의견이 다양함:
          + 한 사용자는 SSH over QUIC가 매우 합리적이라고 생각하며, TCP 대신 UDP 위의 QUIC 채널을 사용하는 것에 대해 긍정적인 견해를 표현함. 그러나 HTTP/3가 여기에 어떻게 맞는지, 단순히 오버헤드를 추가하는 것이 아닌지 의문을 제기함.
          + 다른 사용자는 HTTP와 SSH의 보안 모델이 다르다고 지적하며, QUIC가 HTTP에는 적합하지만 SSH에 대해서는 확신할 수 없다고 언급함. 또한, x509 인증서나 OAuth와 같은 기술이 SSH에 적합하지 않을 수 있다고 우려함.
          + 또 다른 사용자는 HTTP/3를 추가하는 것이 SSH 서버를 URL 경로로 ""숨기는"" 것 외에는 이점이 없다고 생각하며, 기존의 SSH 호스트키나 SSHFP, TOFU가 더 안전하다고 주장함.
          + 한 사용자는 이 프로젝트가 OpenSSH나 IETF의 SSH3 RFC와 관련이 없는 개인 프로젝트라고 지적함.
          + SSH 프로토콜의 버전 3에 대한 희망사항을 언급하는 사용자도 있으며, 암호화된 SNI나 표준화된 메타데이터 블록이 필요하다고 주장함.
          + WebSocket을 통한 SSH 사용 경험을 공유하며, 다양한 전송 방식을 지원하는 것에 대한 관심을 표현하는 사용자도 있음.
          + QUIC의 잠재적인 이점을 보여주는 벤치마크가 부족하다고 지적하는 사용자가 있으며, OpenSSH의 고정된 윈도우 크기가 대역폭을 제한한다고 언급함.
          + SSHv2 over HTTP/3에 대한 설명과 함께, 다양한 SSH 서버와 클라이언트가 존재하며, 이 프로젝트가 새로운 암호화를 도입하지 않았다고 설명하는 사용자가 있음. 이 사용자는 또한 프로젝트가 성공하기를 바라며, OpenSSH의 변화에 대한 저항성을 비판함.
          + WebSocket 프로토콜을 통한 UDP나 TCP 터널링에 대한 정보를 공유하는 사용자도 있음.
          + HTTP/3를 통한 SSH 연결이 표준 웹사이트 트래픽처럼 보일 수 있으며, 중국의 방화벽을 우회할 수 있는 가능성에 대해 언급하는 사용자가 있음.

   이러한 다양한 의견들은 SSH over QUIC의 개념에 대한 흥미로운 토론을 제공하며, 기술적인 장단점과 보안 측면에서의 고려사항을 다루고 있음.
"
"https://news.hada.io/topic?id=12396","창업자를 위한 AI 스펙트럼","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            창업자를 위한 AI 스펙트럼

AI 스펙트럼 5단계

     * 레벨 1: AI 강화 기업 - 기존 프로세스 향상을 위한 AI의 기본적인 사용
     * 레벨 2: AI 제품 확장 - 이미 시장에서 입지를 확립한 기업들이 AI를 활용하여 인접 시장을 장악
     * 레벨 3: AI 가능 기업 - 중앙 알고리듬을 통해 데이터로부터 학습하고 추가 제품을 창출
     * 레벨 4: AI가 제품인 기업 - AI를 중심으로 큰 문제를 해결하는 기업들
     * 레벨 5: AI 우선 기업 - AI 없이는 불가능한 새로운 기업 및 제품 창출

수평 시장에서의 AI

     * 영업, 마케팅, 소프트웨어개발, 고객 운영, 크리에이티브 같은 대규모 수평 시장에서도 새로운 AI 플랫폼 기업들이 등장할 것
     * 문제는 기존 대기업이 존재한다는 것인데, 분야가 방대하기 때문에 기존 대기업들과의 경쟁 속에서도 스타트업이 틈새 시장에서 성공할 가능성이 있음
     * 틈새 시장에 대한 고유한 통찰력을 가지고 그 통찰력을 바탕으로 틈새 시장에 더 나은 서비스를 제공하는 기술 기업가에게 보상을 제공할 것

AI Leapfrogging(도약) 살펴보기

     * 기술 변화 과정에서 단계를 건너뛰는 AI 도약(기술 혁신 사슬에서 한단계를 건너뜀)이 일어날 산업 분야들이 있음
     * 이러한 산업은 역사적으로 디지털화되지 않았고 지배적인 클라우드 기업이 존재하지 않음
          + 예를 들어, 미국 법률 서비스 시장은 3,730억 달러, 미국 제조업 시장은 7조 2,000억 달러에 달함
     * 두가지 일이 일어날 것
          + 첫째, AI를 통해 향상된 제품 경험을 제공함으로써 이러한 업계의 내부 영업 및 도입 마찰을 극복할 수 있음
          + 둘째, 보다 수직적으로 집중하는 새로운 비즈니스도 등장할 것. AI 제품을 쐐기로 삼아 산업의 많은 부분을 디지털화하고 혁신할 것
     * 또한 많은 AI 선도 기업들과 강력한 네트워크 효과가 발생할 가능성도 있음
          + 특히, 가치 사슬에서 중요한 제어점 역할을 하는 임베디드 소프트웨어가 포함된 사용 빈도가 높은 제품의 경우 더욱 그러함

AI 소비자 계층

     * AI를 통해 새로운 소비자 기업들이 출현할 가능성이 있음
          + 이는 마치 아이폰에서 시작된 소비자 앱의 폭발적인 증가와 매우 유사
          + 대형 모바일 네이티브 앱은 아이폰이 출시된 지 약 1년 반 후부터 약 5년 동안 이어진 앱 개발의 황금기에 등장
          + 이 시기에 WhatsApp, Uber, Pinterest, Instagram, Snap, DoorDash가 등장했음
     * AI도 마찬가지
          + 창업자와 개발자는 새로운 기술이 출시된 지 1년 정도 지나면 그 제품과 설계의 가능성을 제대로 이해하기 시작
          + 현재도 AI 소비자 애플리케이션 계층이 발전하고 있지만, 진정으로 획기적인 레벨 5 AI 퍼스트 기업이 등장하면 이 생태계가 본격적으로 활성화될 것으로 예상
          + 향후 2년 내에 다양한 니즈에 맞춰 수만 개의 애플리케이션이 개발될 것이며, 그 중 일부는 지금 당장은 상상할 수 없을 것
     * AI 기술을 활용하여 다양한 소비자 애플리케이션 개발이 될 것으로 예상
          + 수십억 달러 규모의 비즈니스를 창출할 수 있는 잠재력을 가지고 있음
          + 이전 기술 시대에 장기적인 방어력을 만들어낸 네트워크 효과를 이해하는 것이 특히 중요

""AI 기업""에 대한 우리(NfX, 시드 투자 전문 VC) 의 관점

     * 모든 기업이 AI 기술을 적용할 것으로 기대
     * AI를 위한 AI에는 관심이 없음
     * 과대광고로 인해 기업가치가 지나치게 부풀려지거나, 진정한 비즈니스 원칙이나 네트워크 효과가 나중에 기업의 성패를 좌우할 수 있다는 점을 간과하지 않음
     * 중요한 AI 요소를 갖춘 회사를 볼 때마다 우리는 다음과 같은 질문을 던짐
          + 빠르고 뛰어난 팀인가요? 우리는 빠르고, 기술적이며, 무엇보다도 독특한 시장 통찰력을 갖춘 팀을 원합니다. 이 업계의 속도를 고려할 때 속도는 절대적인 필수 요소입니다.
          + 경제적 해자는 얼마나 튼튼한가요? 많은 AI 제품이 상품화되는 과정에 있습니다. 우리는 대규모 시장에서 높은 지불 의사를 가진 고객을 끌어들일 수 있는 제품을 보고 싶습니다.
          + 초기 시장 기회는 얼마나 분명한가요? 제너레이티브 AI의 폭발적인 성장으로 인한 초기 수익의 대부분은 기존 기업에게 돌아갈 것입니다. 현재로서는 스타트업이 직교 혁신을 추구해야 합니다. 우리는 초기 시장이 매력적이고, 기존 기업의 활동이 제한적이며, 판매 주기가 간단한 기업을 보고 싶습니다. 빠르게 구현하고 고객에게 가치를 빠르게 보여줄 수 있어야 합니다.
          + 장기적인 방어 가능성은 무엇인가요? 독점 데이터를 보유하고 있으며, 출시 첫날부터 네트워크 효과를 제품에 반영하는 방법에 대해 생각해 보았나요? 기존 업체들은 이 분야에서 어떤 위치에 있으며, 기회를 포착하기에 더 나은 위치에 있는가, 아니면 더 나쁜 위치에 있는가?
          + 공정한 가치 평가: 가치평가를 살펴볼 때는 제너레이티브 AI에 대한 과대광고와 관계없이 장기적으로 비즈니스를 대표할 수 있는 가치인지 묻습니다.
          + 획기적인 제품: AI를 위한 AI에 불과한 제품인가요? 아니면 획기적인 제품이 있을까요?

AI 언더그라운드가 성숙해지고 잇음

     * 작년까지만 해도 제너레이티브 AI라는 용어를 들어본 사람은 거의 없었으나, AI 언더그라운드가 등장.
     * 1년이 지난 지금도 여전히 초기 단계지만 변화가 시작되고 있음
     * 기술은 100배 더 좋아지고 100배 더 빨라질 것
     * 지금이야말로 진지한 창업자들이 뛰어들어야 할 중요한 순간이고, 크고 지속적인 제너레이티브 AI 아이디어가 이 분야에 진입하기 시작할 때
"
"https://news.hada.io/topic?id=12479","애드블로커 사용 권리","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              애드블로커 사용 권리

사용자의 자유를 해제하다: 광고 차단기 사용권

     * 온라인 콘텐츠와의 상호작용을 통제하려는 기업들의 시도 증가로 인해 사용자의 자유가 위협받음.
     * 브라우저 확장 프로그램 및 기타 서드파티 소프트웨어 사용을 제한하려는 기업들이 늘어나는 가운데, 독일에서의 광고 차단기 관련 두 건의 법원 판결이 기술에 대한 사용자 통제에 대한 법적 근거를 강화할 수 있음.

광고와 우리의 삶

     * 디지털 세계에서 광고는 웹사이트, 검색 결과, 온라인 뉴스 등 우리가 접하는 곳곳에 존재함.
     * 많은 광고를 받는 것에 지친 일부 사용자들은 광고 차단기를 설치하여 이를 피하려고 시도함.
     * 광고 차단기 사용이 시장 자율성을 제한하는 행위인지, 아니면 사용자의 자유를 달성하는 데 도움이 되는지에 대한 법적인 문제 제기.

광고 차단기 사용의 합법성: 문제가 된 소송

     * 많은 인터넷 사용자들이 광고 및 팝업을 우회하기 위해 광고 차단기를 주로 사용함.
     * 광고 차단기는 원치 않는 광고를 필터링하는 브라우저 확장 프로그램 및 플러그인의 형태로 제공됨.
     * 독일의 대형 출판사인 Axel Springer SE가 Adblock Plus의 제작사인 Eyeo GmbH를 상대로 소송을 제기하며 사용자의 자유와 개방된 인터넷을 위한 법적 전투가 벌어짐.

광고에게 광고되지 않을 권리

     * 독일 법원은 인터넷 사용자가 광고 차단기를 사용할 수 있는 선택을 할 수 있어야 한다고 판결함.
     * 사용자의 권리는 의견 표현의 자유와 정보를 받을 권리뿐만 아니라, 의견을 표현하지 않고 강요된 정보를 거부할 권리도 포함함.
     * 인터넷 사용자는 광고 차단기를 사용하여 특정 형태의 광고가 표시되지 않도록 선택함으로써 자신의 권리를 행사함.

HTML 논쟁: 광고 차단기 사용은 컴퓨터 프로그램의 수정에 해당하는가?

     * Axel Springer는 자사의 웹사이트가 저작권법에 의해 보호받는 컴퓨터 프로그램이며, Adblock Plus의 상호작용이 저작권 침해에 해당한다고 주장함.
     * 법원은 Adblock Plus의 사용이 프로그램의 본질을 변경하거나 수정된 버전을 생성하지 않고, 단지 사용자의 선호에 따라 브라우저 구성을 수행한다고 판단함.

사건의 단점들

     * 판결은 사용자의 권리 증진에는 긍정적이지만, Axel Springer가 광고 차단기를 활성화한 사용자의 콘텐츠 접근을 제한할 권리를 유지함.
     * 또한, Axel Springer가 콘텐츠를 유료 접근 모델로 전환할 수 있다고 언급함으로써, 인터넷에서 유료 벽과 광고 차단 탐지 도구가 기본 표준이 될 수 있음을 우려함.

사용자의 자유를 위한 승리?

     * 인터넷 서비스 제공자와 웹사이트들이 광고 차단기를 사용하는 사용자에게 서비스 접근을 제한하는 추세 속에서, 독일의 법원 판결은 사용자의 자유 원칙을 지지하고 인정함.
     * 이러한 판결은 인터넷 사용자가 개별적인 선택을 하고 표현의 자유를 행사할 수 있는 차세대 인터넷의 원칙을 지지함.

GN⁺의 의견

     * 이 기사는 사용자가 기술을 통제할 수 있는 권리를 강조하며, 광고 차단기 사용의 합법성에 대한 중요한 법적 판결을 다룸.
     * 독일 법원의 결정은 사용자의 자유와 개인의 선택을 존중하는 인터넷 환경을 조성하는 데 기여함.
     * 이러한 판결은 사용자가 자신의 온라인 경험을 개선하고 통제할 수 있는 새로운 확장 기능과 브라우저 기능을 자유롭게 개발하고 사용할 수 있는 환경을 장려함.

        Hacker News 의견

     * 사용자는 광고 차단기를 사용하는 것이 공정하다고 생각하며, 인터넷 사용자로서 광고 노출 여부를 선택할 권리가 있다고 주장함. 그들은 인터넷 콘텐츠 제공자가 광고 시청을 조건으로 콘텐츠 접근을 거부할 권리가 있다고 인정하면서도, 자신은 광고 차단기를 끄지 않을 것이라고 강조함.
     * 다른 사용자는 '광고 차단기'라는 용어가 오래되고 부정확하다고 지적하며, 현대의 광고는 추적, 바이러스, 멀웨어, 사기 등의 위험을 수반한다고 주장함. 이 사용자는 인터넷 광고가 단순히 성가신 것을 넘어 위험하다고 느끼며, 이로 인해 광고 차단을 강력히 옹호함.
     * 한 사용자는 광고가 악성 코드를 포함할 가능성이 있는 한, 광고 차단기는 기본적인 보안 수칙이라고 주장함.
     * 또 다른 사용자는 잡지에 광고를 잘라내는 것과 웹사이트에서 광고를 차단하는 것 사이의 유사성을 비유하며, 광고 차단기의 사용을 합법적인 행위로 묘사함.
     * 어떤 사용자는 웹사이트가 광고 차단을 원하지 않는다면 해당 사이트를 사용하지 않을 것이며, 이로 인해 사이트가 실패한다면 그것은 사이트 개발이 부실하다는 증거라고 주장함.
     * 한 사용자는 인터넷 사용자가 사이트 콘텐츠에 대한 '권리'를 가지고 있지 않으며, 광고 차단기 사용 권리와 사이트가 서비스를 거부할 권리가 동등하다고 언급함.
     * Eyeo라는 회사가 광고를 차단하지 않기 위해 돈을 받는다는 사실을 지적하는 사용자가 있으며, 이는 '수용 가능한 광고'에 대한 표준을 정의하는 것과 결제를 요구하는 것 사이의 문제를 제기함.
     * 광고가 사기나 악성 코드를 전달하는 매체일 경우, 광고를 허용해야 하는 법적 의무가 있다면, 해당 광고가 컴퓨터에 미치는 영향에 대한 책임도 있어야 한다는 문제를 제기하는 사용자가 있음.
     * 웹사이트 소유자가 광고 없이 웹사이트를 볼 수 있게 할지, 아니면 접근을 완전히 거부할지 선택할 권리가 있다고 주장하는 사용자가 있으며, 이는 인터넷 사용자에게도 동일하게 적용된다고 언급함.
     * 광고 차단기 사용 권리는 원격 서버가 콘텐츠를 얻기 위한 조건으로 광고를 다운로드하고 표시하도록 강제할 권리를 포함한다는 의견이 있으며, 이로 인해 광고 차단과 강제 표시 사이의 기술적 대결이 시작될 수 있다고 지적함.
"
"https://news.hada.io/topic?id=12400","인텔, Nvidia & AMD와 경쟁하기 위해 'Gaudi3 AI 칩' 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               인텔, Nvidia & AMD와 경쟁하기 위해 'Gaudi3 AI 칩' 공개

인텔, 새로운 AI 칩 공개

     * 인텔이 목요일에 새로운 컴퓨터 칩을 공개함. 이 중에는 생성적 AI 소프트웨어를 위한 Gaudi3 칩이 포함됨.
     * 또한, 윈도우 랩톱과 PC를 위한 Core Ultra 칩과 새로운 5세대 Xeon 서버 칩도 발표함.
     * 인텔의 서버 및 PC 프로세서에는 AI 프로그램을 더 빠르게 실행할 수 있는 특수 AI 부품인 NPU가 포함됨.

Gaudi3와 경쟁사

     * Gaudi3는 내년에 출시되며, Nvidia와 AMD의 칩과 경쟁할 예정임. 이 칩들은 대규모이며 에너지를 많이 소모하는 AI 모델을 구동함.
     * 가장 유명한 AI 모델 중 하나인 OpenAI의 ChatGPT는 클라우드에서 Nvidia GPU를 사용하여 실행됨.
     * 인텔은 2019년 Habana Labs라는 칩 개발업체를 인수한 이후 Gaudi 칩을 개발해왔음.

Core Ultra와 새로운 Xeon 칩

     * Core Ultra 칩은 윈도우 랩톱과 PC를 위해 설계되었으며, 5세대 Xeon 서버 칩도 발표됨.
     * 이 칩들은 AI 프로그램을 더 빠르게 실행할 수 있는 NPU를 포함하고 있음.
     * Core Ultra는 인터넷 연결 없이 ChatGPT와 같은 챗봇을 구동할 수 있는 능력은 제공하지 않지만, 더 작은 작업을 처리할 수 있음.

인텔의 전략과 성능

     * Core Ultra 칩은 7나노미터 공정을 사용하여 제작되었으며, 이전 칩보다 에너지 효율성이 높음.
     * 이 칩들은 게임 성능이 향상되었으며, 추가 그래픽 성능으로 Adobe Premier와 같은 프로그램을 40% 이상 빠르게 실행할 수 있음.
     * 인텔의 5세대 Xeon 프로세서는 대규모 조직이나 클라우드 회사가 배치하는 서버를 구동함.

GN⁺의 의견

     * 인텔의 새로운 AI 칩 Gaudi3는 생성적 AI 소프트웨어를 위한 것으로, Nvidia와 AMD의 지배적인 위치에 도전하는 중요한 발표임.
     * Core Ultra와 Xeon 칩의 발표는 AI 모델에 대한 수요 증가에 대비하여 제품 라인을 재정비하는 전통적인 프로세서 제조업체들의 전략 변화를 보여줌.
     * 인텔의 이러한 움직임은 AI 기술의 급속한 발전과 시장에서의 경쟁력 유지를 위한 기업들의 노력을 반영하며, AI 하드웨어 시장의 성장 잠재력을 강조함.
"
"https://news.hada.io/topic?id=12456","구글, 플레이스토어 반독점 합의로 7억 달러 지급에 동의","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    구글, 플레이스토어 반독점 합의로 7억 달러 지급에 동의

구글, 미국 주 정부 및 소비자와 앱 스토어 합의금 지급

     * 구글이 안드로이드 앱 스토어와 관련하여 경쟁을 저해했다는 주장을 해결하기 위해 미국 주 정부 및 소비자에게 7억 달러를 지급하고 여러 조치를 취하기로 합의함.
     * 합의금 중 6억 3천만 달러는 플레이 스토어에서 다운로드한 앱 내 디지털 거래 가격을 인상했다고 주장하는 주 법무장관들에 의해 결제 처리 시스템에 투입될 예정임.
     * 구글은 앱 내 구매에 대해 15%에서 30%의 수수료를 부과하는데, 이는 연간 수십억 달러의 이익을 창출하는 것으로 알려짐.

추가 합의 내용 및 영향

     * 합의에 따라 적격 소비자는 최소 2달러를 받게 되며, 2016년 8월 16일부터 2023년 9월 30일까지 플레이 스토어에서 인앱 구매를 한 약 1억 2천만 미국 소비자에게 자동으로 통지될 예정임.
     * 구글은 또한 플레이 스토어 외부의 다른 출처에서 안드로이드 앱을 다운로드하고 설치하는 것을 더 쉽게 만들기 위해 다양한 변경 사항에 동의함.
     * 안드로이드 앱 제작자들은 플레이 스토어의 결제 시스템을 통하지 않고 소비자에게 대안적인 결제 옵션을 제공할 수 있는 더 많은 유연성을 갖게 됨.

법적 배경 및 시장 반응

     * 이 합의는 구글이 재판 대신 합의를 선택함으로써 잠재적으로 직면할 수 있었던 105억 달러의 손해 배상금보다 훨씬 적은 금액임.
     * 투자자들은 합의에 크게 개의치 않는 듯 보이며, 구글의 모회사 알파벳 주식은 소폭 상승함.
     * 코네티컷 주 법무장관은 이 합의가 디지털 시장에서 자유롭고 공정한 접근을 보장하기 위해 전국의 법무장관들이 단합하여 권한을 사용할 준비가 되어 있다는 분명한 메시지라고 언급함.

GN⁺의 의견

     * 이 기사는 구글이 안드로이드 앱 스토어의 경쟁 저해 문제에 대해 미국 주 정부 및 소비자와 큰 규모의 합의에 도달했다는 중요한 사실을 전달함.
     * 합의 내용은 구글이 시장에서의 지배력을 어느 정도 인정하고, 소비자와 개발자에게 더 많은 선택권과 유연성을 제공하겠다는 의지를 보여줌.
     * 이 사건은 기술 대기업에 대한 규제와 경쟁 촉진이라는 더 큰 법적 및 경제적 흐름의 일부로, 소프트웨어 업계와 소비자들에게 장기적인 영향을 미칠 수 있는 중요한 전환점이 될 수 있음.

   애플도...

        Hacker News 의견

     * 합의에 따르면 적격 소비자는 최소 $2를 받게 되며, 2016년 8월 16일부터 2023년 9월 30일까지 Play 스토어에서 지출한 금액에 따라 추가 지급금을 받을 수도 있다.
     * Google은 Apple이 iPhone 앱 스토어에서 하듯이 인앱 구매에 대해 15%에서 30%의 수수료를 징수하는데, 주 법무장관들이 결제 처리에 대한 개방 시장이 있었다면 가격이 더 낮았을 것이라고 주장
     * Google은 또한 향후 5년간 Play 스토어 외부에서 안드로이드 앱을 다운로드하고 설치하는 것을 소비자들이 더 쉽게 할 수 있도록 다른 변경 사항들을 도입하기로 합의했다. 대체 선택지를 사용할 때 보안 경고나 ""두려움 화면""을 발행하는 것을 자제할 것
     * Google은 안드로이드 앱 스토어에 대한 경쟁을 저해했다는 주장을 해결하기 위해 7억 달러를 지불하고 여러 가지 다른 양보를 하기로 합의
     * ""이는 법무장관들이 회사를 재판에 회부했다면 강요될 수 있었던 105억 달러의 손해 배상액의 일부에 불과""
     * ""합의는 ""빅테크에게 분명하고 큰 메시지를 보낸다 [...]""라고 코네티컷 주 법무장관 윌리엄 통이 말했음. 하지만, 실제 메시지는 다를 수 있음
     * Google은 ""잃었다""고 하지만 Apple은 같은 행동을 하면서도 이 논란에서 여전히 벗어나는 이유는 무엇인가?
     * 항상 놀라운 것은 어떤 반독점 합의도 이를 처음부터 시도하지 않도록 만들 정도로 아픈 벌금이 아니라는 것이다. 거의 항상 행동의 이익에 비해 너무 적은 금액으로 반경쟁적 행동을 장려하는 벌금이다.
     * 안드로이드가 개방적이고, 협력적으로 관리되며, 사용자의 최선의 이익을 위한 것이라고 주장에 대한 의문 제기
     * ""계속하려면 동전을 넣으세요"" : 합의금이 마치 게임을 계속하기 위해 동전을 넣는 것과 같다는 비유적 표현 사용.
     * 10.5B USD가 올바른 금액이었다. 이것은 단지 몇 푼에 불과하다
     * 그리고 그들은 5년 동안 몇 가지 작은 일을 해야 한다. 그게 전부인가? : 합의로 인해 Google이 해야 하는 일이 미미하다는 비판.
"
"https://news.hada.io/topic?id=12388","《위대한 독재자》의 마지막 연설","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           《위대한 독재자》의 마지막 연설

위대한 독재자의 마지막 연설

     * 위대한 독재자가 되고 싶지 않음. 다른 사람을 지배하거나 정복하는 것이 목적이 아님.
     * 모든 인간이 서로 돕고 싶어 하며, 행복을 통해 살고 싶어 함. 서로를 미워하고 경멸하고 싶지 않음.
     * 세상에는 모두를 위한 충분한 자리가 있으며, 풍요로운 대지가 모두를 위해 제공할 수 있음.
     * 탐욕이 인간의 영혼을 독살하고, 세계를 증오로 가득 차게 하며, 불행과 피의 길로 이끔.
     * 기계의 발달로 풍요를 가져왔지만, 실제로는 부족함을 느끼게 함. 지식과 영리함이 우리를 냉소적이고, 가혹하게 만듦.
     * 인간성과 친절, 온유함이 더 필요함. 이러한 덕목 없이는 삶이 폭력적이 되고 모든 것이 잃어버릴 것임.

인류의 단합과 진보에 대한 호소

     * 비행기와 라디오와 같은 발명품들이 인류를 더 가깝게 만듦. 이러한 발명품들은 인간의 선함과 전 인류의 형제애를 외침.
     * 현재 이 연설은 전 세계 수백만 명에게 도달하고 있으며, 억압받는 이들에게 희망의 메시지를 전달함.
     * 현재의 고통은 탐욕의 지나가는 것이며, 인간 진보의 길을 두려워하는 사람들의 쓰라림임. 증오와 독재자들은 사라질 것이며, 사람들에게서 빼앗긴 권력은 다시 사람들에게 돌아갈 것임.

자유와 인간성을 위한 싸움

     * 군인들에게 인간성을 잃고 기계처럼 행동하는 야만인들에게 자신을 맡기지 말 것을 호소함.
     * 인간은 기계나 가축이 아니며, 인간애를 가지고 있음. 미움은 사랑받지 못한 자들의 감정임.
     * 노예가 아닌 자유를 위해 싸울 것을 촉구함. 모든 인간 내면에 신의 왕국이 있음을 인용함.
     * 사람들이 기계를 만들고 행복을 창조할 힘을 가지고 있음. 이 힘을 사용하여 민주주의를 위해 단합할 것을 촉구함.
     * 새로운 세계, 적절한 일자리와 미래, 안정된 노후를 제공하는 세계를 위해 싸울 것을 호소함.
     * 독재자들은 자신을 자유롭게 하지만 사람들을 노예로 만듦. 그 약속을 이루기 위해 싸울 것을 촉구함.
     * 이성의 세계, 과학과 진보가 모든 인간의 행복으로 이끌 세계를 위해 싸울 것을 촉구함.

위대한 독재자에 대한 배경

     * 위대한 독재자는 찰리 채플린의 첫 대사가 있는 영화임.
     * 채플린은 유대인 이발사와 토마니아의 독재자 힌켈을 연기함.
     * 채플린과 히틀러는 생일이 일주일 차이로, 두 인물은 인류의 양극단을 대표함.
     * 채플린은 영화의 마지막 연설을 여러 달 동안 초안 작성하고 수정함. 이 연설은 평화를 위한 호소임.
     * 일부는 연설을 비판했지만, 다른 이들은 고무적이라고 여김.
     * 채플린의 말은 1940년에도 그랬듯이 오늘날에도 여전히 관련성이 있음.

GN⁺의 의견

     * 이 연설은 인간의 근본적인 선함과 협력, 그리고 자유에 대한 갈망을 강조함. 이는 모든 시대에 걸쳐 보편적인 가치임.
     * 채플린의 메시지는 현재의 사회적, 정치적 문제들에 대한 깊은 통찰을 제공함. 그의 말은 여전히 우리에게 영감을 줌.
     * 영화와 연설은 예술이 어떻게 시대를 초월하여 강력한 사회적 메시지를 전달할 수 있는지 보여줌. 이는 예술과 문화가 인간 경험에 미치는 영향의 중요성을 강조함.

        Hacker News 의견

     * 한 사용자는 음악이 추가된 버전을 좋아한다고 언급하며, 멕시코 청년과 감옥에서 나눈 대화를 공유한다. 그들은 경비원을 기계처럼 무감각한 존재로 비유하며, 이를 통해 서로 공감대를 형성하고, 함께 연설문을 기억해내려 노력한 좋은 순간을 회상한다.
     * 또 다른 사용자는 디킨스의 ""크리스마스 캐럴""에서 ""크리스마스 현재의 유령""이 스크루지에게 하는 말을 인용하며, 인간의 삶과 죽음에 대한 결정권을 가진 것처럼 행동하는 사람들의 오만함을 비판한다.
     * 한 사용자는 탐욕이 인간의 영혼을 독살했다고 말하며, 과거에는 죄로 여겨졌던 탐욕이 현대에는 어떤 이들에게는 미덕으로 여겨지는 현상에 대해 비판적인 견해를 표현한다.
     * 다른 사용자는 최근에 영화제에서 ""위대한 독재자""를 대형 스크린으로 관람한 경험을 공유하며, 영화가 연설을 중심으로 구성되었다고 생각한다고 말한다. 또한 영화 속 히틀러를 풍자하는 장면에 대해 언급한다.
     * 한 사용자는 마음보다는 가슴이 더 크게 말해야 한다는 생각에 반대하며, 파시즘에 대한 지지가 감정적 호소에 기반한 것임을 지적하고, 진정한 마음의 결정은 공감적이고 건설적이며 현명해야 한다고 주장한다.
     * 또 다른 사용자는 온라인에서 사람들이 생각하기보다는 분노만 느끼는 경향이 있다고 말한다.
     * 한 사용자는 프랭클린 D. 루스벨트 대통령이 찰리 채플린에게 ""위대한 독재자"" 제작을 권장했으며, 영화가 미국인들에게 채플린에 대한 반감을 일으키는 계기가 되었다고 설명한다. 채플린은 정치적 이유로 미국에서 추방되었으며, 이에 대한 책 리뷰를 소개한다.
     * 일본 고등학교 영어 교과서에 이 연설이 자주 실린다는 흥미로운 사실을 언급하는 사용자도 있다.
     * 마지막으로, 한 사용자는 연설 중 ""인간의 증오는 사라질 것이고, 독재자들은 죽을 것이며, 사람들로부터 빼앗긴 권력은 사람들에게 돌아갈 것""이라는 구절을 인용하며, 영원히 살기를 원하는 억만장자들의 오만함에 대한 반박으로 이 구절을 제시한다.
"
"https://news.hada.io/topic?id=12420","사내 AI SQL 생성 슬랙봇","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            사내 AI SQL 생성 슬랙봇

   원티드랩 데이터팀에서 사용하는 쿼리 생성 AI

   데이터 요청 처리 자동화와 데이터팀의 업무 부담 경감을 위해 개발되었으며 슬랙 채널을 통해 데이터 요청 시 적절한 SQL 쿼리를 생성

   원티드랩의 데이터 구조를 이해하고 효율적으로 쿼리를 제공하는 특징이 있고 마케터, PO, 데이터 분석가 등이 쿼리 생성 및 수정에 활용 중이며 SQL 진입 장벽 감소

   Figma 링크에 아키텍처를 포함한 자료 공개

   재밌게 읽었습니다

   chat GPT랑 비교하는 부분에서 결과가 많이 달라지는지에 대한 비교가 있었으면 좋겠네욥.
   학습 시킬때도 궁금한게 프롬프트 : ~~~ SQL로 만들어줘 결과 : 원티드랩의 SQL 이렇게 학습한건지도 궁금합니다.

   show GN으로 가야할듯하네요 검색해보니 본인회사글 이신거 같은데 아래분 댓글처럼 포폴 소개 같네요

   아 피곤한 글이네요
   본인이시면 Show GN이 맞지않을까요.

   아키텍처를 상세 소개하거나 프롬프트 엔지니어링 기법공유가 아닌 포폴 자료 소개하는 느낌이드네요

   Show GN 으로 하는 룰이 있었군요. 죄송합니다.
   아키텍처 상세 소개를 Figma 링크로 첨부하였기에 글 등록시 보이는 정보에 맞게 포함했다고 생각했었습니다.

   평소 GeekNews 를 즐겨 보는 만큼 저도 많은 정보를 담으려고 하니 이렇게 소개가 되었네요
   피드백 감사합니다.
"
"https://news.hada.io/topic?id=12354","개인 리더를 통한 웹 재정복","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            개인 리더를 통한 웹 재정복

개인 리더로 웹을 되찾기

     * 경력 소진을 경험한 후, 소프트웨어 산업에 대한 환멸을 느낌.
     * 일을 멈추고, 생활 습관을 개선하며, 소셜 미디어를 끊음.
     * 생산성에 대한 압박을 극복하는 것이 도전이었음.

Mastodon과의 만남

     * Mastodon을 통해 피드를 다시 통제하고, 소프트웨어 산업과 웹에 대한 불편함을 느끼는 사람들을 발견함.
     * Mastodon이 정보 허브로서는 적합하지 않다고 느낌.

IndieWeb 운동과 소셜 리더

     * IndieWeb 운동과 소셜 리더 개념을 알게 됨.
     * 필요한 것은 마이크로 블로깅이 아닌, 취향에 맞게 조정할 수 있는 피드 리더였음.

목표 설정

     * 사용자로서, 이메일 인박스가 아닌 소셜 미디어 홈 피드와 같은 경험을 원함.
     * 소셜 기능 구현에 관심 없음.
     * 개발자로서, 사용자 경험을 최우선으로 하고, 개발 편의보다 운영의 용이성을 중시함.

설계

     * 웹 애플리케이션으로 접근 가능하도록 UI 설계.
     * 서버 측 렌더링 라이브러리를 사용하여 단순하고 동적인 웹 UI 구현.
     * 모놀리식 웹 애플리케이션을 선택하고, SQLite를 데이터베이스로 사용함.

개발 언어 및 테스팅

     * Go 언어를 고려하였으나, Python을 선택하여 프로토타입을 빠르게 개발함.
     * 초기 단계에서는 테스트 작성을 하지 않음.

개발 과정

     * 사용자로서 앱을 경험하며 개발함.
     * 기본 기능을 갖춘 후, 피드의 정렬 방식을 개선함.
     * 라즈베리 파이 서버를 통해 지속적으로 앱을 사용하고 개선함.

결론

     * 개인 피드 리더 'feedi'를 개발하여 소프트웨어 개발과의 재연결에 성공함.
     * 'feedi'를 인터넷의 첫 페이지로 사용하며 정보 소비에 대한 통제를 되찾음.

GN⁺의 의견

     * 이 글의 핵심은 개인적인 필요와 불만에서 출발하여 자신만의 솔루션을 만드는 과정임.
     * 소프트웨어 개발에 대한 열정을 재발견하고, 사용자 경험을 최우선으로 하는 개발 철학이 돋보임.
     * 이 글은 개발자들에게 자신만의 도구를 만들어보는 것의 가치와 즐거움을 전달함으로써 흥미롭고 매력적임.

        Hacker News 의견

     * URLwatch 설정에 대한 만족감
          + URLwatch를 설정하는 것이 매우 즐거움.
          + Puppeteer를 넘어 Chrome 인스턴스를 부팅하여 자바스크립트가 있는 웹사이트를 스크랩할 수 있게 되면 웹을 푸시 방식으로 제어하는 듯한 느낌.
          + 아침에 간단히 확인할 수 있도록 웹사이트를 모니터링하는 것의 힘:
               o 좋아하는 회사의 새로운 채용 공고
               o 현재 회사의 채용 공고/마감
               o 세일 중이거나 재입고 대기 중인 제품, 리퍼브 상품
               o 코로나 바이러스 관련 하수도 통계
               o 아파트 목록
               o 관심 있는 GitHub 릴리스
               o 중요 웹사이트의 법적 문서
          + 개인적으로 Digital Ocean 드롭렛을 $5에 임대하여 RSS 리더, 개인 텔레그램 봇 등을 호스팅하고 실험을 위한 작은 HTTP 사이트를 설정하는 데 유용함.
          + 랩톱에서도 가능하지만 매일 같은 시간에 실행할 필요는 없음.
     * ""당신의 IT인""에 대한 상상
          + ""당신의 IT인""이라는 개념에 대한 환상.
          + 현지 이발사, 일반의, 재단사 또는 제빵사처럼 디지털 생활의 일부를 담당하고 개인화된 피드를 제공하며 개인 정보/건강 문제를 관리함.
          + 영화, 기사, 밈, 재미있는 비디오 등을 사용자의 피드 리더와 연결하는 간단한 인터페이스나 ""오픈 프로토콜""을 사용함.
          + 커뮤니티가 운영하는 지역 데이터 센터나 가정 인터넷 연결을 통한 간단한 콘텐츠 서비스 제공에 대한 아이디어.
          + 개인 디지털 큐레이터(인공지능 지원 가능)가 모두 지속 가능하고 개인 정보 보호가 중시되며 건강한 가상 솔라펑크 세계의 일부임.
          + 피드버스로 이동한 후 더 건강해졌다는 이야기를 들은 것은 처음이 아님.
          + Puppeteer를 기반으로 한 스크립트와 미니 앱을 사용하여 요약 및 추천을 제공하며, 완벽하지는 않지만 이 분야에 더 많은 노력을 기울이고 관련 오픈소스 프로젝트를 찾아볼 계획임.
          + 친구와 가족들에게 이 아이디어를 제공해보고 그들의 반응을 확인할 예정이며, 이 스크립트들을 ""브라우저가 아님""이라고 명명함.
     * 개인 피드의 확장에 대한 욕구
          + 개인 피드를 단순히 시간 제한이 있고 산만함이 없는 피드로 확장하고자 함.
          + 팔로우하는 모든 글 콘텐츠를 포함하는 피드를 만들고 매일 약 30분 분량의 읽을 거리를 선택하도록 함.
          + ChatGPT를 사용하여 가장 ""영양가 있는"" 콘텐츠를 필터링하거나 다른 도구를 사용하지만, 가치 있는 콘텐츠에 우선순위를 둠.
          + 이 콘텐츠를 Kindle이나 remarkable 태블릿으로 전달하여 색상과 깜박임, 빠른 인터넷으로부터 벗어남.
          + 두 번째 단계로 친구의 피드를 구독하고 가끔 그들의 피드에서 ""게스트"" 콘텐츠를 받을 수 있음.
     * 자동화된 테스트를 건너뛴 결정에 대한 공감
          + 처음에는 자동화된 테스트를 걱정하지 않는 결정에 공감함.
          + 개인적인 장난감 프로젝트를 구축할 때 테스트 인프라와 CI 파이프라인을 구성하는 데 시간을 낭비하는 대신 일정한 모멘텀을 얻는 데 집중함.
          + 테스트가 문제가 되기 시작하면 그때 추가할 수 있음.
     * 유용한 개인 소프트웨어 구축에 대한 긍정적인 경험
          + 유용한 개인 소프트웨어를 구축함으로써 다시 일을 즐길 수 있게 됨.
          + ""비전통적인"" 기술을 자유롭게 사용할 수 있는 이점도 있음.
          + 개인적인 사용을 위한 저장소에서 새로운 기술과 최적화를 발견하고 이를 주요 작업에 적용할 수 있음.
     * ""아무것도 하지 않는 방법""에 대한 추천
          + Jenny Odell의 책 ""How to do nothing""을 추천함.
          + 주의 경제에 의해 부과된 가짜 ""생산성"" 압박에 대해 느끼기 시작하는 사람들에게 유용함.
     * ""피드"" 정신에 대한 지지
          + 읽을 것들의 체크리스트보다는 ""피드"" 정신을 선호함.
          + 여러 RSS 리더를 사용해봤지만, 관리해야 할 또 다른 인박스가 필요하지 않음.
          + Feedi를 확인해볼 예정임.
     * 미래에 대한 개인적인 생각 공유
          + 이 게시물이 미래의 자신이 작성한 것처럼 느껴짐.
          + 저자와 공통점이 많다는 사실에 놀람.
          + 저자가 한 일이 자신이 휴식 시간에 하고 싶어하는 일과 거의 정확히 일치함.
          + 오픈/IndieWeb에 참여하고자 하는 생각과 기술적 고려사항에 대한 공통점.
          + 다른 사람이 자신의 생각과 느낌을 검증해주는 것에 기쁨과 동시에 저자가 먼저 그 길을 갔다는 것에 대한 질투감.
     * 크루징 세일보트에서 필요한 기능에 대한 생각
          + 해안을 지날 때 LTE가 있는 순간에 ""지금 동기화""를 할 수 있는 기능.
          + 기본적으로 모든 콘텐츠(이미지 포함)를 Readability와 로컬 캐시하여 오프라인에서 읽을 수 있음.
     * 앱 접근성과 보안에 대한 고민
          + 저자가 앱에 인증을 추가하여 어디서나 액세스할 수 있게 함.
          + VPN을 사용하여 개인 웹 앱에 안전하게 액세스할 수 있는지에 대한 질문.
          + 인증에 대한 이해가 복잡하고 유지 관리가 필요하다는 인식.
"
"https://news.hada.io/topic?id=12386","인텔, 삼성, TSMC, 3D 적층 트랜지스터 시연","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      인텔, 삼성, TSMC, 3D 적층 트랜지스터 시연

인텔, 삼성, TSMC, 3D 적층 트랜지스터 시연

     * 이번 주 IEEE 국제 전자 장치 회의에서 TSMC는 CMOS 칩에 필요한 로직을 적층한 CFET(Complementary FET)을 공개함.
     * CFET는 무어의 법칙 로드맵에서 다음 단계에 해당하며, 인텔, 삼성, TSMC 모두 이 기술을 제작할 수 있음을 시연함.

  GN⁺의 의견

     * 이 기사는 반도체 산업의 선두주자들이 무어의 법칙을 따라 계속해서 기술적 진보를 이루고 있음을 보여줌.
     * 3D 적층 트랜지스터 기술인 CFET는 칩의 성능과 효율성을 향상시킬 잠재력을 가지고 있어, 기술 발전에 관심 있는 사람들에게 흥미로운 소식임.
     * 이러한 기술 발전은 스마트폰, 컴퓨터, 데이터 센터 등 다양한 전자 장치의 성능 향상에 기여할 것으로 예상되며, 이는 일상 생활에 직접적인 영향을 미칠 수 있음.

        Hacker News 의견

     * 이 산업에서 수년간 호기심 많은 관찰자로 있기는 재미있음. 때때로 무어의 법칙이 장애물에 부딪히고, 일부 전문가들은 이것이 한계에 도달했다는 명확한 신호로 보는 반면, 다른 이들은 이미 트랜지스터 당 가격이 상승했기 때문에 무어의 법칙이 죽었다고 주장함. 또 다른 이들은 물리적 한계로, 특정 나노미터 이하로는 불가능하다고 봄. 인텔이 지난 10년간 거의 독점적인 위치를 즐기며 게으름을 피웠고, TSMC의 자외선 기술에 놀라게 되었다는 주장도 있음. 반면, 짐 켈러와 같이 실제로 '소시지가 어떻게 만들어지는지' 아는 사람들은 우리가 어떤 주요한 근본적 한계에도 가까이 있지 않으며, 앞으로 수년간 최소 1000배의 개선을 기대할 수 있다고 열정적으로 말함. 어쨌든, 이런 예측이 롤러코스터처럼 변동하는 동안 수십 년간 지속적인 성장을 이루는
       분야를 보는 것은 정말 재미있음.
     * 여기서 흥미로운 점 중 하나는 48 - 50nm ""디바이스 피치""를 가지고 있다는 것으로, 이는 XY 평면에서 트랜지스터가 작지만 ""5nm""나 ""3nm""보다 훨씬 큰 피치 폭을 가지고 있다는 것을 의미함. 칩 생산에 익숙한 사람들은 이를 알고 있지만, 칩 생산에 대한 깊은 이해가 없는 사람들은 종종 5nm 간격으로 트랜지스터를 배치할 수 있다고 오해함. 밀도 측면에서는 동일한 공간에 전체 트랜지스터 수가 약 30 - 40% 증가할 수 있음. 인텔 인버터 디자인을 보면, 깊이를 두 배로 늘릴 의지가 있다면 매우 컴팩트한 DRAM 셀을 만들 수 있을 것으로 보임. 8GB의 ECC DDR 메모리를 탑재한 칩렛은 그들의 프로세서와 고급 FPGA 아키텍처에 유용할 것임.
     * 반도체에 대한 일반적인 질문: 트랜지스터의 밀도보다 생산 비용(계산/달러)에 더 많은 강조를 두지 않는 이유는 무엇인가? CPU는 특별히 크지 않음. 내 컴퓨터의 CPU는 몇 스푼 정도의 부피일 수 있음. 그렇다면, 계산이 퍼져 있다면(예를 들어, 통신 속도 때문에) 덜 유용한 것인가?
     * 여기서 놓치고 있는 것이 있을 수도 있지만, 열 문제가 더 커지지 않을까? 현재 우리는 비교적 얇은 칩의 표면에서 열을 제거하기 위해 상당히 강력한 냉각 솔루션을 가지고 있음. 칩이 더 입체적으로 변한다면 내부를 어떻게 냉각할 것인가?
     * 저장 장치에서 2D MLC 및 TLC NAND에서 3D TLC 스택킹(그리고 끔찍한 더 높은 비트)으로 이동하면서, 메모리 수명 주기를 실제로 단축시키는 방해 요소가 도입됨. 셀을 읽을 때, 전압이 인접 셀의 상태를 변경하여, 그 상태를 유지하기 위해 강제로 다시 쓰여야 함으로써, 데이터를 읽음으로써 디스크의 수명 주기가 단축됨. 우리에게 형편없는 제품을 판매하고 있음. 문제에 대해 조금 이해하는 바로는, 수직 스택을 통과하는 트랙을 분리하기 위해 더 많은 표면적을 차지함으로써 해결될 것임. 이것은 2D 디자인 표면적과 같지만 더 큰 복잡성을 가질 것임. 비록 지연을 추가하여 문제를 완화(해결하지는 않음)하려는 논문[1]을 읽었지만 말이다. 그래서 이제 프로세서에 대한 이 뉴스를 읽고, 이러한 기술로 만들어진 프로세서로 인해 최종 사용자가 겪게 될 불편함에
       대해 궁금해함. 컴퓨팅 신뢰성, 취약점 등에서 말이다. 나는 트랜지스터 수준에서의 프리페치 문제를 상상하며 취약점(순전히 내 상상과 추측)을 적었는데, 만약 이것이 미래에 실제로 발생한다면, 제조업체가 임의로 지연 시간을 늘리거나 다른 무엇인가를 도입하여 컴퓨팅 성능을 10년 전으로 되돌리는 패치를 내놓을 수 있음을 볼 수 있음. 그리고 물론 컴퓨팅 신뢰성. 이 모든 것을 피하기 위해 조치가 취해지고 있는가? 그렇지 않다면, 나는 미래의 법정을 위해 여기에 내 댓글을 남김.
     * 칩을 수평으로 더 크게 만들 수 없을 때, 우리는 수직으로 트랜지스터를 쌓아 올림. 마치 고층 빌딩을 다시 발견한 것 같음.
     * 작은 스타트업인 thruchip.com은 10년 전에 3D 스택킹을 했음.
     * 이 기술로부터 우리가 기대할 수 있는 실제 세계의 결과는 무엇일까? 누군가 알고 있나?
     * 여전히 GAA 채널이기 때문에, 채널 길이는 최신 3nm 노드와 같은가?
     * 이것이 GHz를 증가시키는 것인가, 아니면 단지 코어 수만 증가시키는 것인가?
"
"https://news.hada.io/topic?id=12377","OpenAI의 프롬프트 엔지니어링 가이드 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         OpenAI의 프롬프트 엔지니어링 가이드

     * 대규모 언어 모델(GPT 모델이라고도 함)에서 더 나은 결과를 얻기 위한 전략과 기술을 공유하는 가이드
     * 여기서 설명하는 방법들은 때때로 결합하여 더 큰 효과를 낼 수 있으며, 가장 적합한 방법을 찾기 위해 실험을 권장
     * 예시 프롬프트를 탐색하여 모델이 할 수 있는 일을 배울 수 있음

더 나은 결과를 얻기 위한 여섯 가지 전략

  명확한 지시사항 작성

     * 모델은 마음을 읽을 수 없으므로, 원하는 것을 명확히 요청해야 함.
     * 세부사항을 포함하여 더 관련성 높은 답변을 얻고, 모델에게 특정 인물을 연기하도록 요청하거나, 입력의 구별된 부분을 명확히 나타내기 위해 구분자 사용.
     * 작업을 완료하기 위해 필요한 단계를 명시하고, 예시를 제공하며, 출력의 원하는 길이를 지정.

  참조 텍스트 제공

     * 언어 모델은 특히 난해한 주제나 인용문, URL을 요청할 때 가짜 답변을 자신 있게 만들어낼 수 있음.
     * 모델에게 참조 텍스트를 사용하여 답변하도록 지시하거나, 참조 텍스트에서 인용하여 답변하도록 지시.

  복잡한 작업을 간단한 하위 작업으로 분할

     * 복잡한 시스템을 모듈식 구성 요소로 분해하는 것이 소프트웨어 엔지니어링에서 좋은 관행처럼, 언어 모델에 제출된 작업도 마찬가지.
     * 복잡한 작업은 오류율이 높으며, 종종 간단한 작업의 워크플로우로 재정의될 수 있음.
     * 의도 분류를 사용하여 사용자 쿼리에 가장 관련성 높은 지시사항을 식별하고, 매우 긴 대화가 필요한 대화형 애플리케이션의 경우 이전 대화를 요약하거나 필터링.
     * 긴 문서를 조각별로 요약하고 재귀적으로 전체 요약을 구성.

  모델에게 ""생각할 시간"" 주기

     * 모델이 답변을 서두르기보다는 답변을 작성하기 전에 ""생각의 연쇄""를 요청하면 더 신뢰할 수 있는 답변을 도출할 수 있음.
     * 모델에게 자체 해결책을 먼저 마련하도록 지시하고, 모델의 추론 과정을 숨기기 위해 내부 독백이나 일련의 쿼리 사용.
     * 이전 패스에서 놓친 것이 있는지 모델에게 물어봄.

  외부 도구 사용

     * 모델의 약점을 보완하기 위해 다른 도구의 출력을 모델에게 제공.
     * 임베딩 기반 검색을 사용하여 효율적인 지식 검색 구현, 코드 실행을 사용하여 더 정확한 계산 수행 또는 외부 API 호출.
     * 모델에게 특정 함수에 대한 접근을 허용.

  변경 사항을 체계적으로 테스트

     * 성능 개선은 측정 가능할 때 더 쉬워짐.
     * 변경이 전반적인 성능에 긍정적인 영향을 미치는지 확인하기 위해 포괄적인 테스트 스위트(또는 ""eval"") 정의 필요.
     * 모델 출력을 금본답안과 비교하여 평가.

GN⁺의 의견

     * 가장 중요한 점: 프롬프트 엔지니어링은 언어 모델의 성능을 최적화하는 핵심적인 방법으로, 사용자의 의도를 정확하게 파악하고 원하는 결과를 얻기 위한 구체적인 지침을 제공.
     * 흥미로운 이유: 이러한 전략들은 인공지능 언어 모델의 사용을 더욱 효과적으로 만들며, 특히 GPT-4와 같은 최신 모델에서 더욱 높은 성능을 발휘할 수 있게 함.
     * 주목할 만한 점: 이 가이드는 초급 소프트웨어 엔지니어가 언어 모델을 사용할 때 겪을 수 있는 일반적인 문제들을 해결하는 데 도움이 되는 구체적인 예시와 전략을 제공함으로써, 실제 작업에서 모델을 더 효과적으로 활용할 수 있는 방법을 제시함.

   https://news.hada.io/topic?id=10678

        Hacker News 의견

     * ChatGPT 시스템 프롬프트에 대한 논의
          + 복잡한 규칙을 수용하는 데 ChatGPT의 최신 모델이 효과적임.
          + 시스템 프롬프트를 사용하는 것보다 더 엄격한 명령을 내리는 것이 경험상 더 나음.
          + 함수 호출 및 구조화된 데이터 지원은 프롬프트 엔지니어링의 한 형태로, 시스템 프롬프트만 사용하는 것보다 훨씬 강력함.
          + 시스템 프롬프트와 구조화된 데이터 결과를 비교하는 재미있는 데모 예시가 있음.
     * 스페인어로 치즈버거 주문 경험담
          + ChatGPT와 Google 번역기가 제안한 스페인어 번역에 대해 서버가 이상하게 반응함.
          + 번역 개선에 관심이 있어, 멕시코계 미국인을 대상으로 한 스페인어 맞춤형 번역을 요청함.
          + 다음 날 ""Cheeseburger sin pepinillos""라는 문구로 주문했을 때 서버는 그게 더 낫다고 함.
     * LLM(Large Language Models)의 특징에 대한 논의
          + 입력과 지시 사이에 거의 구분이 없어, 사용자의 입력이 프롬프트의 일부로 간주됨.
          + 이로 인해 알려진 ""프롬프트 주입"" 취약점이 발생하지만, 이는 모델이 지시와 입력을 구분하지 않는 본질적인 특성 때문임.
          + 프롬프트와 입력이 결합된 것이 프로그램의 전체 입력이 되며, 이로 인해 프로그램의 동작을 확신하기 어려움.
          + LLM이 아직 복잡한 작업에 대해 신뢰할 수 있을 정도로 사용되지 않는 이유임.
     * 프롬프트 작성에 대한 학습에 대한 주저함
          + 새로운 버전과 다른 LLM들이 다르게 반응하기 때문에 프롬프트 작성을 완벽하게 배우는 데 많은 시간을 할애하는 것에 대해 주저함.
          + 시스템이 더 똑똑해짐에 따라 복잡한 프롬프트가 필요 없어질 수도 있음.
     * 프롬프트 엔지니어링과 구글 고급 검색 쿼리의 비교
          + 기본적인 질문에는 챗봇이 잘 작동하지만, 요청된 정보가 복잡해질수록 정확한 정보를 얻기 어려움.
          + 구글 검색에서도 기본적인 정보는 쉽게 얻을 수 있지만, 명확하지 않은 결과를 원할 때 고급 검색 연산자를 사용함.
     * 구글 검색 프롬프트와 LLM 프롬프트의 비교
          + 사람들이 인터넷에서 필요한 것을 얻기 위해 구글에 간단한 키워드를 입력하는 방식에 익숙해짐.
          + 이제 복잡한 문장을 작성해야 하는 것은 시간이 걸릴 것이며, 이는 일시적인 단계일 수 있음.
     * 인간 간의 의사소통 실패와 LLM의 한계
          + 인간 간의 의사소통이 자주 실패하며, 대부분의 사람들이 효과적인 커뮤니케이터가 아님.
          + 기계도 인간의 마음과 의도를 읽는 데 더 나을 것이라고 기대하기 어려움.
          + 프롬프트 엔지니어링은 인간 간의 의사소통 능력 향상을 위해 존재해야 함.
     * ""프롬프트 엔지니어링""이라는 용어에 대한 비판
          + ""엔지니어링""이라는 단어가 남용되고 있다는 의견 제시.
     * LLM이 인간에게 명확한 의사소통을 가르치는 역할
          + LLM을 통해 인간이 더 명확하게 의사소통하는 방법을 배우고 있음.
     * LLM 기반 챗앱 구현의 용이성
          + 이론적 진보 없이도 LLM 기반 챗앱을 구현하는 데 많은 이점이 있음.
          + 현재보다 더 나은 결과를 얻기 위해 개발자의 노력이 필요함.
"
"https://news.hada.io/topic?id=12483","대부분의 16세 청소년들이 방에 서버를 두지 않는다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      대부분의 16세 청소년들이 방에 서버를 두지 않는다

청소년의 서버 이야기

     * Varun이라는 이름의 청소년이 자신의 방에 서버 두 대를 두고 있음.
     * 직접 코딩한 다양한 프로젝트를 서버에서 호스팅하고 있으며, 이에 대한 열정을 가지고 있음.
     * 자신의 홈랩의 시작, 발전, 그리고 미래에 대한 이야기를 공유함.

홈 서버의 시작

     * 2020년 락다운 기간 동안 13세의 Varun은 웹 개발에 관심을 가지고 HTML 정적 웹사이트를 만들기 시작함.
     * 더 복잡한 애플리케이션을 만들면서 백엔드가 필요해지자, Replit을 사용하여 웹 앱과 스크립트를 호스팅함.
     * 더 많은 제어와 신뢰성을 원하여 자가 호스팅의 세계로 뛰어듦.

첫 번째 서버

     * eBay에서 구매한 Dell OptiPlex를 서버로 사용하기 시작함.
     * 미국에서 스위스로의 배송 과정에서 문제가 발생했지만, 결국 해결됨.
     * Windows 10 Pro를 서버 OS로 사용하기로 결정함.

서버 OS의 전환

     * Windows 업데이트로 인한 다운타임과 불편함을 겪은 후, 2020년 11월 Ubuntu Server로 전환함.
     * Linux에 빠르게 적응하고, nginx, MongoDB, 여러 프로젝트를 운영함.
     * Docker를 발견하여 제3자 소프트웨어의 설치와 실행을 간소화함.

새로운 서버의 도입

     * 기존 서버의 한계에 도달하여, Dell PowerEdge R720XD를 구매함.
     * 서버의 크기, 소음, 전력 소모 등의 문제를 일부 해결함.
     * Proxmox를 사용하여 가상 머신을 운영하고, Docker 내에서 모든 것을 관리함.

Replit 경험의 부활

     * Replit의 경험을 그리워하며, 자신만의 Replit 클론을 개발함.
     * 'Dock'n'Roll'이라는 도커 기반의 서비스를 통해 웹 앱을 코딩하고 실시간으로 호스팅함.
     * ExpressJS로 구축된 제어판, Monaco Editor, Docker, Redis, OpenResty 등을 사용하여 프로젝트를 관리함.

결론

     * Varun은 대학 진학과 이사를 앞두고 있으며, 서버를 어떻게 할지는 미지수임.
     * 자가 호스팅을 통해 많은 것을 배웠으며, 이를 통해 자유롭게 프로젝트를 운영할 수 있는 능력을 얻음.

GN⁺의 의견

     * Varun의 이야기는 기술에 대한 열정과 자기 주도적 학습의 중요성을 보여줌.
     * 자가 호스팅을 통해 실제 사용자가 있는 프로젝트를 운영하며 얻은 경험은 소프트웨어 엔지니어링에 대한 깊은 이해를 제공함.
     * 이 글은 청소년들에게 기술에 대한 호기심을 가지고 도전할 것을 장려하며, 실패와 성공을 통해 배우는 과정의 가치를 강조함.

        Hacker News 의견

     * 90년대 청소년 시절, 첫 컴퓨터를 얻고 모든 컴퓨터가 서버가 될 수 있다는 사실에 놀랐음. 비싼 랙이나 특별한 하드웨어가 필요 없이 Winsock, TCP/IP만 있으면 됨. 하드웨어보다는 Node 기반 앱을 인터넷에 제공하는 것에 초점을 맞추길 바람. 정적 IP가 필요 없고 동적 DNS 설정 방법만 알면 됨.
     * 아이패드 세대가 자라면서 파일 시스템조차 모르는 경우가 많아짐. 데스크톱 이후의 세계가 현실화되고 있음. 추상화는 편리하지만, 기술에 관심 있는 청소년들이 줄어들까 걱정됨.
     * 16살에 'Teach Yourself C' 책과 비디오 카드, Sony Trinitron을 구입했으나, C 언어의 다차원 배열과 포인터에 압도되어 포기하고 록스타가 되기로 함. 대학에서 자바 책을 구입하고 공부를 시작하면서 15년 이상의 기술자로서의 여정을 시작함. 기타 연주도 좋아하지만 기술자로서 더 능숙함을 알게 됨.
     * 16살에 작은 홈랩을 가지고 있음. 클라우드 서비스에서 벗어나 1Gbps 홈 네트워크와 함께 폐기된 하드웨어를 구입하여 물리적 서버 관리를 시작함. 현재 Proxmox를 사용하여 NAS와 여러 서버를 운영 중이며, Minecraft 서버, 개인 프로젝트, 취약점 스캐너, 텔레그램 봇, 친구들을 위한 VPS, 안드로이드 및 MacOS 빌드 VM, 저장소, ML 프로젝트, 학교 CTF 대회 인프라 호스팅 등을 함 (이탈리아 기준).
     * 서버를 비싼 랙 대신 Ikea 테이블에 놓고 사용하는 것을 보며, Lack Rack에 대해 알고 있는지 궁금함.
     * 고성능 PC를 직접 조립하고 BBS를 운영했던 경험이 소프트웨어 개발자가 되는 데 큰 도움이 됨. 이웃집 아이에게 게이밍 PC를 조립해주고, 그가 기술에 능숙해지는 것을 지켜봄. 아들에게 게이밍 랩탑을 사주고 딸에게는 데스크탑을 조립해주며 기술을 배우게 함.
     * 서버를 방에 두지 않고 지하실에 두었음. 집 전화를 위한 PBX, 파일 서버, 모니터링 서버 등을 운영하며, PBX가 아침마다 수학 문제를 풀도록 해서 깨움. 기술과 리눅스에 대한 경험을 종종 잊어버림.
     * 11살에 첫 ""서버""를 얻고 13살에 첫 직장을 얻은 후 eBay에서 ""진짜"" 서버를 구입함. 저렴한 PC를 구입하고 실험하는 아이들이 줄어들까 걱정됨.
     * 21살에 중고 랙 마운트 서버를 발견함. 저임금 직업을 가지고 있었지만, 비디오 인코딩 실험을 위해 더 강력한 컴퓨터가 필요했음. Craigslist에서 저렴한 서버를 찾아 커리어 방향을 정의함.
     * 기초적인 하드웨어와 운영 체제 지식이 점점 줄어들고 있음을 느낌. PaaS 작업 시에도 이러한 경험이 매우 가치 있음.
"
"https://news.hada.io/topic?id=12389","현대 CAPTCHA에 대한 실증적 연구 및 평가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       현대 CAPTCHA에 대한 실증적 연구 및 평가

현대 CAPTCHA의 경험적 연구 및 평가

     * CAPTCHA는 약 20년 동안 봇으로부터 보호 수단으로 널리 사용됨.
     * CAPTCHA를 무력화하거나 우회하는 기술이 발전함에 따라, CAPTCHA도 복잡성과 다양성 측면에서 진화하여 봇과 인간 모두에게 해결하기 어려워짐.
     * 현대 CAPTCHA를 해결하는 데 걸리는 시간과 사용자들이 이를 어떻게 인식하는지 조사하는 것이 중요함.
     * 이 연구에서는 현재 배포된 수정되지 않은 CAPTCHA의 사용자 해결 성능과 인식을 평가함.
     * 인기 있는 웹사이트의 수동 검사와 1,400명의 참가자가 14,000개의 CAPTCHA를 해결한 사용자 연구를 통해 데이터를 얻음.
     * 가장 인기 있는 CAPTCHA 유형 간에는 놀랍게도 해결 시간과 사용자 인식이 항상 일치하지 않는 중요한 차이가 있음.
     * 실험적 맥락의 영향을 조사하기 위해 비교 연구를 수행함. 특히, 계정 생성과 같은 더 자연스러운 작업의 일부로 CAPTCHA를 해결하는 것과 직접 해결하는 것의 차이를 조사함.
     * 몇 가지 잠재적인 혼란 요소가 있었지만, 실험적 맥락이 이 작업에 영향을 줄 수 있으며, 미래의 CAPTCHA 연구에서 고려해야 함을 결과가 보여줌.
     * 작업을 시작하고 완료하지 않는 참가자들을 분석하여 CAPTCHA로 인한 사용자 작업 포기를 조사함.

GN⁺의 의견

     * 이 연구는 CAPTCHA가 사용자 경험에 미치는 영향과 그 효율성에 대해 중요한 통찰을 제공함. 사용자가 CAPTCHA를 얼마나 빠르고 정확하게 해결하는지, 그리고 그들이 이를 어떻게 인식하는지에 대한 데이터는 웹 개발자와 보안 전문가에게 매우 유용함.
     * 실험적 맥락이 사용자의 CAPTCHA 해결 능력에 영향을 줄 수 있다는 발견은, 실제 웹사이트 설계 시 사용자 인터페이스와 상호작용을 고려할 때 중요한 고려사항임.
     * CAPTCHA로 인한 작업 포기는 웹사이트의 전환율과 사용자 만족도에 직접적인 영향을 미칠 수 있으므로, 이 연구는 사용자 친화적인 인증 방법을 개발하는 데 있어 중요한 기준점을 제공함.

        Hacker News 의견

     * Google CAPTCHA는 인공지능(AI)을 훈련시키기 위해 설계되고 배포되었음. 이로 인해 AI가 이를 잘 해결할 수 있게 되었다는 것은 놀라운 일이 아님.
     * 연구는 인간이 CAPTCHA를 어떻게 해결하는지에 대해 다루고 있으며, AI가 인간보다 뛰어나다는 내용은 찾을 수 없음.
     * 현대의 CAPTCHA는 단순한 이미지 퍼즐을 넘어 사용자의 행동 분석을 통해 작동함. 대부분의 사람들은 단순히 상자를 클릭하는 것만으로 충분함.
     * CAPTCHA를 해결하기 위해 설계된 AI는 Google 등으로부터 데이터를 훈련용으로 사용하지 않음. Google이 자체 봇을 훈련시키는 것은 상상할 수 있지만 확실하지 않음.
     * 사용자는 CAPTCHA를 해결하는 대신 소액 결제를 선호할 수 있으며, 이는 특히 자전거 선택과 같은 지루한 과정을 피하기 위함임.
     * 해커뉴스(HN)는 기본적이지만 검증된 방어 도구와 속도 제한을 사용하여 CAPTCHA 없이도 월 500만 명의 방문자와 일일 1000만 뷰를 처리함.
     * 제목이 오해의 소지가 있으며, 실제 연구 제목과 초록은 AI가 ""지금"" 인간보다 우수하다고 언급하지 않음.
     * CAPTCHA는 사용자가 작업을 포기하게 만드는 요소로, 특히 로딩 실패나 모호함 때문에 사용자 경험에 부정적인 영향을 줌.
     * CAPTCHA가 너무 어려워져 AI만이 해결할 수 있는 시점이 오면, 인간은 인터넷에서 완전히 배제될 것이라는 예측이 있었음.
     * 제출된 제목은 ""AI 봇이 이제 인간보다 CAPTCHA 해결에 뛰어남""이었으나, 이는 해커뉴스의 제목 규칙을 위반함. 원래 제목을 사용하고, 의견은 댓글로 나누어야 함.
     * 봇 운영자는 이미 인간 CAPTCHA 해결사를 고용할 수 있으며, AI로 대체되면 봇 운영자의 비용이 감소할 것임. 이로 인해 웹사이트 운영자는 더 어려운 CAPTCHA를 사용하게 되고, 결국 사용자는 이를 해결하기를 거부할 수 있음.
     * 최근의 CAPTCHA(물체를 회전시키거나 일치하는 항목을 찾는 퍼즐)는 과거의 텍스트 기반 CAPTCHA보다 선호됨.
"
"https://news.hada.io/topic?id=12402","해즈브로의 '위저즈 오브 더 코스트' 직원 해고, 당혹스러움을 자아내다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                해즈브로의 '위저즈 오브 더 코스트' 직원 해고, 당혹스러움을 자아내다

해즈브로, 위저즈 오브 더 코스트 직원 해고는 당혹스러움 — 두뇌 유출로 이어질 수 있음

     * 해즈브로가 자회사인 위저즈 오브 더 코스트의 직원들을 해고함.
     * 위저즈 오브 더 코스트는 해즈브로의 수익원으로 중요한 역할을 함에도 불구하고, 최근 강력한 실적에도 불구하고 직원 해고의 영향을 받음.
     * 이러한 조치는 2024년을 앞두고 두 회사 모두에게 문제를 야기할 수 있음.

해즈브로의 전략적 변화

     * 해즈브로 CEO 크리스 콕스는 ""전략적 변화""의 일환으로 전 세계적으로 추가적으로 1,100명의 직원을 해고할 것이라고 발표함.
     * 이는 1월에 발표된 해고 이후 추가된 것임.
     * 워싱턴주 렌턴에 위치한 위저즈 오브 더 코스트가 해고에서 보호될 것으로 보였으나, 실제로는 영향을 받음.

위저즈 오브 더 코스트의 성공에도 불구하고 해고 발생

     * 위저즈 오브 더 코스트는 해즈브로의 게임 부문을 이끌며 회사 내 유일하게 지속적으로 수익을 내는 부문임.
     * 2023년 3분기에 게임 부문의 수익이 40% 증가함에도 불구하고, 최소 20명의 직원이 해고됨.
     * 해고된 직원들 중에는 마이크 미어스, 에이미 달렌, 에이탄 번스타인, 래리 프럼, 브리 히스 등이 포함됨.

게임 개발 분야 전반에 걸친 해고 추세

     * 2023년 동안 전 세계적으로 9,000명 이상의 개발자들이 해고됨.
     * 이러한 해고는 비디오 게임 스튜디오의 사기 저하와 비즈니스 불안정을 초래함.
     * 성공에도 불구하고 해고가 발생하면, 직원들은 다른 곳으로 이동하는 것이 현명한 대응임.

위저즈 오브 더 코스트의 독특한 위치

     * 위저즈 오브 더 코스트는 비디오 게임 개발뿐만 아니라 수집 가능한 카드 게임과 테이블탑 RPG에서도 지배적인 위치를 차지함.
     * 불만을 가진 직원들에게는 다른 곳으로 이동할 수 있는 기회가 제한적임.

위저즈 오브 더 코스트와 오픈 게이밍 라이선스 논란

     * 위저즈 오브 더 코스트는 오픈 게이밍 라이선스를 폐지하는 방안을 모색했다는 보고서가 유출됨.
     * 이로 인해 경쟁사들이 새로운 독립적인 라이선스 협정인 ORC를 만들게 됨.
     * 이러한 변화로 인해 위저즈 오브 더 코스트의 직원들이 파이조와 같은 독립 회사로 이동할 가능성이 있음.

위저즈 오브 더 코스트의 2024년 계획

     * 위저즈 오브 더 코스트는 2024년 _D &D_의 50주년을 맞아 큰 규모의 규칙 업데이트와 새로운 프로젝트를 계획하고 있음.
     * 해즈브로가 위저즈 오브 더 코스트를 계속해서 무시한다면, 현재의 호황을 갑작스럽게 종료시킬 수 있음.

  GN⁺의 의견

     * 위저즈 오브 더 코스트의 해고는 회사의 강력한 실적에도 불구하고 발생한 것으로, 이는 주주들의 압력에 의한 것일 수 있음.
     * 이러한 해고는 비디오 게임 산업 전반에 걸쳐 두뇌 유출을 초래하고, 직원들의 사기 저하와 비즈니스 불안정을 야기할 수 있음.
     * 오픈 게이밍 라이선스 논란과 관련하여 위저즈 오브 더 코스트의 경쟁사들이 독립적인 라이선스 협정을 만들어내는 등의 변화가 발생하고 있으며, 이는 업계 내에서 새로운 기회와 동맹을 창출할 수 있음.

        Hacker News 의견

     * Hasbro의 D&D Open Game License 시도와 품질 문제
          + Hasbro가 D&D Open Game License를 소급적으로 폐쇄하려 한 것은 배신으로 여겨져 많은 반발을 일으켰음.
          + Hasbro의 제품은 종종 과대평가되고, 내용물이 부족하며, 품질이 떨어지는 경향이 있음.
          + D&D의 인기는 높아졌지만, 더 가치 있는 관리자의 손에 있었으면 하는 바람이 있음.
     * 매직 더 개더링(MtG)의 변화에 대한 그리움
          + 2016년의 MtG에 대한 그리움이 있으며, 카드의 희소성과 수집 가치에 대한 변화에 대해 아쉬움을 표현함.
          + 카드 수집에 대한 열정이 예전만 못하며, 현재는 카드 가치가 예전만큼 높지 않다고 느낌.
          + 게임을 여전히 사랑하지만, 투자자, TCG를 인식하는 사람들, 모든 카드가 가치 없어야 한다고 생각하는 사람들 사이에서 갈등이 있음.
     * D&D의 오리지널 에디션에 대한 애정
          + 오리지널 D&D 에디션을 사용하여 게임을 즐기고 있으며, 브랜드는 사라졌지만 게임은 여전히 살아있다고 느낌.
     * Hasbro의 재정적 어려움과 WotC 매각 가능성
          + Hasbro가 Transformers 영화 시리즈의 권리를 판매한 것은 주류 영향력에 큰 타격이며, WotC를 매각할 가능성이 높아 보임.
          + 회사가 어려움을 겪고 있으며, 유동성 확보를 위해 이익이 나는 부문까지 축소할 수 있음.
     * Hasbro의 결정에 대한 정보 부족
          + 회사 내부에서 일하지 않는 이상, Hasbro의 결정이 좋은 것인지 판단하기 어려움.
     * Wizards 제품 품질 저하에 대한 우려
          + Wizards의 제품 품질이 몇 년 동안 저하되고 있으며, D&D와 MtG 모두 품질이 평균 이하라는 인식이 있음.
          + 시장 지배력이 있기 때문에 품질에 대한 관심이 떨어지는 것 같음.
     * 보드 게임 'quoridor' 온라인 플랫폼 개발과 저작권 문제
          + 'quoridor'라는 게임을 온라인에서 즐길 수 있는 플랫폼을 개발 중이나, 게임 메커니즘의 저작권 여부가 불확실함.
          + 저작권에 대한 올바른 허가를 얻는 방법에 대한 조언이 필요함.
     * Hasbro의 ""Entertainment"" 부문 손실에 대한 정보 요청
          + Hasbro의 ""Entertainment"" 부문이 올해 8억 달러 이상의 손실을 입은 이유에 대한 자세한 정보 요청.
     * Magic the Gathering의 품질 저하 우려
          + Magic the Gathering이 품질 저하를 겪을 것이라는 예상과 함께, 브랜드 자산을 탕진하려는 새로운 리더십에 대한 비판이 있음.
          + 브랜드를 이용한 수익 창출 전략에 대한 우려와 비판이 제기됨.
     * 강한 실적에도 불구하고 발생하는 해고에 대한 의문
          + 경제적 필요성을 증명하지 않고 이루어지는 해고에 대한 의문을 제기함.
"
"https://news.hada.io/topic?id=12467","ArXiv, 이제 HTML 형식으로 논문 제공","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ArXiv, 이제 HTML 형식으로 논문 제공

과학 연구에 대한 공평한 접근

     * arXiv는 모든 사용자가 장애를 가진 사람들을 포함하여 과학 연구에 공평하게 접근할 수 있도록 노력 중임.
     * 2023년 12월 18일부터 TeX/LaTeX으로 제출된 모든 논문에 대해 HTML 형식 버전을 생성하고 있음(12월 1일 이후 제출된 논문이며 HTML 변환이 성공한 경우에 한함).

HTML 형식의 추가

     * HTML은 PDF를 대체하는 것이 아니라 arXiv 사용자들에게 제공되는 추가적인 형식임.
     * 제출자들은 제출 시 PDF와 마찬가지로 HTML 버전을 미리 볼 수 있는 기회를 가짐.
     * 논문의 초록 페이지에 접속하면 PDF 링크 바로 아래에서 HTML 논문을 볼 수 있는 링크를 확인할 수 있음.

장애를 가진 과학자들의 접근성 향상

     * 장애를 가진 과학자들이 연구에 접근하는 데 장벽을 겪고 있어 HTML 형식으로 된 논문을 제공하는 요청이 있었음.
     * HTML 형식의 논문은 스크린 리더와 같은 기술을 통해 더 쉽고 정확하게 읽힐 수 있어, 시각 장애, 저시력, 난독증 등을 가진 연구자들에게 도움이 됨.

HTML 변환의 실험적 단계

     * 현재 HTML 변환은 실험적 단계에 있으며, 더 정확한 변환을 위해 작업 중임.
     * 모든 논문이 정확하게 HTML로 변환되는 것은 아니지만, 접근성이 필요한 연구자들을 위해 가능한 빠르게 이 기능을 제공하고자 함.
     * HTML 변환이 실패한 제출물에 대해서는 제출을 막거나 보류하지 않지만, 저자들이 HTML 버전을 주의 깊게 검토하기를 바람.

HTML 프로젝트에 대한 감사

     * 과학을 모두에게 접근 가능하게 만드는 큰 발걸음인 실험적 HTML에 대해 감사의 말을 전함.
     * LaTeX Project, NIST의 LaTeXML 팀 등 arXiv의 HTML 논문 프로젝트 파일럿에 협력한 모든 이들에게 감사함.
     * arXivLabs 협력 프로젝트인 ar5iv에 익숙한 사용자라면, 이 HTML 제공이 그 영향력 있는 프로젝트를 완전히 ""내부화""하는 것임.
     * 최종 목표는 arXiv의 전체 코퍼스를 백필하여 모든 논문에 HTML 버전을 제공하는 것이지만, 현재는 새 논문에 대해서만 이 기능을 제공함.
     * HTML 논문 프로젝트에 대한 버그 보고서를 작성해준 모든 arXiv 사용자들에게도 감사하며, 팀은 현재 버그 보고서를 분석 중이며 새해에 첫 번째 개선 작업을 할 예정임.

GN⁺의 의견

     * arXiv의 HTML 형식 제공은 연구 접근성을 향상시키는 중요한 진보로, 특히 장애를 가진 과학자들에게 큰 도움이 될 것임.
     * 이러한 변화는 과학 커뮤니티 내에서 기술적 장벽을 줄이고, 연구의 포용성을 높이는 데 기여할 것임.
     * 실험적 단계임에도 불구하고, arXiv가 이 기능을 서둘러 제공하기로 한 결정은 연구자들의 필요를 우선시하는 긍정적인 자세를 보여줌.

        Hacker News 의견

     * 아티클에 HTML 예시가 링크되어 있지 않지만, 여기 임의의 링크가 있음: arXiv HTML 예시 링크. 다크 모드가 지원되는 것이 멋짐. 토글은 보이지 않지만 시스템 모드에 따라 렌더링됨. 모바일에서 arXiv 접근성이 크게 향상될 것으로 보임.
          + HTML이 연구와 학문을 위한 접근성과 협업을 지원하기 위해 발명된 지 30년이 지난 후, 백악관이 새로운 접근성 지침을 발표함. 이는 PDF가 아닌 HTML로 처음으로 공식적인 새 정책을 발표한 것임. 백악관 접근성 지침 링크
          + arXiv의 중요한 새로운 AI/ML 논문에 대해 정보를 얻고 싶다면, Emergent Mind를 확인해보길 바람. 이 사이트는 소셜 미디어에서 arXiv 논문 언급을 확인하고(해커뉴스, Reddit, X, YouTube, GitHub 등), 소셜 미디어 활동량과 논문 게시 시간을 기반으로 논문을 순위 매김함. 각 논문에 대해 GPT-4를 사용해 요약하고, 소셜 미디어 토론, 논문 참조, 관련 논문에 대한 링크를 제공함. 아직 새로운 사이트이며 많이 공유되지 않았음. 개선을 위한 피드백이나 요청을 환영함.
          + 사이드바에 HTML 링크가 없는 논문이 있다면, HTML로 렌더링되지 않는 이유를 어떻게 알아내고 수정할 수 있는지 궁금함.
          + 제출자들이 PDF 버전과 함께 자신들의 HTML 버전을 업로드할 수 있는 기회를 제공하는 것이 좋을 것 같음. 자동 변환 과정에만 의존하는 대신에 말이지.
               o HTML 버전의 논문에 문제가 있다고 연락이 오면, PDF의 변경이 HTML 생성에 영향을 미칠 것을 희망하는 것 외에는 수정할 방법이 없어 저자들이 좌절할 수 있음. PDF에서 포맷 문제를 직접 수정하는 것이 더 쉬움.
               o 논문의 대체 포맷에 대한 실험을 허용하는 것도 흥미로울 것임. 예를 들어, 논의 중인 프로그래밍 언어를 사용해볼 수 있는 샌드박스를 포함한 논문이나, 다변수 미적분에 대한 논문에서 어떤 함수의 3차원 플롯과 상호작용할 수 있음.
          + 웹에 항상 베팅하는 것은 매우 좋은 결정임.
          + 이 서비스를 위해 사용되는 도구는 arXiv-readability임. 몇 번의 클릭을 절약하기 위해 링크 제공.
          + PDF는 텍스트 문서를 렌더링하는 데 있어 HTML보다 훨씬 뛰어남. 그리고 차이는 상당함. 이것은 10년, 심지어 15-20년 전에도 가능했음. 이것이 이루어지지 않은 것은 단순한 관성이 아님. Latex와 PDF는 텍스트 렌더링이 훨씬 뛰어나고, 정적 포맷은 시간에 따라 고정된 상태를 잠그는 것이 뒤에 오는 사람들에게 유용함. HTML의 본질적으로 유동적인 성격과 달리 말이지. 그리고 다시 말하지만, 렌더링은 비교할 수 없으며, 그것은 의식적 또는 무의식적인 품질 신호를 전달함.
          + arXiv에서 PDF 형식의 논문 제공을 중단하지 않기를 바람. 컴퓨터에서도 PDF를 읽는 것을 선호함.
          + arXiv에서 큰 PDF(100MB 이상, 고해상도 이미지 생성에 중점을 둔 ML 논문에서 흔함)를 열 때, 로딩 바 외에는 아무것도 렌더링되지 않고 10초 이상의 상당한 로딩 시간이 있음. 이 지연의 원인이 무엇인지 궁금함. 네트워크 문제인가, 아니면 Chrome이 큰 PDF를 렌더링하는 데 정말 느린가? PDF는 렌더링을 시작하기 전에 완전히 다운로드되어야 하는가? 어쨌든 이 지연은 arXiv에 대한 유일한 불만이며, 문서 텍스트가 즉시 로드되는 점진적으로 렌더링되는 HTML 문서는 큰 개선이 될 것임.
"
"https://news.hada.io/topic?id=12417","FSearch - Unix-Like 시스템을 위한 빠른 파일 검색 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                FSearch - Unix-Like 시스템을 위한 빠른 파일 검색 도구

     * Windows의 Everything에서 영감을 받은 빠른 파일 검색 기능 제공
     * C로 작성되었으며 GTK3 기반
     * 검색 입력 도중 즉시 결과 보이기
     * 다양한 검색 옵션
          + AND/OR/NOT, 그루핑, 와일드카드, 정규식
          + Modifier: case:/nocase:, files:, folders:
          + Function: childcount, contenttype, datemodified, depth, parent, size,..
     * 인덱싱할 폴더들 추가/제외 가능

   오.. 덕분에 wox, everything 이라는 두가지 좋은 도구를 알게됐습니다. 감사합니다!

   오 좋네요

   Everything - 윈도우즈용 빠른 파일 찾기 도구
   윈도우에는 필수로 설치하는 도구중에 하나인데, Unix에서도 이제 얼추 가능하겠네요.
"
"https://news.hada.io/topic?id=12451","퍼플렉시티 랩스 플레이그라운드","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            퍼플렉시티 랩스 플레이그라운드

        Hacker News 의견

     * 한 사용자는 서비스에 혼란스러움을 느꼈으며, 서비스가 빠르긴 하지만 Google Lens라고 답한 후에는 무작위 정보를 제공했다고 언급함.
     * 다른 사용자는 온라인 모델이 최신 정보를 제공하는 데 효과적이라고 평가하며, 예를 들어 최근의 축구 경기 결과를 정확히 알려주었다고 함. 또한, 이들이 자체 검색 인덱스를 사용한다고 블로그에서 밝힌 것에 대해 언급함.
     * 또 다른 사용자는 서비스가 혼란을 주기 위한 것인지, 아니면 실제로 도움이 되는 것인지에 대해 의문을 제기함. Bing Chat에서 소개된 ""no_search"" 기능에 대한 설명을 받았지만, 그 내용이 이해되지 않았다고 함.
     * 한 사용자는 이 서비스가 챗봇이 아니라 웹에서 정보를 검색하는 요청으로 사용자의 응답을 해석한다고 지적함.
     * Google Lens에 대한 질문에 대한 답변을 받은 사용자는 그 기능과 AI 모델 ResNet50에 대해 설명함.
     * ollama를 리눅스 기기에 다운로드한 사용자는 자신의 시스템 사양에도 불구하고 메모리 오류를 겪었으며, 이러한 서비스들이 어떻게 수천 개의 요청을 처리하는지 놀라워함. 또한 anyscale의 가격 정책에 대해 긍정적인 의견을 표함.
     * 대규모 모델을 실행하는 데 있어서의 복잡성을 감사하게 생각하는 사용자가 있으며, Playground가 반응성이 좋고 최소주의적인 디자인을 가지고 있다고 평가함.
     * AI가 잘못된 답변을 하는 것에 대한 논의가 지루하다고 느끼는 사용자가 있음.
     * UX 실패에 대해 언급한 사용자는 처음에는 단순한 챗봇으로 생각하고 닫았다가, 다시 시도해보았지만 결국 무엇인지 이해하지 못하고 관심을 잃었다고 함.
     * ""what is this?""라는 질문에 대한 응답을 받은 사용자는 Google Lens와 ""What Is This? - Learn Visually""라는 교육 앱에 대한 설명을 받았으며, 이 앱이 어떻게 시각적 학습을 촉진하는지 설명함.
"
"https://news.hada.io/topic?id=12440","DebConf24 - 한국 부산 개최 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        DebConf24 - 한국 부산 개최 예정

     * 연례 데비안 프로젝트 개발자의 회의인 DebConf가 원래 2024년에는 이스라엘 하이파에서 열릴 예정 이였으나, 전쟁으로 인한 이스라엘 현지 상황 악화로 최근 DebConf24 개최지 입찰을 다시 받음.
     * 한국 부산, 포르투갈 아베이루, 영국 버밍엄, 프랑스 브레스트에서 입찰에 참여 하였고. DebConf Committee 검토 결과 한국 부산이 DebConf24 개최지로 결정됨.

   누구나 참가 가능한 행사나요?

   그나저나 부산의 단점에 교통이 안적힌 것이 의외네요.

   그건 승용차를 운전할때만 해당되고 대중교통은 편해요

   풀코스를 보여주겠네요

   너무 기분 좋은 뉴스네요. 잘 준비하고 이번 경험으로 얻은 노하우를 활용해서 다른 개발행사도 지방에서 많이 볼 수 있으면 좋겠습니다.

   꽤 의미있는 국제행사를 한국에서, 그것도 부산에서 한다니 너무 좋은 뉴스네요-
   오랫동안 데비안 기여해오신 분들이 proposal 을 작성해주셨네요.
   그런데 ""성별에 따라 분리된 식당"" 은 이해가 가지 않네요.
   우리나라 상식적으로도 그렇고, 부경대 홈페이지 등을 둘러봐도 남여 구분된 식당 이야기는 없는데.. 오해가 아닐까 싶습니다.

   뒷북이긴 합니다만(?) 당시 기숙사에 있는 학생 식당 활용을 검토 했어서 그럴 겁니다. 지금은 다른 대안 찾아서 대체하지 않았을까 싶네요.

   데비안 보기 전까진 순간 Dev 오타인줄 알았네요

   한국의 장점/단점이 재미나네요.
   부경대학교 공과대학 빌딩을 쓰나 봅니다.
     * 장점
          + 강력한 Bid, 아마도 가장 안전한 선택이 될 것
          + 장소와 음식에 대한 예상 비용이 매우 낮음: (6만 달러)
          + Venue의 모든 것이 한 장소에 있음
     * 단점
          + 학생식당의 이상한 제한사항(비건 옵션 없음. 성별에 따라 분리된 식당) ; 대체 케이터링을 찾아야함
          + 태풍 시즌!

   비딩한 자료를 살펴보는 것도 다른 개발관련 행사 유치시에 도움될 듯 합니다.
   훌륭한 정리네요
   https://wiki.debian.org/DebConf/24/Bids/Korea

   이 부분이 인상적이었습니다.

   Payment is easy in Korea.
   Credit cards are accepted virtually everywhere. No cash required.
   No additional tips or tax. You pay exactly as much as the written prices, which include all of tax and service fees.

   자유소프트웨어 옹호자가 많은 debconf에서 개인정보 침해 우려가 있는 credit card 중심은 오히려 단점이군요
"
"https://news.hada.io/topic?id=12399","위키피디아 "테세우스의 배" 원문 문구 0% 남아 있음","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     위키피디아 ""테세우스의 배"" 원문 문구 0% 남아 있음
"
"https://news.hada.io/topic?id=12385","제품은 늘고 제품 관리자는 줄어드는 추세","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         제품은 늘고 제품 관리자는 줄어드는 추세

제품 개발팀에는 더 적은 PM이 필요하다

     * 많은 회사들이 과도하게 많은 제품 관리자(PM)를 고용하는 경향이 있음.
     * PM들은 종종 프로젝트 관리 작업과 로드맵 업데이트에 시간을 할애하는 반면, 실제로는 비즈니스를 위한 제품 최적화에 집중해야 함.
     * 제품 팀보다 적은 수의 PM이 필요하며, 이는 제품, 팀, 비즈니스의 요구에 따라 달라질 수 있음.

스타트업에게 의미하는 바

     * 스타트업에서 PM을 고용하는 이상적인 시기는 창업자들이 모든 중요한 제품 결정에 관여할 수 없을 때임.
     * 조직 규모가 50 ~ 100명 사이이고 3 ~ 5개의 제품 팀을 가질 때가 되면, 이미 명확한 전체 제품 전략이 있어야 하며, 누군가가 그 전략을 실행하고 더 낮은 수준에서 방향과 결정에 관여할 필요가 있음.
     * 경험이 많은 PM을 원하며, 창업자들은 여전히 제품의 사실상 책임자로 활동해야 함.

팀이 제품 중심이 되도록 만드는 방법

     * 제품 개발팀은 사용자와 그들의 맥락에 대한 더 나은 이해를 필요로 하며, 제품 형성에 적극적으로 참여해야 함.
     * PM은 UX, 와이어프레이밍, 진행 상황 추적, 스탠드업 조직, PRD/스펙의 단독 저자 등을 담당하는 것이 아니라, 제품의 비전을 명확히 전달하고, 팀이 올바른 문제를 해결하며, 제품의 명확한 방향과 비즈니스 요구와의 일치를 유지하는 데 집중해야 함.

제품 중심 팀 만들기

     * 디자인, 엔지니어링, 제품/창업자 간에 논의를 시작하기 전에 함께 앉아서 어떻게 진행할지에 대해 합의하고 계획을 세움.
     * 모든 팀원이 사용자 연구와 사용성 테스트에 참여하도록 함으로써 사용자가 제품을 사용하는 모습을 보고 인사이트를 얻음.
     * 팀 관리 방식에 주의를 기울여야 하며, 티켓 마감 수나 스토리 포인트로 팀 성과를 측정하는 것은 제품을 만드는 것이 아니라 티켓을 마감하는 것이 업무라는 잘못된 메시지를 줄 수 있음.
     * PM 도구 사용을 피하고, 모든 팀원이 사용자 피드백, 인사이트, 데이터, 스펙, 로드맵에 접근하고 이해할 수 있도록 해야 함.

GN⁺의 의견

     * 제품 관리자의 역할은 제품 개발 과정에서 중요하지만, 그 수가 많다고 해서 반드시 제품 중심적인 조직이 되는 것은 아님.
     * 제품 개발은 협업적인 노력이 필요하며, 디자인과 엔지니어링 팀이 사용자 이해도를 높이고 제품 형성에 적극적으로 참여해야 함.
     * 이 기사는 제품 팀의 효율성을 높이기 위한 실질적인 조언을 제공하며, 팀원 모두가 제품 전략과 비즈니스 목표를 공유하고 이해하는 것의 중요성을 강조함.

        Hacker News 의견

     * 제품 관리자(Product Manager, PM)에 대한 경험 공유
          + 한 엔지니어링 매니저는 제품 관리가 회사에서 중요한 역할이지만 어려운 일이라고 언급함.
          + 능력이 떨어지는 PM들은 종종 엔지니어링 팀을 지나치게 관리하거나 정치적 행위에 더 관심을 가짐.
          + 조직에서 PM을 각 팀의 '미니 CEO'로 배치하고 기술적 역량이 부족하면 '미니 CTO'와 짝을 이루는 것이 좋다고 제안함.
     * 개발자에 대한 인센티브 문제
          + 개발자들은 기술적 성취에 더 열정적이며, 이는 종종 공식적인 보상과 연결됨.
          + 고객 연구와 같은 비기술적 노력은 기술적 성취만큼 인정받지 못할 수 있음.
          + 조직이 사용자 중심의 가치를 더 중요하게 여기고 보상 체계를 변경하는 것은 관리직에 큰 변화를 요구할 것임.
     * AI 아트에 대한 의견
          + AI 아트를 블로그 기사의 주요 이미지로 사용하는 것에 대한 불만을 표현함.
          + AI 아트가 가치 있는 도구임에도 불구하고, 단순한 공간 채우기로 사용되는 것은 비효율적이라고 지적함.
     * 제품 관리자(PM)의 역할에 대한 비판
          + 좋은 PM은 엔지니어링과 사용자 사이의 간극을 메우는 일을 지속적으로 해야 함.
          + 많은 PM들이 문서 작업에만 몰두하고 실제 제품 관리보다 프로젝트 관리 업무를 수행하는 경향이 있음.
     * 우수한 제품 관리자에 대한 경험담
          + 한 엔지니어는 기술적 복잡성과 비즈니스 필요성을 모두 이해하는 뛰어난 PM과 함께 일한 경험을 공유함.
          + 대부분의 PM들은 단순히 역할을 수행하는 사람들로, 실제로는 큰 영향력을 가지지 않음.
     * 조직 내 역할 비율에 대한 고민
          + 프론트엔드 엔지니어 대 백엔드 엔지니어, 엔지니어링 매니저 대 개별 기여자(IC), 기술 작가 대 엔지니어, PM 대 엔지니어 등의 비율을 조정하여 최적의 효율성을 추구함.
          + 엔지니어링 팀의 자율성을 존중하고 미시 관리를 줄이는 것이 중요함.
     * 기술적 경험이 있는 PM 선호
          + 엔지니어링 관점을 이해할 수 있는 기술적 배경을 가진 PM과 일하기가 더 쉬움.
          + 기술적 경험이 없는 PM들은 비즈니스 중심적이며, 이는 때때로 필요하지만 항상 그런 것은 아님.
     * 제품 관리와 제품 디자인의 통합 필요성
          + 제품 관리 기능의 대부분은 제품 디자인과 합쳐져야 함.
          + 비기술적인 사람들이 기술 업계에 진입하고 기술 급여를 받기 위해 PM 역할이 과도하게 존재함.
     * 역할과 개인의 능력에 대한 고찰
          + 사람들은 각자 독특하며, 제품 관리 역할이 타고난 능력인지 아니면 단순히 부여된 직함인지에 대한 의문을 제기함.
          + 조직은 개인의 주도성을 중요시하고, 다재다능한 인재를 채용해야 함.
     * 20년 경력의 제품 관리자의 견해
          + PM의 비율이 중요하며, 많은 PM들이 제품 전략이나 비전에 의미 있는 기여를 하지 못함.
          + 제품 관리자가 실제 제품을 소유하지 않는 것은 문제가 있음.
"
"https://news.hada.io/topic?id=12453","테슬라, 오랫동안 결함이 있음을 알고 있었던 부품의 고장에 대해 운전자들을 비난","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              테슬라, 오랫동안 결함이 있음을 알고 있었던 부품의 고장에 대해 운전자들을 비난

        Hacker News 의견

     * 한 사용자는 테슬라에 대해 강한 감정은 없지만, 제품의 품질에 대해 실망감을 표현함.
          + Model Y의 비전 기반 시스템이 재난 수준이라고 언급하며, 안개 낀 날에 크루즈 컨트롤이 작동 중단되는 등 여러 문제를 경험함.
          + 반대 차선의 차량을 잘못 인식해 급제동하는 문제, 고속도로 출구를 잘못 인식해 급제동하는 문제 등을 겪음.
          + 후진 시에도 비전 시스템이 많은 오류 경고를 내며, 소리 엔지니어링이 부족함을 지적함.
          + 긴급 제동 시스템에 문제가 있어 서비스를 기다리고 있으며, 차량 인도 시에도 품질 문제를 겪음.
          + 유럽에서 Model Y의 대안을 찾기 어렵다고 언급하며, 온라인 리뷰의 신뢰성에 의문을 제기함.
     * 또 다른 사용자는 테슬라 차량을 과대 광고된 제품에 비유하며, 품질 관리 문제로 인해 사전 주문을 취소했다고 언급함.
     * 한 사용자는 일론 머스크가 테슬라를 최고의 차라고 주장했지만, 신뢰할 수 있는 차량 제조업체들이 전기차 부문에서 따라잡으면서 그 주장이 무의미해졌다고 비판함.
     * 뉴스 기사에 따르면, 머스크가 디즈니+ 앱을 테슬라 전체 차량에서 제거한 것에 대해, 테슬라 소유주들과 주주들이 그들과 무관한 싸움에 휘말려 있다고 느낄 것이라는 의견이 있음.
     * 기사에서 언급된 조향 너클 결함에 대해, 실제 제조업체에서는 드문 일이라며 테슬라의 안전성에 대한 일반 대중의 인식에 놀라움을 표현하는 의견이 있음.
     * ""Car Talk""의 Tom과 Ray는 차량 문제를 세 가지로 분류하며, 라디오와 같은 중요하지 않은 문제부터, 엔진과 같이 차량을 멈추게 하는 문제, 그리고 브레이크와 서스펜션과 같이 생명을 위협하는 문제까지 언급함.
     * 한 사용자는 테슬라 차량의 뒷문이 제대로 맞지 않는 문제를 경험하며, 이러한 기본적인 문제조차 해결하지 못한다면 움직이는 부품들은 어떻게 관리할지 의문을 제기함.
     * 기사에는 테슬라 관리자가 회사가 100년 역사를 가진 GM이나 Ford와 같지 않아 아직 모든 문제를 해결하지 못했다는 발언이 포함되어 있으며, 이에 대해 물이 부식성이라는 것을 알아내는 데 100년이 걸리지 않는다는 비꼬는 의견이 있음.
     * 테슬라 차량의 서스펜션 조기 실패를 경험한 소유주들에 대한 언급이 있으며, 일부는 이를 'whompy wheel'이라고 부르기도 하며, 일부 모델에 대한 대체 전륜 제어 암을 제작한 애프터마켓 회사도 있음.
     * 경제학의 주요 논문 중 하나가 정보 비대칭으로 인해 전체 시장의 품질이 저하되는 현상을 다루고 있으며, 이는 '레몬 차량'에 대한 것임.
"
"https://news.hada.io/topic?id=12368","OpenAI, ByteDance가 자체 AI 모델 훈련에 GPT를 사용해서 계정 중단","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            OpenAI, ByteDance가 자체 AI 모델 훈련에 GPT를 사용해서 계정 중단

     * OpenAI가 ByteDance의 계정을 정지시킴
     * ByteDance는 GPT를 사용하여 중국에서 자체 경쟁 모델을 훈련하는 데 사용했다고 함
     * OpenAI 대변인 Niko Felix는 API 고객이 기술을 선한 목적으로 사용해야 한다고 언급하며, ByteDance의 API 사용이 적었지만 조사를 위해 계정을 정지시켰다고 발표함
     * ByteDance는 대부분의 GPT 사용을 Microsoft의 Azure 플랫폼을 통해 진행했으며, Microsoft가 OpenAI와 같이 ByteDance의 접근을 정지할지 여부는 아직 불분명함

GN⁺의 의견

     * 이 기사는 인공지능 기술의 사용과 관련된 윤리적 문제와 지적 재산권의 중요성을 강조함.
     * ByteDance의 행위는 기술 분야에서의 경쟁과 혁신이 어떻게 때로는 법적 및 도덕적 경계를 시험할 수 있는지 보여줌.
     * 이 사건은 다른 기업들에게도 경고의 메시지를 보내며, AI 기술을 사용할 때 명확한 사용 정책과 라이선스 조건을 준수해야 한다는 점을 상기시킴.

        Hacker News 의견

     * 저작권 위반에 대한 이중 잣대

     한 사용자는 OpenAI가 다른 사람의 저작권이 있는 작업을 사용하면서 자신들의 작업에 대해서는 같은 기회를 부정하는 것이 위선적이라고 지적함. 법적 지식이 없음을 전제로, 도덕과 법의 차이에 대해 혼란을 느낌.
     * 저작권의 극단적 버전

     OpenAI가 세계의 이미지와 텍스트를 트레이닝 데이터로 사용할 수 있지만, 그 시스템 내에서는 경쟁자들이 사용할 수 없다는 점을 지적하며, 이를 상상할 수 있는 저작권의 가장 깨진 버전이라고 비판함.
     * 독점금지법 문제 제기

     저작권 이외에도 독점금지법 문제가 제기됨. 법원은 일반적으로 역공학 금지 조항을 지지하지만, 인터페이스 복사는 시장 대체품을 장려하기 때문에 더 환영받음. OpenAI가 고객에게 명백히 열려 있는 도구의 출력 사용을 제한할 수 있는지 여부가 새로운 문제임. 또한, 이는 데이터베이스 라이선스가 고객의 비교 출판을 방지하는 것과 유사하며, 이는 반경쟁적일 수 있음. 독점금지 정책은 주로 한 플레이어가 시장을 지배하는 성숙한 시장에서 주로 동기 부여됨. 그러나 성장하는 시장에서는 같은 분석이 적용되는지 의문임. 시장이 빠르게 성장하고 있다면, 지배력이 불확실하기 때문에 우려가 완화될 수 있음. 반면, 시장이 특히 포획에 취약하다면, 초기 리더들은 더 많은 주의를 요할 수 있음. 그러나 독점의 1차 효과가 경쟁 감소에 미치는 영향 외에도, 2차
     효과는 경쟁자에 대한 투자 감소로 이어져 반경쟁적 효과를 낳을 수 있음. 이러한 우려는 시장 초기 단계에서 가장 높을 수 있음. 관련된 변호사 블로그가 있는지 궁금함.
     * 경쟁자 차단과 독일 최악의 신문과의 협력

     OpenAI가 경쟁자를 차단하고 독일의 최악의 신문과 협력하며, MS가 OpenAI 이사회에 자리를 가지고 있음을 지적함. Altman의 복귀가 정말 잘 풀리고 있음을 암시함.
     * API 사용 정책과 '선한' 기술 사용

     ByteDance가 OpenAI의 API를 최소한으로 사용했지만, OpenAI가 추가 조사를 위해 그들의 계정을 정지시킴을 언급함. OpenAI는 모든 API 고객이 기술을 '선한' 목적으로 사용하도록 하는 사용 정책을 준수해야 함을 강조함. '선한'이라는 말은 많은 사람들에게 좋은 것으로 들리지만, 다른 사람들에게는 악으로 보일 수 있는 회색 영역이 항상 존재함을 지적함.
     * 내부 커뮤니케이션 플랫폼에서의 부정 사용 논의

     ByteDance 직원들이 내부 커뮤니케이션 플랫폼인 Lark에서 '증거를 희석화하는 방법'에 대해 논의하는 것을 목격함. 부정 사용이 만연하여 Project Seed 직원들이 정기적으로 API 접근 한도에 도달함을 언급함. 다른 모델들이 GPT-3.5를 빠르게 따라잡는 것처럼 보이지만 GPT-4를 능가하지 못하는 것에 대해 의문을 가질 때, 그들이 단순히 GPT-3.5의 출력을 트레이닝하는 것이 아닌지, 혹은 거짓말을 하고 있는 것은 아닌지 기억해야 함을 조언함.
     * 큰 플레이어들의 모델을 이용한 부트스트랩

     IBM Watson이 새롭고 뜨거운 것이었을 때, 큰 플레이어들의 모델을 사용하여 자신의 모델을 부트스트랩하는 것이 얼마나 쉬울지 궁금해했음. OpenAI가 등장하면서 더 이상 필요하지 않을 것 같았지만, 그들이 더 이상 모델을 공개하지 않기로 결정했을 때 상황이 바뀜. 그러나 Llama와 많은 다른 사람들이 그 횃불을 이어가고 있음. 모델을 향상시키는 흥미로운 방법으로 보임.
     * 모델 추출 방지의 불가능성

     ByteDance나 다른 누구라도 OpenAI의 모델을 추출하려는 충분한 동기가 있다면, 이를 방지할 수 없음을 지적함. 다른 사람들에게 데이터 수집을 위임할 수 있음.
     * API를 통한 모델 훈련과 복제 방법에 대한 질문

     사용자는 API 접근만 가능한 기존 모델인 ChatGPT를 사용하여 자신의 모델을 훈련하고 어떻게 그것의 측면을 복사할 수 있는지에 대해 설명해달라고 요청함. 모든 지식을 다루는 프롬프트 목록을 어떻게 시작하고, 유용한 출력과 말도 안 되는 환각을 어떻게 구별할 수 있는지에 대한 직관적 이해가 부족함을 표현함. 기사와 링크에서 설명하지 않는 중요한 세부 사항을 놓치고 있다고 느낌.
     * OpenAI가 ByteDance의 계정을 정지시킨 이유에 대한 풍자

     OpenAI가 GPT를 사용하여 자체 AI 모델을 훈련한 ByteDance의 계정을 정지시킨 것에 대해, 이는 사탕 가게에서 사탕을 훔친 아이가 자신의 동생이 그 사탕을 훔치는 것에 대해 불평하는 것과 유사하다고 풍자적으로 표현함.
"
"https://news.hada.io/topic?id=12425","성인이 되어 체스를 배우는 방법 (2021)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        성인이 되어 체스를 배우는 방법 (2021)

성인이 체스를 배우는 방법

     * 성인으로서 체스를 배우는 과정을 설명함.
     * 9개월 만에 ELO 점수 300에서 1500으로 향상된 경험을 공유함.
     * 체스 향상에 대한 일반적인 조언과 개인적인 연습 루틴을 제시함.

우리가 훈련하는 것

     * 체스는 단기 패턴의 게임으로, 전략보다는 '전술'이 중요함.
     * 전술은 게임의 균형을 깨는 짧은 수열로, 게임의 승패를 결정함.
     * 강한 플레이어는 전술 패턴을 자동으로 인식하며, 이를 훈련하는 것이 중요함.

나의 전술 유창성 루틴

     * 체스 전술 유창성을 향상시키기 위한 일일 연습 루틴을 공유함.
     * Chessable이라는 공간 반복 플랫폼을 사용하여 전술을 연습함.
     * 특정 설정을 사용하여 정확성과 속도를 향상시키는 방법을 설명함.

자주 묻는 질문들

     * 체스 개방, 폰 구조, 전략 등에 대한 질문과 답변을 제공함.
     * 게임 플레이와 시간 제어에 대한 조언을 함.
     * 다른 훈련 도구와 체스 콘텐츠에 대한 의견을 나눔.

1년 후 업데이트된 방법

     * 원래 방법에서 몇 가지 요소를 조정하여 개선함.
     * 퍼즐을 해결하는 데 걸리는 시간을 10초로 늘리고, 퍼즐의 핵심 라인을 끝까지 시각화하는 데 집중함.
     * 특정 패턴에 초점을 맞춘 컬렉션을 사용하여 효율적인 학습을 도모함.

   GN⁺의 의견:
     * 체스는 단순히 게임의 규칙을 아는 것 이상으로 전술과 패턴 인식이 중요한 게임임을 강조함.
     * 체스 실력 향상을 위해서는 체계적인 연습과 공간 반복 학습이 효과적임을 보여줌.
     * 이 글은 체스에 관심 있는 사람들에게 흥미로울 수 있으며, 체스를 배우고 싶은 성인들에게 유용한 정보를 제공함.

        Hacker News 의견

     * 좋은 기사에 대한 댓글 요약:
          + 개인적인 체스 향상 경험 공유:
               o 20년간 체스를 쉬었다가 40세에 다시 시작한 사람의 경험. 처음에는 진전이 없었으나, 실리만의 책을 참고하여 다음과 같은 방법으로 실력 향상:
                    # 식사를 챙겨 혈당 수준 유지
                    # 전술 연습에 집중, 위협을 감지하는 연습 필요
                    # 기본적인 위치에 대한 이해, 전술이 더 중요함
                    # 개방형 게임에 많은 시간을 할애하지 말 것
                    # 게임 후 체스 엔진을 사용해 실수 분석
          + 체스 학습 앱 추천:
               o 최근 체스를 시작한 사람이 'Learn chess with Dr. Wolf' 앱을 추천. 초보자에게 적합하며, 기본부터 전략까지 가르쳐주는 대화형 튜터 앱.
          + 체스 실력 향상에 대한 의견:
               o 체스.com에서 짧은 시간에 500에서 1050으로 실력이 향상된 사람의 경험. 개방형 게임의 패턴을 이해하고 자신의 게임을 리뷰하는 것이 학습에 도움이 됨.
          + 체스 교육 방법에 대한 전문가 의견:
               o 전직 학생이었던 GM Axel Smith의 교육 방법을 추천. 패턴 인식뿐만 아니라 계산 능력도 중요하며, 이를 위해 더 어려운 문제에 도전하고 시간을 들여야 함.
          + 캐주얼 체스에 대한 선호:
               o 빠른 게임과 개방형 게임, 패턴 연구가 일처럼 느껴져서 캐주얼 체스를 선호하는 의견.
          + 승리에 대한 집착과 체스 플레이:
               o 항상 이기고 싶어서 체스를 플레이하지 않는 사람이 이 조건을 극복하기 위해 플레이를 고려 중임.
          + 체스 실력 향상과 시간 투자:
               o 2년 동안 체스.com에서 1000점에 도달했으나, 그 이상 향상을 위해서는 공부가 필요함을 인식하는 의견.
          + 체스 학습에 대한 이전 토론 링크:
               o 2016년부터 2021년까지 체스 학습에 관한 이전 토론의 링크 제공.
          + 인간 대 AI 전략 게임:
               o AI가 인간보다 우위를 점하지 않는 잘 알려진 전략 게임이 있는지, 그런 게임이 수학적으로 존재할 가능성에 대한 질문.
          + 체스에 대한 개인적인 배경:
               o 아버지가 마스터 체스 플레이어였지만, 유명한 개방형 게임과 반응을 공부하는 것 외에는 관심이 없었던 사람의 경험. 컴퓨터 게임이 더 재미있다고 느낌.
"
"https://news.hada.io/topic?id=12380","NASA 연구, 엔셀라두스에서 생명 생성 에너지원 및 분자 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NASA 연구, 엔셀라두스에서 생명 생성 에너지원 및 분자 발견

     * 생명을 일으키는 에너지 원천과 분자 발견
          + NASA의 카시니 탐사선이 토성의 얼음 위성 엔셀라두스에서 수행한 조사에서 생명에 필수적인 유기 화합물과 강력한 화학 에너지 원천의 증거를 발견함.
          + 연구자들은 엔셀라두스의 지하 바다에서 수소 시안화물을 확인하고, 이 바다가 생명을 유지할 수 있는 다양한 유기 화합물을 포함하고 있음을 밝혀냄.
          + 이러한 발견은 엔셀라두스 내부에 생각했던 것보다 훨씬 더 많은 화학 에너지가 존재할 수 있음을 시사함.
     * 다재다능하고 에너지가 넘치는
          + 수소 시안화물은 생명의 기원에 대한 대부분의 이론에서 출발점으로, 아미노산과 같은 생명의 구성 요소를 형성하는 데 필수적인 다목적 분자임.
          + 연구자들은 다양한 대안 모델을 테스트하며 결과에 의문을 제기했지만, 수소 시안화물을 포함하지 않고는 엔셀라두스의 분출물 구성을 설명할 수 없다는 결론에 도달함.
     * 수학은 방법이다
          + 이전 연구가 실험실 실험과 지화학 모델링을 사용했던 것과 달리, 새로운 연구는 카시니가 엔셀라두스에서 발견한 조건을 복제하기 위해 상세한 통계 분석에 의존함.
          + 연구자들은 카시니의 이온 및 중성 질량 분석기가 수집한 데이터를 검토하고, 데이터에 포함된 정보의 양을 정량화하여 다양한 화학 화합물이 카시니 신호를 얼마나 잘 설명하는지에 대한 미묘한 차이를 파악함.

   GN⁺의 의견
     * 이 연구는 우리 태양계 내에서 생명체가 존재할 가능성을 탐구하는 데 있어 중요한 발견을 제시함. 특히 엔셀라두스가 생명체에 필요한 화학적 조건을 갖추고 있을 뿐만 아니라, 생명의 기원에 필수적인 분자인 수소 시안화물의 존재가 확인되었다는 점은 과학 커뮤니티에 큰 흥미를 불러일으킴.
     * 카시니 탐사선의 데이터 분석을 통해 얻은 이 결과는 생명체가 존재할 수 있는 환경을 이해하고, 미래의 탐사 임무 설계에 중요한 정보를 제공함.
     * 이 연구는 통계적 방법과 수학적 모델링을 사용하여 우주 탐사 데이터를 해석하는 새로운 접근 방식을 보여줌으로써, 복잡한 우주 환경에서 생명의 존재를 탐구하는 데 있어 수학과 과학의 융합이 얼마나 중요한지를 강조함.

        Hacker News 의견

     * 다른 행성에서 생명체 발견에 대한 큰 기대감

     ""다른 행성, 특히 다른 태양계에서 생명체를 발견하기를 정말로 희망한다. 현재 우리는 오직 지구만을 샘플로 가지고 있어서 생명의 기원에 대한 생각은 추측에 불과하다. 이 상황이 바뀌기를 바란다.""
     * 생명의 흔적 발견에 대한 보도에 대한 회의적 시각

     ""수십 년 동안 생명의 흔적, 즉 물과 유기물, '거주 가능한' 외계 행성에 대한 발견 보도를 읽어왔다. 이러한 발견들은 가치가 있지만, 보도의 어조는 마치 생명체가 곧 나타날 것처럼 암시한다. 그러나 우리는 우주에서 지구 외에 생명이 존재했다는 증거를 단 하나도 갖고 있지 않으며, 비생명체에서 생명체를 만들어내는 데 성공한 사람도 없다. 생명의 기원이나 발생 가능성에 대해서는 아직 모른다.""
     * 생명의 기원과 복잡한 생명에 대한 추천 도서

     ""생명의 기원과 복잡한 생명에 관심 있는 사람들에게는 닉 레인의 책을 추천한다. 'The Vital Question'으로 시작할 수 있다. 온라인에서 그의 훌륭한 동영상도 찾아볼 수 있다.""
     * 존재의 근본적인 의문

     ""무엇인가가 존재한다는 사실 자체가 나를 미치게 만든다. 왜 무엇인가가 있고, 아무것도 없지 않은 걸까.""
     * 엔셀라두스에 대한 새로운 인식

     ""엔셀라두스가 단순한 얼음의 달이라고만 생각했었는데, 실제로는 그보다 더 멋진 곳임을 알게 되었다.""
     * ""생명을 일으키는 에너지원""이라는 표현에 대한 비판적 견해

     ""제목이 조금 과장된 것 같다. '생명을 일으키는 에너지원'이라고 하면 생명을 창조할 수 있는 필수적인 속성을 생각하게 되지만, 우리는 그것을 가지고 있음에도 생명을 창조할 수 없었다. 기사에서 더 합리적으로 인정하는 것처럼, 그것들은 단지 생명을 유지하는 데 필요한 재료, 건축 블록, 연료일 뿐이다. '생명을 일으키는' 원천 자체는 여전히 미스터리다.""
     * 엔셀라두스에서 복잡한 화학 반응과 에너지의 존재 가능성

     ""수소 시안화물, 아세틸렌, 프로필렌, 에탄, 프로필렌과 같은 화합물이 엔셀라두스에서 발견되었다. 이 중 일부는 에너지를 가지고 있으며, 다른 일부는 연소 부산물인 것으로 보인다. 이는 엔셀라두스에 풍부한 에너지와 복잡한 화학 반응이 있음을 시사한다. 또한, 연구에서 산소(O2)의 존재 가능성에 대한 확률을 64%로 제시하고 있다. 얼음으로 덮인 표면과 거의 진공 상태의 대기를 상상할 때, 자유 산소를 감지하기는 매우 어려울 것이다. 하지만 이산화탄소도 발견되었으므로, 산소는 빠르게 사용되고 있을 수 있다.""
     * 생명을 일으키는 원인에 대한 불확실성

     ""우리는 생명을 일으키는 원인이 무엇인지 모른다.""
     * 생명에 대한 비유에 대한 의문

     ""생명과 관련된 '불꽃과 불'이라는 비유가 마음에 들지 않는다. 우리는 아직 생명을 충분히 이해하지 못해서 좋은 비유를 가지고 있지 않다.""
"
"https://news.hada.io/topic?id=12398","Show GN: Empty Email - AI 이메일 필터 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Show GN: Empty Email - AI 이메일 필터

  개인화된 이메일 필터로 이메일 정리를 자동화할 수 있습니다.

   소프트웨어 엔지니어, 마케팅 전문가, 영업 담당자 등 직군이나 사용 사례에 따라 원하는 대로 필터를 설정할 수 있습니다.

   예시:
     * 긱뉴스 뉴스레터를 제외한 모든 뉴스레터를 무시해줘.
     * 소프트웨어 개발 역량을 기르고 우리 서비스의 안정성을 발전시키는 것과 무관한 이메일은 최대한 줄여줘.
     * 잠재적으로 우리 제품의 타겟 고객이 아닌 업체의 콜드 이메일을 받지 않게 해줘.
     * 치명적인 제품 결함이 발견되지 않은 경우, 결제 유저 피드백이 아닌 일반 유저 피드백을 받지 않게 해줘.
     * 우리는 현재 XX산업 분야에 투자하지 않고 있어. 이 분야에 대한 피치덱 공유 등을 무시해줘.

  내 이메일 주소를 숨길 수 있습니다.

   이메일을 알려주는 것은 집 주소를 알려주는 것과 같죠.
     * 앱, 웹사이트 등에서 사용할 Empty 이메일 주소를 만들어 기본 이메일을 비공개로 유지하고 관리할 수 있도록 할 수 있습니다.

  (개발중) AI 답장으로 반복적인 워크플로 자동화

   어떤 상황에서 어떻게 답장할지, 참고할 지식은 무엇인지 결정하면 설정된 이메일들을 자동으로 답장합니다.

   정말 필요성 절감..

   안녕하세요 shalome님 :) 말씀 감사드립니다!
   원하시는 경우 어떤 이유로 필요성을 절감하셨는지 적어주시면 도움이 될 것 같아요. 좋은 하루 되세요!
"
"https://news.hada.io/topic?id=12397","베네딕트 에반스의 기술 트렌드 2024: AI, 그리고 그외 모든 것들","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                베네딕트 에반스의 기술 트렌드 2024: AI, 그리고 그외 모든 것들

     * 베네딕트 에반스의 2024년 리포트 (87p 슬라이드) 간추린 요약
     * AI가 기술업계 Hype Cycle을 주도(HN 첫페이지 기사 수가 아이폰, 암호화폐를 뛰어넘음)
          + YC 스타트업들도 AI가 메인 분야
          + 벤처 투자는 줄어들었지만, AI는 예외
     * 2023년의 모델 붐: OpenAI가 시작 → 구글과 메타가 자신들의 모델을 출시 → 신규 모델과 오픈소스 붐 → 수많은 모델과 수많은 질문들
     * NVidia 는 GPU 수요를 따라잡을 수가 없을 정도여서 수익이 엄청나게 증가
     * 빅3 클라우드(AWS/구글/Microsoft)도 인프라를 엄청 확장중. 2023년에만 인프라에 $100bn(130조원) 투자
     * 기존 회사들도 이제 AI에 큰 관심을 보이는중 ""우리의 AI 전략은 뭔가요?""
     * ChatGPT 주간 활성 사용자 1억명. OpenAI $1.3bn 매출
     * 기술분야 모두들 이게 ""The Thing"" 이라는 것에 동의하지만, 정확히 뭘 의미하는지는 명확하지 않음
          + 플랫폼 이동? → 이게 소프트웨어의 본질을 바꿀까? → 이게 우릴 AGI로 인도할까?

Platform Shift : 플랫폼 이동?

     * 기술업계는 플랫폼 변화에 따라 움직임 : 메인프레임 → PC → 웹/오픈소스 → 스마트폰/클라우드 → 생성형 AI
     * 새로운 기술은 S커브로 옴 : Why this is useful 이게 왜 유용한가? → Exciting 재미나네! → Boring 지겨워
          + 스마트폰은 이미 다 성숙해서 ""지겨움""단계에 들어섰음
          + 머신러닝도 이제 10년이 다 되어서 ""지겨움""단계에 들어가고 있음
          + 생성형 AI는 ""유용한가"" 에서 ""재미나네"" 단계로 접어드는 중
     * 2013년에 머신러닝은 ""똑똑해 보이는데 이거 어디다써?"" 라고 했음
     * 2023년의 생성형 AI도 마찬가지 ""똑똑해 보이는데 이거 어디다써?""
     * 생성 ML 결과는 정확해 보일 가능성이 매우 높으며, 주의하지 않으면 설득력이 떨어질 수 있음
     * 우린 아직 이 시스템이 동작하는 방법을 알아가는 중
     * Machine Learning, Automated Learning
          + 2013 ML 1.0 ""컴퓨터가 어떻게 고양이를 인식하게 만들까?"" → 컴퓨터에게 고양이 사진 수백만장을 준다
          + 2023 ML 2.0 ""컴퓨터가 어떻게 추론하고 이해하게 만들까?"" → 컴퓨터에게 인간의 모든 지식이 적혀진 출력물을 준다
     * 2023: 우리는 어떻게 생성형 ML을 이해해야 할까 ?
          + 패턴 생성? → 합성 및 요약? / 추론? / 그외? → 우리는 이걸로 뭘 할 수 있을까?
     * ""AI는 당신에게 무한한 인턴들을 제공한다""
     * ""인터넷의 모든 텍스트 상자들은 LLM을 가지게 될 것""
     * ""아마존의 모든 팀들이 생성형 AI를 탐색하고 있음 - 아마존 CEO""
     * 생성형 AI가 새로운 플랫폼이라면, 플랫폼 변화 과정에서 어떻게 가치를 포착해야 할까 ?
          + 기존 기업들(incumbents)은 AI를 하나의 기능으로 도입하거나
          + 스타트업들이 언번들링 하는데 사용하거나
          + 때로는 시장의 본질을 바꾸기도 함
     * Adobe 는 두가지를 모두 하고 있음
          + 기능 도입 : 포토샵에 Generative Fill 기능을 추가
          + 언번들 : 새로운 별도 앱인 Firefly
     * 링크의 종말 : ChatGPT를 위한 SEO는?
          + 웹 → 구글 & 페이스북 → 유튜브/인스타그램/틱톡 → LLM
     * 하지만 추정하지 말 것 : 생성형 AI가 처음엔 챗봇으로 다가왔지만, 이것만이 맞다거나 유일한 모델이라고 생각하진 말아야 함

플랫폼 이동을 넘어서?

     * ""제 인생에 있어서 혁명적이라고 느낀 기술 데모는 단 2가지 입니다. GUI와 ChatGPT"" - 빌게이츠. 2023년 3월
     * 일반화로의 한단계 이동
          + 커맨드 라인 (명령을 배우고 타이핑) → GUI (옵션을 보고 선택) → 생성형 AI (컴퓨터에게 원하는 것을 말하기)
     * 'agent' 의 귀환 : 나를 위해 모든 것을 해주는 다목적 AI Agent의 꿈이 실현
     * 언번들링
          + 모든 Unix function 들이 회사가 되었음
          + 모든 Excel 템플릿이 회사가 되었음
          + 모든 Notion 템플릿이..
          + 모든 ChatGPT 추천이..
     * 프로덕트 패러독스
          + '모든 것'을 다해주는 진정한 범용 소프트웨어 → 더 많은 일들이 적은 수의 앱들로 자동화 가능

AGI 로 가는 길?

     * 우리가 'AGI'를 얘기할때 뭘 만들려고 하는걸까?
     * 생성형 AI는 아마 그리로 가는 길 일수도
     * 우리는 알지 못함
          + 뭐가 AGI인지, 얼마나 멀리 있는지, 어떻게 가야하는지, LLM이 얼마나 그에 도달했는지, 얼마나 더 좋아질수 있는지

그리고 모든 것들

     * Vision to Deployment
          + 2000년의 아이디어 ""많은 사람들이 온라인에서 물것을 사게 될꺼야""
          + 2010년의 아이디어 ""SaaS, 자동화, 협동, 워크플로우..""
          + 2030년의 아이디어 ""~Crypto~, ~Metaverse~, 생성형 AI""
     * Meta 는 아직도 VR을 믿고 있음. 지난 12개월동안 $16bn을 투자
     * 이커머스의 성장세는 다시 트렌드 라인으로 회귀했음(Covid 기간동안 폭증했던것들이 돌아오면서)
     * 1993년 지구에는 1억대의 PC가 전부였는데, 이제는 50억명이 온라인임
     * 2020년 이후엔 미국에서 맺어진 커플의 절반이 온라인을 통함
     * 새로운 번들과 새로운 채널이 새로운 글로벌 패스트 패션 비즈니스를 만들어냄 (Shein)
          + 그리고 또다시 새로운 모델이 나옴. 2022년 중반에 오픈한 Temu 가 급속히 성장하면서 Shein 을 따라가는 중
     * 어떤 질문을 해야할까 ? : 소프트웨어가 세상을 먹어 치우게 되면, 대부분의 질문은 소프트웨어 질문이 아님
          + 마지막에 이런 일이 있었던 걸 생각해 보면
               o 차가 나왔던 첫 50년간: 자동차가 뭔가요? 자동차 회사는?
               o 그리고 다음 50년간: 모든 사람이 자동차가 있다면 뭐가 바뀌게 될까요?
               o 어떤 종류의 회사와 비즈니스가 만들어졌을까 ?

   2023 기술 트렌드: The New Gatekeepers
   Tech in 2022: 미래를 향한 3단계
   Tech in 2020: 거인들의 어깨에 서서
"
"https://news.hada.io/topic?id=12468","HN에 알립니다: 명절 기간 동안 대기 근무 및 지원 업무를 수행하는 모든 분들께 경의를 표합니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HN에 알립니다: 명절 기간 동안 대기 근무 및 지원 업무를 수행하는 모든 분들께 경의를 표합니다

시스템 가용성과 안전성 유지에 감사함

     * 시스템을 사용 가능하고 안전하게 유지하는 데 대한 감사의 말씀.
     * 과거에 여러 차례 경험했던 일들 중, 인터넷이 연결되지 않은 뉴저지의 데이터 센터로 마지막 순간에 급히 날아가 긴급 생산 버그 수정을 감독한 일화.
     * 해당 버그 수정 작업이 휴일 내내 걸려서 생성, 설치, 검증 및 모니터링하는 과정을 거침.

GN⁺의 의견

     * 이 글은 IT 인프라와 시스템을 관리하는 전문가들의 노고를 인정하고 감사하는 내용이 중요함.
     * 긴급 상황에서 데이터 센터에 직접 방문해야 하는 등의 예기치 못한 상황에 대처하는 IT 전문가들의 유연성과 헌신이 흥미로움.
     * 특히 휴일을 할애하여 긴급한 문제를 해결하는 과정은 IT 분야 종사자들이 직면하는 도전과 열정을 반영함으로써, 이 글이 사람들에게 매력적으로 다가갈 수 있음.

        Hacker News 의견

     * Hans Rosling의 실용적인 조언

     한스 로슬링은 고객 서비스에 도움을 요청할 때 ""내가 실수했다""고 말하는 것이 효과적이라고 조언함. 이 방법은 사람들이 도와주고 싶어 하게 만들며, 더 나은 결과를 얻을 수 있음. 단, 개발도상국의 예산을 결정해야 하는 경우에는 적용되지 않음.
     * 12월의 프로덕션 변경 관리

     12월 첫째 또는 둘째 주에는 프로덕션 변경을 피하고, 셋째 주부터 변경을 동결하기 시작하여 넷째 주에 완전히 동결함. 이는 고객에게 안정성을 제공하고, 휴일 동안 근무를 피하기 위함임. 이 기간 동안은 문서화 작업이나 단축 근무를 하며, 온콜 상황을 최소화함.
     * 눈에 띄지 않게 일하는 이들에게 감사

     크리스마스 기간 동안 사회가 원활하게 돌아가도록 노력하는 모든 사람들, 예를 들어 유튜브의 율로그를 유지하고, 크리스마스 트리 조명을 켜두며, 수돗물과 난방 가스를 제공하는 이들에게 감사함을 표함.
     * 세상을 혼자 짊어지려 하지 마라

     자신의 책임이 아닌 일에 대해 모든 것을 처리하려 하지 말고, 때로는 실패를 허용해야 함. 그렇지 않으면 다른 사람들이 위험을 인지하지 못하고 계속해서 당신에게만 의존하게 됨.
     * 온콜 근무의 어려움

     온콜 근무는 정신적 고통이 크며, 어떤 금액으로도 보상받기 어려움. 특히 회사가 개선 없이 ""그냥 참으라""는 태도를 취할 때 더욱 힘듦. 온콜을 거부하는 것이 현명하며, 여전히 온콜 근무를 하는 이들에게 감사와 격려의 말을 전함.
     * 휴일에 근무하는 의료 종사자들

     간호사인 며느리는 휴일에 근무하는 대가로 추수감사절을 쉴 수 있음. 가족들은 그녀의 근무 시간에 맞춰 일정을 조정하고, 집에 돌아올 때 음식을 남겨둠. 휴일에도 근무하는 모든 의료 종사자들에게 감사함.
     * 휴일을 평소와 다름없이 보내는 이들

     비종교적이거나 내성적인 사람들은 이 기간을 평소 주와 다르지 않게 보냄. 모두가 휴가를 가는 동안 조용히 일하며 서버를 관리하는 것을 선호함.
     * 군대에서의 휴일 근무 경험

     군대에서 4년간 근무하며, 그 중 3년은 휴일에 저녁과 밤 근무를 함. 아무 일도 일어나지 않아 단순히 시스템을 감시하는 역할이었음. 마지막 해에는 온콜 근무를 했는데, 이전보다 훨씬 나았음. 이 경험은 정상 근무 시간을 가진 직업을 찾게 만듦.
     * 휴일에 사이버 공격을 당한 회사

     휴일에 사이버 공격을 당한 회사의 IT 및 정보보안 동료들이 밤낮으로 일하는 동안 다른 사람들은 휴가를 즐김. 이들에게 경의를 표함.
     * 휴일 전 업데이트를 밀어붙이는 미국 기업 문화

     유럽 회사들은 11월 말 또는 12월 첫 주까지만 릴리스 계획을 세우지만, 미국 회사들은 종종 휴일 전에 업데이트를 강행하고 계약자들에게 주말 근무를 요구함. 크리스마스를 축하하지 않는 인도인이나 1월에 정교회 크리스마스를 축하하는 동유럽인들에게 온콜 근무를 강요함.
"
"https://news.hada.io/topic?id=12419","Meta, 대규모 1인칭 비디오 데이터셋 Ego-Exo4D 공개","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Meta, 대규모 1인칭 비디오 데이터셋 Ego-Exo4D 공개

     * 비디오 학습 및 멀티모달 인식 연구를 지원하기 위한 기초 데이터세트 및 벤치마크
     * 참가자의 웨어러블 카메라를 통해서 1인칭 ""Egocentric(자기 중심적)"" 시점과 참가자를 둘러싼 카메라의 다중 ""Exocentric(외심적)"" 시점을 동시에 캡처
     * 두 시점은 상호보완적으로, Ego는 참가자가 보고 듣는 것 과 Exo는 주변 장면과 맥락을 드러냄
          + 이 두 가지 관점을 함께 사용하면 AI 모델에 복잡한 인간 기술에 대한 새로운 시각을 제공할 수 있음
     * Meta의 FAIR (Fundamental Artificial Intelligence Research)와 Project Aria, 그리고 15개 대학 파트너들이 2년간의 노력
          + 미국, 일본, 콜롬비아, 싱가포르, 인도, 캐나다에 있는 800명 이상의 숙련된 참가자들의 도움을 받아서 캡처
     * 1,400시간 이상의 동영상을 포함한 데이터와 새로운 벤치마크 작업에 대한 주석을 오픈소스로 공개
     * Ego-Exo4D는 스포츠, 음악, 요리, 춤, 자전거 수리 등 숙련된 인간 활동에 초점을 맞춤
          + AI가 비디오에서 인간의 숙련도를 이해하는 능력의 발전은 많은 응용 프로그램을 가능하게 할 수 있음
          + 예를 들어, AR 시스템에서 스마트 안경을 착용한 사람이 가상 AI 코치의 안내로 새로운 기술을 빠르게 습득할 수 있음
     * Ego-Exo4D는 시간 동기화된 1인칭과 3인칭 비디오의 가장 큰 공개 데이터셋
          + 이 데이터셋을 구축하기 위해 다양한 분야의 전문가들을 모집하고, 실제 세계의 전문가들이 참여함
          + Ego-Exo4D는 다중 시점뿐만 아니라 다중 모드 데이터셋이며, Meta의 Aria 안경으로 캡처된 모든 ego 비디오는 시간 정렬된 7채널 오디오, 관성 측정 장치(IMU), 두 개의 광각 흑백 카메라 등을 포함
"
"https://news.hada.io/topic?id=12439","Swift, 항상 OS의 일부가 될 예정이었다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Swift, 항상 OS의 일부가 될 예정이었다

     * Swift를 OS에 포함시키는 것은 개발자들에게 더 나쁜 상황을 초래했다는 불만이 Swift 포럼에서 제기됨
     * 이에 대한 반응으로, OS와 함께 제공되는 라이브러리의 세계에 오신 것을 환영한다는 냉소적인 의견이 있었음
     * 이 글은 Apple에서 Swift를 개발할 때의 경험을 바탕으로, Swift가 OS의 일부가 된 배경과 문제점을 설명함

OS 의존성

     * 과거에는 개인용 컴퓨터가 실행 중인 프로세스에게 전체 기계를 제어하도록 허용했으나, 현재는 운영 체제 커널이 항상 실행되며 기본 OS 서비스를 제공함
     * 대부분의 현대 OS는 시스템 호출 인터페이스를 통해 특정 권한 있는 작업을 요청할 수 있는 프로그램을 생성할 수 있도록 함.
     * 오늘날의 Apple OS는 시스템 호출 인터페이스가 OS 버전에 따라 안정적이지 않기 때문에, 기본적인 작업을 수행하기 위해 C/POSIX 표준 라이브러리와 그 확장을 사용해야 함.

Apple의 모델 (Swift 이전)

     * Swift 이전에는 Apple의 대부분의 공개 API가 C 또는 Objective-C로 작성되어 네이티브 코드 형태로 제공됨.
     * 새로운 OS 버전은 기존 라이브러리의 새로운 바이너리 호환 버전을 포함하여, 이전 버전의 API를 포함하는 상위 집합을 제공함.
     * 이 모델의 주된 단점은 새로운 기능과 API가 새로운 OS 버전에 묶여 있다는 것임.

Swift ""베타"" 1 ~ 5

     * Swift 1부터 Swift 5까지 많은 변화가 있었으며, ABI 안정성이 항상 Swift의 목표였음.
     * Swift 5로 넘어가면서 대부분의 문제가 해결되었고, Swift가 OS에 포함될 때 기존 앱과 프로젝트가 영향을 받지 않도록 하는 방법을 찾아야 했음.

전환

     * Swift를 OS에 포함시키는 과정에서 기존에 구축된 앱과 프로젝트를 깨뜨리지 않는 방법을 찾아야 했음.
     * ""rpath""라는 기능을 사용하여 실행 가능한 파일이 하드코딩된 경로가 아닌 일련의 디렉토리를 검색하여 동적 라이브러리를 찾을 수 있도록 함.

우리가 잃은 것

     * Swift가 OS에 포함되면서 앱은 더 이상 Swift를 포함할 필요가 없게 되었고, Swift와 Objective-C 런타임이 함께 제공되면서 성능 개선이 가능해짐.
     * 그러나 외부 Swift 기여자들은 새로운 API가 새로운 OS에서만 존재한다는 문제에 직면함.

대안

     * 개발자들에게 더 나은 상황을 제공하기 위해 Apple이 할 수 있는 몇 가지 합리적인 방법들이 있으나, Apple이 이를 수행할지는 불확실함.

결론

     * Swift가 OS에 포함되는 것이 앱 개발자들에게 나쁜 거래였을 수도 있지만, Apple은 시스템 라이브러리를 Swift로 작성할 수 있는 옵션을 포기할 수 없었음.

Swift와 관련된 새로운 것은 아님

     * Swift와 관련된 많은 문제는 OS와 함께 제공되는 라이브러리의 결과임.
     * Swift의 기술적 변화와 사회적 변화 모두가 이러한 문제에 영향을 미침.

GN⁺의 의견

     * Swift가 OS의 일부가 되는 것은 개발자들에게 더 큰 제약을 가하는 것이지만, 이는 Apple의 라이브러리 배포 모델의 필연적인 결과임.
     * 이 글은 Swift가 OS에 통합되는 과정에서 발생한 기술적, 운영적 도전과 그에 대한 해결책을 탐구함으로써, 소프트웨어 개발의 복잡성과 라이브러리 관리의 중요성을 강조함.
     * Swift의 OS 통합은 앱 개발자들에게는 더 큰 파일 크기와 호환성 문제를 가져왔지만, Apple에게는 시스템 라이브러리를 Swift로 작성하고 업데이트하는 능력을 제공함으로써, 전체 시스템의 일관성과 보안을 유지하는 데 도움이 됨.
"
"https://news.hada.io/topic?id=12375","WebP 기술의 장단점 분석ebP 기술의 장단점 분석 (2021)

WebP 이미지 포맷의 실제 성능에 대한 분석

     * WebP 이미지 포맷이 JPEG에 비해 파일 크기를 15% 절약한다고 알려져 있으나, 실제로는 항상 그렇지 않음.
     * WordPress 플러그인을 통해 기존 미디어 라이브러리를 WebP로 변환하는 것이 가능하지만, 이 과정에서 품질 저하가 발생할 수 있음.
     * 특히, 부드러운 그라데이션을 포함한 이미지에서 WebP 포맷의 압축이 JPEG보다 더 많은 아티팩트(예: 포스터화 현상)를 발생시킬 수 있음.

WebP와 JPEG의 비교 테스트

     * JPEG 포맷의 이미지와 WebP 포맷의 이미지를 비교해보면, WebP가 항상 더 우수한 것은 아님.
     * JPEG 90 품질의 이미지는 무게가 더 나가지만, WebP 90 품질의 이미지보다 시각적으로 더 깨끗함.
     * WebP의 무손실 압축은 JPEG 100 품질에 비해 파일 크기가 작지만, 시각적으로 큰 차이가 없고, JPEG 95 품질과 유사함.

WebP 포맷의 문제점과 해결 방안

     * WebP 포맷은 평균적인 성능에 기반한 주장에도 불구하고, 모든 이미지에 대해 우수한 성능을 보이지 않음.
     * 이미지의 품질이 중요한 경우, JPEG 90 품질을 사용하고, 이미지에 약간의 노이즈나 디더링을 추가하는 것이 좋음.
     * 이미지 변환을 위한 SaaS 서비스는 비용이 들고, 실제 품질을 보장하지 않으므로, 자체 서버에서 Image Magick/Graphics Magick을 사용하는 것이 더 낫음.
     * 개발자와 기술자들은 실제 예술가들과 대화를 나누고 그들의 도전과 우선순위를 이해할 필요가 있음.

GN⁺의 의견

     * WebP 포맷이 JPEG에 비해 항상 우수한 것은 아니며, 특히 부드러운 그라데이션을 다룰 때 문제가 될 수 있음이 중요함.
     * 이미지 품질에 대한 개발자와 예술가 간의 대화 부족이 기술과 예술의 분리를 초래하고, 이는 광범위한 문제를 야기할 수 있음.
     * 이 글은 이미지 포맷의 선택이 단순한 기술적 결정이 아니라, 실제 사용자 경험과 전문가의 작업 품질에 영향을 미칠 수 있음을 보여주는 흥미로운 사례임.

        Hacker News 의견

     * WebP 이미지 포맷에 대한 문제점을 지적하며 JPG/PNG로 돌아간 경험
          + 대부분의 사람들이 데스크탑 모니터의 혁신 부재로 인해 차이를 느끼지 못함
          + 모바일이나 4K TV와 달리 20-40인치 모니터의 픽셀 밀도가 2000년대 수준에 머물러 있음
          + 예시 사진의 배경색 변경이나 가벼운 배경 사용이 더 나았을 것이라는 의견
     * WebP와 JPG 비교 시 차이를 전혀 느끼지 못함
          + 다른 모니터와 브라우저에서도 차이 없음
          + 마지막 비교 이미지가 잘못 연결되어 WebP 이미지가 두 번 나타남
     * WebP의 강제된 4:2:0 크로마 서브샘플링이 가장 큰 단점
          + 밝은 색상의 이미지에서 색상과 밝기 손실이 눈에 띔
          + 특정 비교 이미지에서 색상의 강렬함과 밝기 손실을 확인할 수 있음
     * 비전문가의 눈에는 WebP가 괜찮아 보일 수 있지만, 사진작가에게는 문제가 됨
          + 안드로이드에서 모든 사진의 품질이 동일해 보임
          + 전문가를 위한 이미지를 만들 때는 적합한 기술을 사용해야 함
     * WebP의 가장 큰 문제는 브라우저 외부에서의 불편함과 작은 용량 절약
          + HEIF, AVIF, H266에서 나올 수 있는 포맷, JPEG XL 등이 더 나은 포맷으로 여겨짐
     * Aurelien Pierre는 Darktable의 주요 기여자이며, 올바른 방법에 대해 강한 의견을 가짐
          + 때로는 공격적일 수 있으며, Darktable을 Ansel로 포크한 이력이 있음
     * 아카이브 이미지 품질을 중요하게 생각하는 경우
          + 압축되지 않은 원본에서 새로운 포맷으로 재압축하지 않는 것이 좋음
          + 새로운 사진을 새로운 포맷으로 압축할 때 안전한 설정을 선택하는 것이 의미가 있음
     * 저자가 포맷의 차이보다 압축에 초점을 맞춰야 함
          + 다양한 이미지와 배경, 다양한 프로그램을 테스트해야 진정한 비교가 가능
          + 전문 사진작가의 경우 압축을 하지 않고 풀 퀄리티로 업로드하는 것이 좋음
     * ""비전문가 눈""을 가진 사람으로서 의미 있는 차이를 느끼지 못함
     * 이미지 압축에서 밴딩 문제가 여전히 존재하는 이유에 대한 의문
          + 압축 알고리즘이 주파수 도메인에서 작동하기 때문에 그라데이션 압축이 쉬워야 함
          + 밴딩을 일으키는 요소가 이미지를 더 크고 나쁘게 만듦
"
"https://news.hada.io/topic?id=12469","환상적인 지도 제작을 위한 'Fantasy Map Brushes'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  환상적인 지도 제작을 위한 'Fantasy Map Brushes'

모로노부 목판화: 17세기 붓 세트

     * 17세기 히시카와 모로노부의 작품을 기반으로 한 붓 세트.
     * 동해도 분간 에도(東海道分間絵図)에서 추출한 세트로, 우키요에(浮世絵) 목판화 작업의 대표적인 예.
     * 일본 영감의 판타지 지도를 만드는 데 적합한 다양한 객체 포함.

모로노부 간사이: 17세기 붓 세트

     * 17세기 동해도 분간 에도(東海道分間絵図) 또는 도카이도의 지도를 기반으로 한 붓 세트.
     * 히시카와 모로노부가 그린 거대한 두루마리 수채화 지도에서 영감을 받음.
     * 1140개 이상의 붓으로 구성되어 전형적인 판타지 지도와 차별화되는 그림 같은 풍경 창작 가능.

켄셋: 19세기 도시 지도학 붓 세트

     * 1806년 토마스 켄셋의 ""뉴 헤이븐 마을 계획""을 기반으로 한 도시 지도학 붓 세트.
     * 수백 개의 집, 부지, 토지, 주민, 각종 부속 건물 등을 포함한 포괄적인 세트.
     * 마을이나 작은 도시를 지도로 표현하기에 적합한 매력적이고 독특한 스타일.

그뤼닝어 나침반 바람 붓 세트

     * 1525년 요한 그뤼닝어가 출판한 클라우디우스 프톨레마이오스의 지리학적 저작에서 가져온 12개의 바람 방향과 대형 지구본을 포함한 세트.
     * 판타지 지도에 추가적인 멋을 더하는 데 유용.

주동: 17세기 무료 지도학 붓 세트

     * 청나라 광동성의 다양한 정착지와 위치를 묘사한 광동 여도(廣東輿圖)에서 추출한 붓 세트.
     * 중국 서예 미학과 거친 목판 인쇄 기법이 결합된 산의 프로필 표시와 상징 포함.

이시카와: 17세기 무료 지도학 붓 세트

     * 이시카와 류센이 그린 일본 해산조륙도(日本海山潮陸圖)를 기반으로 한 붓 세트.
     * 일본의 혼슈, 시코쿠, 큐슈 섬을 묘사한 에도 시대 지도에서 영감을 받음.
     * 거의 한자에서 영감을 받은 식물부터 우아한 서예 산까지 독특한 스타일의 언덕 프로필 세트.

드 페르 지도학: 18세기 무료 붓 세트

     * 드 페르의 르 쿠르 드 미시시피, 우 드 생 루이 의 첫 번째 판을 기반으로 한 붓 세트.
     * 미시시피 강의 발원지와 대호 지역을 묘사한 18세기 초 지도에서 영감을 받음.
     * 다른 지도와 차별화되는 독특한 예술 작품으로 판타지 지도에 잘 어울림.

드 페르 전장: 17세기 무료 붓 세트

     * 드 페르의 르 콤바 드 르즈 우 드 라 카토리 를 기반으로 한 붓 세트.
     * 1691년 벨기에 르즈-앙-아노의 요새화와 9년 전쟁 중 프랑스 기병 승리를 묘사한 지도에서 영감을 받음.
     * 판타지 지도에 서사적 드라마를 추가하기에 완벽.

드 페르 정착지: 18세기 무료 붓 세트

     * 프랑스 지도 제작자 니콜라 드 페르의 작품에서 영감을 받은 18세기 정착지 세트.
     * 파리 교외의 집, 마을, 마을을 묘사한 18세기 지도에서 추출.
     * 다양한 판타지 지도 정착지에 잘 어울리는 흥미로운 세부 사항 포함.

하이신스: 19세기 무료 산 붓 세트

     * 19세기 출처에서 가져온 첫 번째 산 중심의 붓 세트.
     * 라싸, 티베트에서 청두, 중국으로 가는 길을 묘사한 1828년 지도에서 영감을 받음.
     * 언덕 프로필 접근법과 해츄어 릴리프의 특징을 결합한 새로운 스타일.

엔데: 무료 해안선 에저

     * 17/18세기 해치 스타일의 해안선 에저로 판타지 지도의 해안선을 빠르게 그릴 수 있음.
     * 자체 레이어에 배치하고 ""육지"" 레이어 뒤에 놓는 것이 가장 좋음.

호만: 18세기 무료 지도학 붓 세트

     * 요한 바티스트 호만의 1788년 지브롤터 해협 지도에서 영감을 받은 붓 세트.
     * 다양한 스타일을 혼합한 독특한 지도에서 추출하여 다양한 스타일의 세트 제공.

자타: 18세기 무료 지도학 붓 세트

     * 안토니오 자타의 아틀란테 노비시모 의 일부로 1775년 포르투갈 남부를 묘사한 지도에서 영감을 받은 붓 세트.
     * 언덕 프로필과 상단 해츄어 디자인 사이의 전환기 세트.

얀소니우스: 17세기 무료 지도학 붓 세트

     * 요하네스 얀소니우스의 1650년 벵골만 해도에서 영감을 받은 해양 중심의 지형학 붓 세트.
     * 해양 표지판을 포함하여 다양한 해양 상징 포함.

비셔: 17세기 무료 지도학 붓 세트

     * 게오르그 마테우스 비셔가 1697년에 만든 오스트리아 하부의 상세한 지도에서 영감을 받은 지형학 세트.
     * 독특한 스타일로 각 도시, 마을, 마을이 매우 세밀하게 묘사됨.

브라운: 16세기 도시 지도학 붓 세트

     * 게오르그 브라운의 시비타테스 오르비스 테라룸 에서 영감을 받은 붓 세트.
     * 르네상스 도시의 새의 눈 지도를 특징으로 하는 중요한 지도학 고서에서 추출.

오길비: 17세기 무료 도로 아틀라스 붓 세트

     * 존 오길비의 1675년 저서 브리타니아, 볼륨 더 퍼스트 에서 영감을 받은 붓 세트.
     * 17세기 도로 아틀라스를 세밀하게 재현할 수 있으며 다양한 프로젝트에 유용.

반 데르 아: 18세기 지도학 붓 세트

     * 네덜란드 지도 제작자이자 출판업자 피터 반 데르 아의 지도에서 영감을 받은 붓 세트.
     * 조지아 북서부의 밍그렐리아 지역을 아름답게 묘사한 지도에서 추출.

곰부스트: 17세기 도시 지도학 붓 세트

     * 자크 곰부스트의 1652년 파리 지도에서 추출한 붓 세트.
     * 독특하고 기발한 이소메트릭 스타일로 판타지 도시 환경을 위한 리얼리티 지도 창작에 초점.

하레윈: 18세기 지도학 붓 세트

     * 유진 헨리 프릭스의 ""카르테 데 페이바스 에 데 프론티에르 드 프랑스""에서 영감을 받은 붓 세트.
     * 1727년 고딕 스타일과 자연보다 개발에 중점을 둔 독특한 스타일.

포플: 18세기 무료 지도학 붓 세트

     * 헨리 포플의 1746년 ""아메리카의 영국 제국 지도""에서 추출한 붓 세트.
     * 프론티어의 야생을 잘 포착하는 신선한 스타일로 다양한 프로젝트에 적합.

도니아: 17세기 무료 정착지 붓 세트

     * 17세기 정착지에 대한 독특한 접근을 보여주는 붓 세트.
     * 식물을 찾고 있다면 다른 세트를 확인하는 것이 좋으나, 도시, 마을, 성, 교회, 탑, 요새, 분수 등에 중점을 두고 싶다면 적합.

블라우: 17세기 무료 지도학 붓 세트

     * 요안 블라우의 테라에 산크타에 를 기반으로 한 붓 세트.
     * 독특하고 다양한 표지와 일러스트레이션 카르투슈를 포함하여 판타지 지도에 진정성을 더할 수 있음.

오베르: 18세기 지도학 붓 세트

     * 프랑수아 파제스의 여정을 묘사한 1767년 지도에서 영감을 받은 18세기 붓 세트.
     * 남서부 지역에 초점을 맞춘 독특한 세트로 몇 가지 흥미로운 변형 포함.

레일: 18세기 전장 붓 세트

     * 1745년 러시아의 첫 번째 아틀라스 의 특별판에 포함된 플랜 바탈리 지도에서 영감을 받은 세트.
     * 러시아-터키 전쟁의 전투를 상세하게 묘사하여 판타지 이야기의 전투 시나리오를 지도로 표현하기에 완벽.

비드만: 17세기 지도학 붓 세트

     * 조르지오 비드만의 작품을 기반으로 한 17세기 붓 세트.
     * 칸텔리 다 비뇰라의 영향을 받은 훌륭한 예시로 거의 모든 설정에 적합한 붓 세트.

발저: 18세기 지도학 붓 세트

     * 가브리엘 발저의 작품을 기반으로 한 18세기 붓 세트.
     * 작은 농장과 폐허에 초점을 맞춘 세트로 산과 언덕을 포함.

룸비아: 스케치 스타일 지도학 붓 세트

     * 독특한 언덕과 산에 초점을 맞춘 스케치 스타일의 붓 세트.
     * 모험가들에게 바텐더가 그릴 수 있는 지도 스타일을 채널링하려는 시도.

레만: 해츄어 붓 세트

     * 1799년 요한 게오르그 레만이 만든 레만 해츄어 시스템을 기반으로 한 경로 중심의 붓 세트.
     * 19세기 해츄어 스타일의 산을 수작업으로 그린 스타일을 재현하려는 시도.

코로넬리: 17세기 무료 나침반 장미 붓 세트

     * 빈첸조 코로넬리의 아틀란테 베네토 의 첫 번째 아틀라스 볼륨에서 가져온 여섯 개의 나침반 장미를 포함한 세트.
     * 다양한 언어로 된 나침반 장미를 포함하여 판타지 지도에 유용한 추가 요소.

이 작업 지원하기

     * #NoBadMaps 프로젝트를 통해 공개된 붓과 도구는 항상 무료이며 공공 도메인 CC0 라이선스 하에 배포됨.
     * 프로젝트를 지원하고 호스팅, 연구, 도구 세트 개발 비용을 지원하고 싶다면 아래 세 가지 방법을 통해 도움을 줄 수 있음.

    내 책 구매하기→

     * 지도 애호가일 뿐만 아니라 소설가이기도 함.
     * 코스믹 호러 도시 판타지 소설 구매를 통해 가장 쉽게 지원 가능.

    커피 사주기→

     * ko-fi를 통한 일회성 기부로 #NoBadMaps 프로젝트를 간단하고 빠르게 지원 가능.

    내 Patreon 가입하기→

     * 매달 반복적인 기부를 통해

        Hacker News 의견

     * 이 헤드라인은 하루 종일 보였지만, 링크를 제대로 살펴본 것은 지금이 처음임. 예상했던 것보다 훨씬 좋은 내용이며, 인터넷은 여전히 멋진 것들로 가득 차 있음을 알 수 있음. 특히, 폐쇄된 소셜 플랫폼의 '플로티'를 벗어던지고 더 깊은 물로 나아갈 용기가 있다면 말이죠.

     ""이 헤드라인은 종일 봤지만, 링크를 제대로 확인한 건 지금이 처음이다. 예상보다 훨씬 좋은 내용이다. 폐쇄된 소셜 플랫폼을 벗어나면 인터넷에는 여전히 멋진 것들이 많다.""
     * 몇 년 전 그 사이트를 방문한 이후로 다섯 개의 새로운 세트가 추가된 것 같음. 이 사이트를 다시 방문하게 해준 것에 감사함. RSS 리더를 사용하여 이런 사이트의 업데이트를 놓치지 않도록 해야겠음.

     ""몇 년 전 방문한 이후로 새로운 세트가 추가된 것 같다. RSS 리더를 사용해 업데이트를 놓치지 않도록 해야겠다.""
     * 마지막으로 시도했을 때, Photoshop 브러시를 Krita로 가져오는 것이 잘 작동했음을 기억함. 내장 지원이 있는지 또는 추가 단계가 필요했는지는 기억나지 않지만, 어쨌든 방법을 알려주는 여러 튜토리얼이 있다는 것을 빠른 검색으로 알 수 있음. 한편, 이러한 지도에서 추출한 지형 이미지들은 복잡한 브러시를 설정하지 않고도 이미지를 복사-붙여넣기로 사용하기에도 매우 유용함.

     ""Photoshop 브러시를 Krita로 가져오는 것이 잘 작동했다. 내장 지원 여부는 기억나지 않지만, 방법을 알려주는 튜토리얼이 많다. 지도에서 추출한 지형 이미지들은 복사-붙여넣기로도 유용하다.""
     * 여기 드래곤스 어바운드도 이와 비슷한 숨겨진 보석임: https://heredragonsabound.blogspot.com

     ""여기 드래곤스 어바운드도 이와 비슷한 숨겨진 보석이다.""
     * 인터넷에 널린 쓰레기 속에서, 이런 보석 같은 것들을 소중히 여기고 싶음.

     ""인터넷에 쓰레기가 많지만, 이런 보석 같은 것들을 소중히 여긴다.""
     * K.M.은 내가 20년 동안 일해본 디자이너 중 최고임. 해커뉴스에서 이를 볼 수 있어서 기쁨.

     ""K.M.은 내가 20년 동안 일해본 최고의 디자이너다. 해커뉴스에서 이를 볼 수 있어 기쁘다.""
     * 이 브러시 세트들을 실제 위치 지도에 통합하는 것이 꽤 흥미로움. 공간적으로 완벽한 지도는 아닐 수 있지만, 만들고 보는 데에는 훨씬 더 재미있을 것임. 공공 참여 유형의 지도에 좋은 사용 사례가 될 것으로 보임.

     ""이 브러시 세트들을 실제 위치 지도에 통합하는 것이 흥미롭다. 공간적으로 완벽하지는 않겠지만, 만들고 보는 데 더 재미있을 것이다.""
     * 이 브러시 세트들을 어떻게 사용하나요?

     ""이 브러시 세트들은 어떻게 사용하는가?""
     * 이것은 훌륭함. 나는 판타지 책의 지도를 사랑했음. 읽고 있는 세계에서 캐릭터들의 위치를 추적하는 것을 좋아했음. 내가 쓸 책을 위해 스스로 지도를 그렸지만, 불행히도 내 재능은 글쓰기보다는 그리기에 있었음...

     ""판타지 책의 지도를 사랑했다. 캐릭터들의 위치를 추적하는 것을 좋아했다. 내가 쓸 책을 위해 지도를 그렸지만, 재능은 글쓰기보다는 그리기에 있었다.""
     * 던전 마스터들이 기뻐할 만함.

     ""던전 마스터들이 기뻐할 만하다.""
     * 정말 멋짐! 이전 경험이 없는 사람이 이러한 지도를 만들기 시작하는 가장 좋은 방법은 무엇일까요?

     ""이전 경험이 없는 사람이 지도를 만들기 시작하는 가장 좋은 방법은 무엇인가?""
"
"https://news.hada.io/topic?id=12434","NowDo - 미루는 사람들을 위한 MacOS용 무료 ToDo 앱","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  NowDo - 미루는 사람들을 위한 MacOS용 무료 ToDo 앱

     * 산만함을 최소화하는 매우 간편한 사용 방식
     * 항상 상단에 표시되지만 눈에 거슬리지 않음
     * 한 번에 한 가지 작업에 집중
     * 키보드로 완전히 탐색할 수 있어 빠른 액세스 가능
     * 개인정보 보호와 편의를 위해 오프라인에서 작동
     * CSV 가져오기/내보내기, 직접 제어 가능
     * 프리미엄 버전 출시 예정 (클라우드 백업과 동기화)

   처음에는 어떻게 쓰는지 잘 이해가 안 됐는데 알고나니 꽤 마음에 들었습니다!

   창 이동이 제대로 안되는 버그가 있네요. 기능이 마음에 들었는데 아쉽지만 삭제

   저도 써보니 생각보다 눈에 거슬리지 않은데, 창 이동 버그도 있고 화면을 가리긴 해서 결국 저도 댕강을ㅠ

   오 종종 사용해봐야겠네요

   재밌네요 ㅎㅎ 투두리스트 유목민인데 좋은 소개 감사합니다.
"
"https://news.hada.io/topic?id=12443","HN 소식: 마이크로소프트닷컴, DNS 레코드에 192.168.1.1 추가","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HN 소식: 마이크로소프트닷컴, DNS 레코드에 192.168.1.1 추가

마이크로소프트 도메인 조회 결과

     * nslookup 명령어를 사용한 마이크로소프트 도메인 조회 결과, 비공식(non-authoritative) 답변으로 여러 IP 주소가 나타남.
     * 조회된 IP 주소 중 일부는 사설 IP 범위(192.168.1.0, 192.168.1.1)에 속함.
     * 나머지 IP 주소들(20.112.250.133, 20.231.239.246 등)은 공용 IP 주소로 보임.

GN⁺의 의견

     * 이 기사에서 가장 중요한 점은 nslookup을 통해 마이크로소프트의 도메인 이름에 대한 IP 주소를 조회했을 때, 사설 IP 주소가 결과로 나타난다는 것임. 이는 일반적인 상황에서는 기대되지 않는 결과이며, 잠재적인 네트워크 설정 오류나 보안 문제를 시사할 수 있음.
     * 소프트웨어 엔지니어링의 관점에서, 이러한 결과는 DNS 서버의 잘못된 구성이나 내부 네트워크의 정보 노출을 의미할 수 있으며, 이는 중요한 인프라의 보안 관리 측면에서 주의를 요함.
     * 기사가 흥미로운 이유는 일반적으로 널리 알려진 대형 기업의 도메인에 대한 조회 결과가 예상치 못한 비정상적인 정보를 보여주기 때문임. 이는 IT 전문가들에게 네트워크 진단과 보안 감사의 중요성을 상기시키는 사례로 볼 수 있음.

        Hacker News 의견

     * 한 사용자는 마이크로소프트에서 일하는 지인을 통해 DNS 변경 사항이 되돌려졌다는 정보를 얻었고, 이를 30분 내에 확인할 수 있을 것이라고 언급함.

     ""마이크로소프트의 DNS 변경 사항이 곧 복구될 예정임을 알게 됨""
     * 다른 사용자는 자신의 dnsmasq 설정으로 인해 microsoft.com에 대한 DNS 요청이 차단되고 있음을 발견함.

     ""dnsmasq 설정으로 인해 microsoft.com DNS 요청이 차단됨을 확인함""
     * Bunny.net이 실수로 DNS를 127.0.0.1로 변경하여 CDN 사용자들에게 문제를 일으켰다는 사실을 언급하며, 이것이 우연인지 의문을 제기함.

     ""Bunny.net의 DNS 변경 실수로 CDN 사용자들이 영향을 받음""
     * 한 사용자는 자신의 네트워크에서 microsoft.com이 IPv6 주소만을 사용하고 있으며, OpenWrt의 DNS 리바인딩 보호 기능 때문에 IPv4 주소(A 레코드)가 필터링되고 있음을 설명함.

     ""OpenWrt의 DNS 리바인딩 보호 기능으로 인해 microsoft.com의 IPv4 주소가 필터링됨""
     * microsoft.com의 DNS 레코드가 여전히 192.168.1.0으로 설정되어 있는 것에 대해 놀라움을 표현함.

     ""microsoft.com의 DNS 레코드가 잘못된 주소로 설정되어 있음에 놀라움""
     * DNS 레코드가 잘못 설정되는 상황에 대해 의문을 제기하며, 이러한 실수를 할 정도로 무능한 사람이 DNS 레코드를 설정할 수 있는 권한을 가지고 있다는 것에 대한 비판을 함.

     ""DNS 레코드 설정 실수에 대한 의문 제기 및 비판""
     * 누군가가 농담처럼 주차장에서 밴 뒤에서 주소 공간을 구매하는 것과 같은 상황을 언급함.

     ""주소 공간 구매에 대한 농담 언급""
     * microsoft.com의 DNS 정보를 조회하고 이로 인해 발생할 수 있는 잠재적인 영향에 대해 궁금해함.

     ""microsoft.com의 DNS 정보 조회 및 잠재적 영향에 대한 궁금증 표현""
     * microsoft.com의 DNS 주소가 192.168.1.1과 192.168.1.0으로 잘못 설정된 것을 발견하고 이를 ""ooopsie!""라고 표현함.

     ""microsoft.com의 잘못된 DNS 주소 설정 발견 및 반응""
     * 마이크로소프트가 Windows XP SP2 이후 시스템의 호스트 파일 우회를 생성하는 방식과 관련이 있을 수 있다고 추측하며, Windows 10에서도 여전히 이러한 방식이 사용되고 있음을 언급함.

     ""마이크로소프트의 호스트 파일 우회 생성 방식에 대한 추측""
"
"https://news.hada.io/topic?id=12382","빈 리스트에 대한 all? 함수의 리턴 값은? - 공허참(vacuous truth)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             빈 리스트에 대한 all? 함수의 리턴 값은? - 공허참(vacuous truth)

     * 빈 리스트에 대한 Enum.all? 함수 리턴 값이 true
          + Haskell의 all, Python의 all, Clojure의 every? 함수도 똑같이 동작
     * 빈 리스트에 대해 true를 리턴하면 구현하기 쉬움
          + true && f(elem1) && f(elem2) ...
          + 하지만 구현상 편의 때문에 저렇게 구현한 게 아님
          + 논리학의 공허참(vacuous truth) 정의에 부합하게 구현한 것임
     * 공허참을 이해하기 위해선 실질 조건문을 살펴봐야 함
          + p가 거짓이면 p → q는 항상 참
          + “자유의 여신상이 서울에 있다면 에펠탑은 포항에 있다”는 참
               o p인 “자유의 여신상이 서울에 있다”가 거짓이기 때문
          + 이런 실질 조건문에서 p가 거짓이라 무조건 참이되는 걸 공허참이라고 함
     * 공허참에서는 비어있는 집합(set)에 대해서는 어떠한 명제도 참이 된다
          + '방 안의 모든 휴대폰이 꺼져 있다'를 예로 들면
          + x는 방에 있는 모든 것
          + P(x)는 'x는 휴대폰이다'
          + Q(x)는 'x는 꺼져있다'
          + x가 비어 있기 때문에 P(x)는 거짓. 공허참에 의해 항상 참이 된다.
     * 그래서 비어 있는 리스트에 대한 Enum.all? 함수의 리턴 값은 true가 된다.

   배워갑니다ㅎ공유 감사해요
   수학적, 컴공적 접근은 이래도 코딩땐 헷갈려서 활용 안하는게 좋아보여요ㅋㅋ
   특히 if문에서는 빈 리스트를 False로 인식해서 많이 헷갈립니다

   파이썬 기준 아래와 같습니다.
   all([]) == True
   all([[]]) == False

   저는 그래서 코드를 읽을 사람을 위해 조건을 명시적으로 작성하는 방향을 선호합니다.
   if not arr: 보다는 if len(arr) == 0: 처럼요.
   if not flag: 대신 if flag is False: 같은 예시도 있겠네요.

   제 기준에 따르면 all([[]]) 는 all([조건식 for ... in []]) 로 고쳐 쓰는 게 코드를 더 잘 읽히게 해줄 테고요.

   아~ python에서는 빈 리스트가 falsy values라서 all([[]]) 리턴 값이 False가 되는거군요. 언어마다 Truthy, Falsy values가 달라서 다른 언어를 할 때, 한 번씩 실수를 하네요. :)

   참고로 Elixir는 nil 또는 false만 Falsy values라서 Enum.all?([[]]) 값은 true가 나와요.
"
"https://news.hada.io/topic?id=12475","VideoPoet - 구글의 Zero-Shot 비디오 생성 특화 LLM","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                VideoPoet - 구글의 Zero-Shot 비디오 생성 특화 LLM

     * 최근 비디오 생성 모델들이 등장하며 놀라운 화질을 선보이고 있는데, 현재 한계는 일관된 대규모 움직임의 생성 능력 부족
     * VideoPoet은 텍스트-비디오, 이미지-비디오, 비디오 스타일링, 비디오 인페인팅 및 아웃페인팅, 비디오-오디오 생성 등 다양한 비디오 생성 작업을 수행할 수 있는 LLM
          + 다른 모델과 달리 각 작업을 잘하는 구성요소에 의존하는 것이 아닌, 단일 LLM내에서 각 기능을 통합
          + 이미지를 움직임으로 변환하고, 비디오를 편집하여 인페인팅 또는 아웃페인팅을 수행
     * VideoPoet는 비디오, 이미지, 오디오, 텍스트 모달리티를 학습하기 위해 여러 토크나이저를 사용하여 자동회귀 언어 모델을 훈련함
     * 텍스트-to-비디오의 경우, 비디오 출력은 가변 길이이며 텍스트 내용에 따라 다양한 움직임과 스타일을 적용할 수 있음
     * 이미지-to-비디오의 경우, 입력 이미지를 프롬프트와 함께 움직임으로 애니메이션화
     * 비디오 스타일링에서는 Optical Flow와 Depth 정보를 예측한 후 추가 입력 텍스트와 함께 VideoPoet에 입력
     * VideoPoet은 오디오도 생성할 수 있으며, 이를 통해 단일 모델에서 비디오와 오디오를 생성할 수 있음
     * 생성 평가 결과 평균적으로 사람들은 VideoPoet이 프롬프트를 더 잘 따르고, 더 흥미로운 움직임을 생성한다고 평가
     * VideoPoet은 비디오 내에서 흥미롭고 고품질의 움직임을 생성하는 데 있어 LLM의 경쟁력을 입증함
"
"https://news.hada.io/topic?id=12418","Ask GN: 혹시 최신글 탭처럼 시간순으로 올라오는 GN+ 탭은 없나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Ask GN: 혹시 최신글 탭처럼 시간순으로 올라오는 GN+ 탭은 없나요?

   GN+ 를 점수 순위가아니라 시간순으로 올라오는걸 모두 받아보고싶은데요

   RSS 를 사용하시면 됩니다 https://news.hada.io/rss/news
   현재는 기사랑 구분이 안되긴 한데, author 가 neo 인 것만 필터링 하시면 GN+ 뉴스모음이 됩니다.

   필터링은 어떻게할수있나요?

   조금 귀찮지만 사용하시는 RSS 리더에서 세팅 하셔야 합니다.
   RSS Guard 같은 도구는 아티클 필터 기능이 제공됩니다.
"
"https://news.hada.io/topic?id=12435","microsoft/promptbase - 프롬프트 관련 자료, 모범사례, 예제 모음 ","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             microsoft/promptbase - 프롬프트 관련 자료, 모범사례, 예제 모음

     * GPT-4 와 같은 파운데이션 모델에서 최상의 성능을 이끌어내기 위한 자료 모음
     * 현재 'Medprompt+' 같은 프롬프트 기법을 비의료 영역으로 확장한 사례를 비롯하여 Medprompt 방법론을 보여주는 다양한 스크립트들을 호스팅
     * 프롬프트 엔지니어링의 과학적 프로세스에 대한 추가 사례 연구와 구조화된 인터뷰 및 특수한 툴링에 대한 심층 분석도 제공할 예정
"
"https://news.hada.io/topic?id=12481","Ask GN: 이번 주말에 뭐 하시나요?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ask GN: 이번 주말에 뭐 하시나요?

   이번 주말에 뭘 하려고 계획 중인지 편하게 얘기해 보아요.

   읽을 책, 가볼 곳, 해볼 것.. 어떤 것이든 좋습니다.
   도움 요청이나 피드백 요청도 좋습니다.
   물론! 아무것도 하지 않고 쉬는 것도 훌륭합니다.

   지난 주말에 계획하셨던 일의 회고도 한번 남겨봐 주세요.

   메리 크리스마스! 긱뉴스에 산타모자도 달았습니다.
   요즘은 날짜를 잘 안보고 살아서 25일이 연휴라는 것도 몰랐네요 ㅠ
   아마도 집에서 푹 쉴듯 합니다.

   즐거운 홈파티 약속들이 잡혀있어요.
   간단한 핑거푸드와 와인을 준비하려고 합니다~
   메리크리스마스!
"
"https://news.hada.io/topic?id=12371","Oxlint - ESLint보다 50~100배 빠른 JS 린터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Oxlint - ESLint보다 50~100배 빠른 JS 린터

     * 특별한 설정없이도 오류 및 쓸데없는 코드를 잡도록 설계된 자바스크립트 린터
     * Rust 와 병렬처리를 핵심으로 활용해서 성능 향상을 목적으로 함
     * 실환경에서 Shopify는 75분 소요되던 ESLint 실행 시간이 이제 10초에 불과하다고 보고했음
     * 현재단계는 ESLint를 완벽히 대체하는 것은 목적으로 하지 않음
          + 워크플로우상 ESLint의 속도가 보틀넥이 될 경우에 보완하는 용도로 사용
          + 빠른 피드백 루프를 위해, 린트 단계 또는 CI 설정에서 ESList 보다 Oxlint를 실행하도록 지정
     * Oxlint는 기본적으로 잘못되거나, 중복되거나, 혼란스러운 코드를 식별하며, 불필요한 까다로운 규칙(성능, 의심스러운, 까다로운, 스타일로 분류)은 기본적으로 비활성화되어 있음
     * 기본적으로 Zero-Configuration 이며, 심지어 Node.js조차 필요하지 않음. 대부분의 조정은 커맨드 라인을 통해 이루어지며, ESLint 구성 파일에서 읽는 것은 현재 진행 중임
     * 근본 원인을 정확히 지적하고 유용한 메시지를 제공하여, 긴 규칙 문서를 읽는 필요성을 없애고, 소중한 시간을 절약
     * 아직 플러그인 시스템을 제공하지 않지만, TypeScript, React, Jest, Unicorn, JSX-a11y 및 Import와 같은 인기 있는 플러그인에서 규칙을 적극적으로 통합하고 있음
     * JavaScript 생태계에서 플러그인의 중요성을 인식하고 있으며, DSL 기반 플러그인 시스템에 대한 조사도 진행 중
"
"https://news.hada.io/topic?id=12444","왜 프로그래머는 문이 달린 개인 사무실이 필요할까?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      왜 프로그래머는 문이 달린 개인 사무실이 필요할까?

     * 프로그래머이자 YC를 만든 폴 그레이엄이 처음으로 두 가지 유형의 작업을 구분함
          + 첫 번째 유형은 중단해도 문제가 없는 작업으로, 언제든지 멈추고 다시 시작할 수 있음
          + 두 번째 유형은 '방해 금지(Do Not Disturb)' 작업으로, 집중을 요하며 중단하면 생산성에 큰 손실이 발생함
     * '방해 금지' 작업의 생산성은 선형적이지 않으며, 시간의 제곱에 비례하여 증가할 수 있음.
          + 예를 들어, 2시간 동안의 작업은 4단위의 생산성을, 1시간씩 두 번의 작업은 2단위의 생산성을 낼 수 있음.
          + 이러한 작업에서는 30초의 방해가 생산성을 크게 저하시킬 수 있음.

문 앞에서 문 앞까지

     * 열린 사무실과 개인 사무실 사이의 영원한 긴장은 두 가지 유형의 작업에 의해 설명될 수 있음.
          + 중단 가능한 작업을 하는 사람에게는 열린 사무실이 유리할 수 있음.
          + '방해 금지' 작업을 하는 사람에게는 개인 사무실이 필수적임.
          + ""Joel On Software""의 저자이자, StackOverflow를 만든 조엘 스폴스키는 이러한 이유로 개인 사무실의 중요성을 강조함.
               o ""VC투자를 받을 경우, 개발자를 위한 개인 사무실을 갖는 것이 불가능해서 외부 자금 조달을 완전히 피했어요""

메일을 무시하세요

     * '방해 금지' 작업은 생산성 작가들이 하루의 첫 몇 시간을 이메일을 완전히 무시하고 작업에 집중할 것을 권장하는 이유의 핵심임.
          + 이메일은 작업 중단의 극단적인 예로, 짧은 시간에 대답하면서 생산적이라고 느낄 수 있지만, 실제로는 중요한 작업의 흐름을 방해함.

시간과 공간

     * '방해 금지' 작업에 대한 몇 가지 팁:
          + 가능하다면 작업 시간을 무제한으로 설정하여, 이메일 확인 등의 일정에 구애받지 않고 작업에 몰입하는 것이 좋음.
               o 폴 그레이엄 : ""예정된 방해 요소가 계획되지 않은 방해 요소보다 더 나쁠 수 있음. 한 시간 뒤에 회의가 있다는 걸 안다면, 힘든 일을 시작하지도 않을 것""
          + 모든 방해가 동일하게 만들어지는 것은 아니며, 뇌를 혼란스럽게 하는 방해는 피해야 함.
          + 자동 조종 상태로 처리할 수 있는 방해는 허용될 수 있음.

함께 일하기

     * 관리자들에게 '방해 금지' 작업자를 보호하고, 그들이 중요한 작업에 몰두할 수 있도록 지원할 것을 권장함.
          + '방해 금지' 작업은 매우 즐거운 작업이며, 창의적인 아이디어와 혁신적인 발명품을 만드는 데 필수적임.

GN⁺의 의견:

     * 이 글에서 가장 중요한 것은 프로그래머와 같은 창의적인 전문가들이 '방해 금지' 작업을 수행할 때 필요한 집중력과 그에 따른 개인 사무실의 중요성임.
     * 글이 흥미로운 이유는 일반적인 업무 환경에서 자주 발생하는 문제를 다루고 있으며, 이를 통해 업무 효율성과 창의성을 높이는 방법에 대한 통찰을 제공하기 때문임.
     * 폴 그레이엄과 조엘 스폴스키와 같은 업계 리더들의 견해를 인용함으로써, 이 주제에 대한 전문가의 시각을 제공하고 있어 독자들에게 신뢰성 있는 정보를 제공함.

        Hacker News 의견

     * 일본 기업에서 일한 경험
          + 도쿄 사무실은 부서별로 긴 책상이 늘어선 거대한 방이었음.
          + 부장의 책상은 각 줄의 끝에 있었고, 수십억 달러 예산을 관리하는 부사장들조차 작은 책상을 썼음.
          + 수백 명의 엔지니어가 있는 방은 도서관처럼 조용했으며, 카펫과 사무실 슬리퍼가 있었고, 잡담이 거의 없었음.
          + 반면, 미국의 오픈 플랜 사무실은 시장 같은 분위기로 시끄럽고 혼란스러웠음.
          + 일본인들은 오픈 플랜 사무실에 익숙하지만 미국의 쿠빌과 사무실에는 불편함을 느꼈음.
          + 문화적 경계를 넘어서는 ""원 사이즈 핏 올"" 해결책은 효과가 없음을 발견함.
     * 좋은 프로그래머 옆에서 배운 경험
          + 열정적인 프로그래머 옆에서 일하며 질문하고 때로는 그의 작업을 방해하기도 했음.
          + 서로의 생각을 공유하며 디버깅과 아이디어 브레인스토밍을 함께 하면 혼자 일할 때보다 더 좋은 결과를 얻었음.
          + 협업 환경에서는 소규모 그룹이 함께 앉아 작업하는 것이 가장 효과적이라고 생각함.
          + 원격 근무에서는 회사가 팀에 더 많은 사람을 고용함으로써 숨겨진 비효율성을 해결하려고 하지만, 그로 인해 1+1이 2보다 큰 환경이 사라짐을 우려함.
          + 원격 근무를 선호하는 사람들에게 새로운 졸업생이 멘토를 찾고 코드 작성 기술을 향상시킬 수 있는 방법을 묻고 싶음.
          + 반론으로, 열정적인 사람들이 원격으로 작업하는 성공적인 오픈 소스 프로젝트가 있음을 언급함.
     * 소규모 팀에서의 협업 선호
          + 약 6명이 같은 프로젝트에 참여하는 방에서 일하는 것을 선호함.
          + 집이나 개인 사무실에서 일하는 것보다 훨씬 낫다고 느낌.
          + 팀원들과 즉각적인 질문과 답변, 아이디어 공유, 브레인스토밍, 팀의 동향 파악 등이 협업의 가치임.
          + 원격 근무에서는 팀과의 연결감이 부족함을 느낌.
     * 사무실 환경에 대한 개인적 경험
          + 30인 회사에서 CEO, 그래픽 디자이너, 비서와 함께 4인용 파티션 사무실에서 일함.
          + CEO가 없을 때, 다른 직원들의 큰 소리 대화와 외침이 프로그래밍 작업에 방해가 됨.
          + 비서는 CEO가 있을 때 사무실의 활동 수준에 대해 우려를 표현함.
     * 개인 사무실과 원격 근무에 대한 다양한 의견
          + 모든 사람이 개인 사무실을 원하는 것은 아니며, 항상 더 생산적인 것은 아님.
          + 집에서 일하는 것이 항상 더 나은 것은 아니며, 오픈 플랜 사무실이 항상 나쁜 것은 아님.
          + 작업 시간 계획, 방해받지 않는 시간 설정, 비동기적 커뮤니케이션 방법 사용 등을 통해 집중력 문제를 해결할 수 있음.
     * 개인 사무실 제공에 대한 의견
          + 개인 사무실과 기타 혜택을 제공하면 팀이 더 가치 있게 느끼고 더 잘 일할 수 있을 것이라고 생각함.
          + 원격이 아닌 팀을 고용한다면 개인 사무실 제공을 탐색하고 싶음.
     * 관리자 입장에서의 프로그래밍 환경
          + 코딩 시 고립되고 방해받지 않는 환경을 선호함.
          + 팀이 일치된 형태로 움직이는 것이 회사에 더 중요함.
          + 원격 근무와 다른 옵션을 성공적으로 만들기 위한 시도가 있었지만, 협업 환경이 더 나은 결과를 낳음을 실험을 통해 확인함.
     * 프로그래머뿐만 아니라 집중력이 필요한 모든 직업에 대한 의견
          + 프로그래머뿐만 아니라 집중력을 필요로 하는 모든 직업이 오픈 플랜 사무실의 영향을 받음.
          + 작가, 공부하는 사람, 의료 기술자 등 모든 직업이 흐름을 필요로 함.
     * 조엘 스폴스키의 개인 사무실에 대한 글 링크
          + 조엘 스폴스키가 20년 전에 쓴 개인 사무실에 대한 글을 언급함.
     * 프로젝트 관리에 대한 의견
          + 프로젝트 관리는 생산적인 핵심을 외부 방해로부터 보호하는 것이 중요함.
          + 프로젝트 초기에 목표를 명확히 하고, 계획을 잘 세우며, 엔지니어를 보호하는 것이 중요함.

   바로 이거지 현실적이고 드라이해질수 있는 혀ㆍ장에서 그나마 효율성싰는 환경환경 구축해줄 확률이 높은. 옆에서 기계식 키보드에 손가락힘 이빠이 주고 다다다 거리고 있으면 살인충동 생기는데... 뭔 코딩하는데 예술타령이나 쳐하는 감성팔이 족속들 보다 이런글 보면 시원해짐

   제 글 보시고 화가 많이 나셨나봐요 ^^;;

   의도는 공감하지만 표현에서 온갖 무기가 튀어나오는군요...
"
"https://news.hada.io/topic?id=12394","브레인GPT, 생각을 텍스트로 변환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          브레인GPT, 생각을 텍스트로 변환

마음 읽기 기술의 새로운 돌파구

     * 시드니 공과대학교의 GrapheneX-UTS 인간 중심 인공지능 센터 연구진이 '마음 읽기' 기술에 관한 새로운 돌파구를 발표함.
     * 이 연구는 생각을 화면에 표시된 단어로 변환하는 데 성공, 원시 EEG 파동을 직접 언어로 번역하는 선구적인 노력으로 평가됨.
     * 뇌파를 텍스트로 번역하는 과정에서 이산 부호화 기법을 도입하고, 대규모 언어 모델과의 통합으로 신경과학과 AI 분야에서 새로운 전망을 열었다고 함.

뇌파를 이용한 언어 번역 기술

     * 참가자들이 텍스트를 조용히 읽는 동안, DeWave라는 AI 모델이 그들의 뇌파만을 입력으로 사용하여 화면에 단어를 투사함.
     * 이 기술은 뇌 이식이나 전체 MRI 기계에 접근할 필요 없이 뇌 신호를 언어로 번역할 수 있는 유일한 기술임.
     * 추가 입력, 예를 들어 안구 추적 소프트웨어가 필요한 이전 기술들에 비해, 이 새로운 기술은 그러한 추가 기능 없이도 사용 가능함.

실용성과 편의성

     * 사용자는 EEG를 통해 뇌 활동을 기록하는 모자만 착용하면 되므로, 안구 추적기나 MRI 기계보다 훨씬 실용적이고 편리함.
     * 연구진은 신호가 이식물에서 얻은 정보보다 다소 잡음이 많다고 인정했지만, 시험에서 기술이 상당히 잘 수행됨을 밝힘.
     * BLEU 알고리즘을 사용한 정확도 측정에서 이 기술은 약 0.4의 점수를 받음.

정확도 개선 가능성

     * 모델은 동사와 일치하는 데 더 능숙하지만, 명사의 경우 '작가' 대신 '남자'와 같이 동의어 쌍을 선호하는 경향이 있음.
     * 연구진은 뇌가 이 단어들을 처리할 때 의미적으로 유사한 단어가 비슷한 뇌파 패턴을 생성할 수 있다고 생각함.
     * 연구진은 정확도를 0.9까지 향상시킬 수 있을 것으로 믿으며, 이는 전통적인 언어 번역 프로그램과 비슷한 수준임.
     * 연구진은 29명의 참가자를 대상으로 실험을 진행했는데, 이는 다른 디코딩 기술 시험보다 훨씬 많은 수치임.

GN⁺의 의견

     * 이 기술은 뇌파를 통해 사람의 생각을 직접적으로 언어로 번역하는 놀라운 진보를 나타냄.
     * 뇌 이식이나 복잡한 기계 없이 EEG 모자만으로 사용할 수 있는 접근성은 이 기술을 매우 혁신적으로 만듦.
     * 미래에는 이 기술이 의사소통 장애를 가진 사람들에게 큰 도움을 줄 수 있으며, 인간과 기계 간의 상호작용을 새로운 차원으로 끌어올릴 잠재력을 가짐.

        Hacker News 의견

     * 뇌-컴퓨터 인터페이스(BCI) 연구는 주로 마비 환자들이 의사소통을 회복할 수 있도록 하는 데 초점을 맞추고 있음.
          + EEG는 두개골 외부에서 뇌의 전기장이 약해지는 물리적 한계로 인해 충분한 신호 대 잡음 비율을 제공하지 못해 좋은 통신 속도를 지원하지 못함.
          + 상업적 ""마음 읽기"" 장난감은 실제로 머리와 눈 근육 신호를 기반으로 작동함.
          + 이식된 전극은 더 나은 신호를 제공하지만 상업적으로 실용화되기까지 여러 번의 개선이 필요함. 신호는 몇 달이 지나면서 뇌가 전극 주변에 흉터 조직을 형성함에 따라 저하되고, 뇌 수술은 분명 위험함.
          + 인간을 대상으로 한 테스트에 대한 정부 승인이 필요하기 때문에 반복 주기가 매우 느림.
          + 마비된 친구를 돕고자 한다면, 눈만 움직일 수 있는 경우 눈 추적 기술에 집중할 것임.
     * 뇌 신호를 언어로 번역할 수 있는 기술은 처음이 아니지만, 뇌 이식이나 전체 MRI 기계에 접근할 필요가 없는 유일한 기술임.
          + 센서 기술이 충분히 좋아져서 모자를 쓸 필요조차 없게 되면, 사람들이 공공장소에서 생각을 읽히는 것에 대한 합리적인 기대를 갖지 말라고 말하는 시대가 올지 궁금함.
     * 이 기술은 자기 성찰에도 도움이 될 수 있음.
          + 자신의 생각 패턴을 외부에서 분석할 수 있어 교육 기법의 효과를 찾고, 집중력이 가장 높고 낮은 시간을 객관적으로 파악하며, 불안한 생각이 시작되는 시점과 그 원인을 정확히 알 수 있음.
          + FMRI를 뇌 스캐닝 거짓말 탐지기로 사용할 수 있지만, 그 정당성에 대한 많은 의문이 있음.
     * DARPA의 ""Silent Talk"" 프로젝트는 14년 전에 시작되었으며, 신경 신호 분석을 통해 전투 중 구두 의사소통 없이 사용자 간의 의사소통을 가능하게 하는 것이 목표였음.
     * 이 기술은 뇌졸중 환자에게 도움이 될 수 있지만, 필터링되지 않은 생각을 내보낼 수도 있어 문제가 될 수 있음.
     * EEG를 사용하여 생각을 예측하는 것은 마치 뭄바이의 구름을 보고 오스틴의 구름을 예측하려는 것과 같음. 개별 뉴런의 전기 신호는 대규모 진동 속에서 사라지고, 뇌와 장치 사이의 뼈, 근육, 조직의 층에 의해 더욱 흐려짐. 비트율은 초당 1비트로 대부분의 사용 사례에 완전히 부족함.
     * 이 모델의 기본 버전에는 코드에 버그가 있어 기준 결과가 부풀려졌으며, 문제를 조사 중임.
     * 언어적이지 않은 생각도 작동할 수 있는지 궁금함. 예를 들어, 일상 활동과 관련된 신호 데이터셋을 기반으로 개의 생각이나 꿈을 알아낼 수 있음.
     * 모든 끔찍한 함의를 제외하고, 이 기술은 매우 멋진 것을 가능하게 함: 양방향 정신적 의사소통.
          + 메시지를 생각하고 ""보내기""를 생각하면, 이어버드를 통해 응답을 들을 수 있음. 음성 복제 기술을 사용하면 발신자의 목소리로 메시지를 받을 수 있음. 외부 관찰자에게는 완전히 조용하고 보이지 않음.
"
"https://news.hada.io/topic?id=12431","나의 고양이 물분수에 동봉된 매운맛 USB 파워 어댑터","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     나의 고양이 물분수에 동봉된 매운맛 USB 파워 어댑터

고양이 물 분수에 동봉된 위험한 USB 파워 어댑터

     * 고양이 물 분수용 USB 타입 A 파워 어댑터가 규격 내에 있지 않을 수 있음을 발견함.
     * 고양이의 수분 섭취를 돕기 위해 Catit Flower Fountain을 사용하고 있으며, 이는 건강 문제를 예방하는 데 도움이 됨.
     * 전력 중단 시 고양이가 물을 마실 수 없게 되는 것을 방지하기 위해 DIY 무정전 전원 공급장치(UPS)를 만들려고 시도함.

USB 파워 어댑터의 문제 발견

     * 여러 파워 뱅크를 사용하여 물 분수를 테스트했으나, 잠시 작동 후 꺼지는 현상 발생.
     * 이후 일상적인 사용 중에 파워 뱅크 두 개가 오작동하는 것을 발견함.

전압 측정과 발견된 문제

     * IKEA 멀티탭의 USB 포트에 물 분수를 연결했을 때, 기존보다 소음이 줄어듦을 발견함.
     * 원래 어댑터와 비교해 전류량의 차이를 확인하려 했으나, 물 분수에 동봉된 어댑터가 7.5V를 출력하는 것을 발견함.
     * USB 타입 A 포트는 일반적으로 약 5V를 제공하며, 실제 관찰 결과 최대 5.25V임.
     * 7.5V는 다른 기기에 안전하지 않을 수 있으며, USB 포트를 보고 안전하다고 생각하는 사람들이 휴대폰 등을 충전할 위험이 있음.

고양이 사진 업데이트

     * 인기 요청에 따라 두 마리의 귀여운 고양이 사진을 업데이트함.
     * Tux와 Põssa라는 이름의 고양이로, Põssa는 영어로 'Piggy'라고 번역될 수 있음.

GN⁺의 의견

     * 이 글에서 가장 중요한 것은 USB 파워 어댑터가 항상 안전하다고 가정할 수 없다는 점임.
     * 일반적인 USB 규격을 벗어난 전압을 제공하는 어댑터는 다른 전자 기기에 해를 끼칠 수 있으며, 이는 사용자들에게 중요한 안전 정보임.
     * 이 글이 흥미로운 이유는 일상 생활에서 흔히 접하는 USB 어댑터의 잠재적 위험성을 드러내고 있기 때문임.

        Hacker News 의견

     * Lidl의 Parkside PFBS 12 B3 회전 공구에는 USB-PD가 아닌 USB-C 플러그가 달린 충전기가 포함되어 있으며, 항상 13볼트를 출력함. 사용자가 Lidl에 이 문제에 대해 긴 이메일을 보냈지만, Lidl은 서비스 티켓을 열라는 답변 외에는 별다른 관심을 보이지 않았음.
     * 아시아에서는 USB-A를 통해 9볼트나 12볼트를 공급하는 것이 비교적 흔한 일이며, 큰 제조업체의 제품이 아닌 경우 전압 등급을 확인해야 함. 예를 들어, 현재 사용 중인 핸드워머는 USB-A 12볼트이지만, 온도 조절을 위해 0볼트에서 12볼트 사이로 전압을 조절할 수 있는 다이얼이 있음.
     * 5.5볼트 또는 6볼트도 흔한데, 이는 얇고 저렴한 전선을 사용할 수 있게 해주며, 전압 강하가 있어도 휴대폰을 빠르게 충전할 수 있음.
     * 큰 제조업체들도 때때로 5볼트 이상의 전압을 USB를 통해 사용하지만, 높은 전압을 활성화하기 위해 특별한 메시지를 보내야 하므로, 모든 것에 안전하게 연결할 수 있음. 그러나 USB Y-분배기나 다중 헤드 케이블을 사용할 때는 문제가 될 수 있음.
     * 한 사용자는 고양이용 물 분수를 사용했었는데, 이제는 일반 그릇을 사용하고 있으며, 사용하지 않는 USB A 벽 충전기와 함께 보관함에 넣어두었음. 이제는 전기적인 러시안 룰렛 같은 상황임.
     * Clover 포인트 오브 세일 시스템용 앱을 개발하던 중, USB-C 포트에 새 MacBook Pro를 연결했으나, MacBook이 즉시 꺼졌고, USB 포트가 다시는 작동하지 않았음. 해당 포트는 영수증 프린터를 연결하기 위한 것이었으며, 표준 USB-C가 아니었음. 디버깅을 위해서는 다른 곳에 있는 마이크로 USB 포트를 사용해야 했음.
     * 포스트에 귀여운 고양이 사진이 없어서 걱정됨. 제조업체들은 USB-A를 단순히 전력을 공급하기 위한 편리하고 저렴한 커넥터로 보는 것 같음.
     * 요즘 대부분의 제품이 벽 어댑터 없이 USB 플러그만 제공되어 다행이라고 생각함. 나쁜 어댑터가 출력할 수 있는 7볼트보다 훨씬 더 나쁜 것들이 있음. 최근에 알게 된 가장 무서운 고장 모드 중 하나는 두 핀 사이에 5볼트를 제공하지만 각각 225볼트와 230볼트를 접지에 제공하는 것임.
     * 코스타리카의 ""호텔""에서 샤워를 하던 중, 전기 히터가 달린 샤워기가 사용하는 내내 전기 충격을 주었음. 중앙 및 남미에서는 이런 샤워기가 흔함.
     * USB PD와 같은 협상된 전력 전달 표준을 통해 전압을 높이는 것은 괜찮음. 최신 USB PD는 최대 48볼트와 최대 5암페어를 지원하여 240와트에 이를 수 있음. 그래서 모든 빠른 충전기가 모든 제품에 잘 맞지 않는 이유는, 필요한 전압 + 전류 조합이 지원되지 않으면 대신 지원되는 가장 가까운 낮은 조합이 사용될 것임.
     * 고양이용 물 분수의 아이디어가 이상하게 들릴 수 있지만, 정체된 물은 박테리아와 질병이 쌓일 수 있으므로 고양이는 본능적으로 흐르는 물을 좋아하고 신뢰함. 그래서 고양이 분수는 장난감이나 신기루처럼 들릴 수 있지만 실제로는 훌륭한 아이디어임.
     * 동일한 물 분수를 사용하고 있으며, 케이블을 연결할 수 있는 iPad 충전기를 사용했지만, 어느 날 충전기가 고장 나고 약간 탔음. 그 이후로는 제공된 충전기를 사용하고 있지만, 다른 전압을 제공한다는 것을 알지 못했음. 경고에 감사함.
"
"https://news.hada.io/topic?id=12404","Adobe 와 Figma 합병을 철회","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Adobe 와 Figma 합병을 철회

     * 2022년 9월 합병을 발표하고 규제 검토 프로세스 시작 후 15개월이 지났지만, 규제 승인 경로를 찾을 수 없었음
     * Adobe가 $20B에 Figama를 인수하기로 했던 것을 종료하기로 결정
     * 관련내용
          + 계약에 따라 Adobe 는 Figma 에 현금으로 $1B(1.3조원)의 Reverse Termination Fee(취소 수수료) 를 줘야함

   인수한다고 하고 오래 지나서 이미 완료된 줄 알았는데, 규제에 막혔나보네요.
   이러면 Figma만 이득인걸까요...?

   신규자금 1조가 생겼으니 더 잘 되지 않을까요? 저는 Figma가 Adobe와 경쟁할 정도로 더 성장하면 좋겠습니다. ㅎㅎ

   Adobe가 Figma를 $20B(28조원)에 인수 예정
   Adobe의 Figma 인수는 개발자들에게 '나쁜' 영향을 미칠 수 있다고 영국 규제당국이 경고
   SEC에 제출했던 인수 계약서

   전체 글 요약 및 해커뉴스 반응 보기 : GN⁺: 피그마와 어도비, 제안된 합병 포기
"
"https://news.hada.io/topic?id=12374","구글 그룹스, 유즈넷 지원 종료","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           구글 그룹스, 유즈넷 지원 종료

Google Groups, Usenet 지원 종료 예정

     * 2024년 2월 22일부터 Google Groups를 통한 Usenet 그룹의 콘텐츠 게시, 구독, 새로운 Usenet 콘텐츠 보기가 불가능해짐.
     * 이 날짜 이전에 게시된 역사적 Usenet 콘텐츠는 Google Groups에서 계속 조회 및 검색 가능.
     * Google의 Network News Transfer Protocol (NNTP) 서버와 관련 피어링도 사용 불가해져, 새로운 Usenet 콘텐츠 제공이나 다른 NNTP 서버와의 콘텐츠 교환을 지원하지 않게 됨.
     * 이 변경사항은 Usenet이 아닌 Google Groups의 다른 콘텐츠에는 영향을 주지 않으며, 대부분의 현재 Google Groups 콘텐츠는 Usenet 콘텐츠가 아니므로 영향받지 않음.

Usenet 콘텐츠를 계속 사용하고 싶다면 어떻게 해야 하나?

     * Usenet 콘텐츠를 활발히 사용하지 않는다면 별도의 조치가 필요 없음.
     * 2024년 2월 22일 이전에 Usenet 콘텐츠를 계속 사용하고자 하는 사용자는 두 가지를 해야 함:
         1. 새로운 Usenet 클라이언트 찾기. 무료 및 유료 대안이 웹 기반 및 애플리케이션 기반으로 존재함. 클라이언트를 찾기 위해 웹 검색을 할 것.
         2. 새로운 공개 Usenet 서버 찾기. 선택한 클라이언트에는 기본 서버 또는 선별된 옵션이 있을 것임. 그렇지 않다면, 서버를 찾기 위해 웹 검색을 할 것.
     * Usenet은 분산 시스템이므로 데이터를 마이그레이션할 필요가 없음.
     * 선택한 새 클라이언트와 서버에서 관심 있는 그룹을 다시 선택하면 됨.

왜 Google Groups는 Usenet 지원을 종료하는가?

     * 지난 몇 년 동안 텍스트 기반 Usenet 그룹에서의 합법적 활동이 사회적 미디어, 웹 기반 포럼과 같은 더 현대적인 기술과 형식으로 이동함에 따라 크게 감소함.
     * 오늘날 Usenet을 통해 전파되는 대부분의 콘텐츠는 Google Groups가 지원하지 않는 바이너리(비텍스트) 파일 공유 및 스팸임.

GN⁺의 의견

     * Google Groups의 Usenet 지원 종료는 기술의 변화와 사용자 행동의 변화를 반영하는 중요한 사건임.
     * 이러한 변화는 사용자들이 더 현대적이고 사용자 친화적인 플랫폼으로 이동하고 있음을 보여줌.
     * Usenet 사용자들은 이제 새로운 클라이언트와 서버를 찾아야 하며, 이는 기술에 대한 적응력과 유연성의 중요성을 강조함.

        Hacker News 의견

     * Usenet 사용자들은 Google Groups에서 오는 스팸과 불편함을 피하기 위해 G2에서 시작된 모든 게시물을 필터링하는 경향이 있음. Usenet은 사용자 수가 줄어들수록 개선되며, 대부분의 그룹은 활동이 없지만 몇몇 그룹은 여전히 활발히 사용되고 있음. 예를 들어, comp.misc, misc.news.internet.discuss, sci.misc 등이 활동적임. Thunderbird, claws-mail, sylpheed, tin, slrn, alpine, neomutt 등 다양한 클라이언트가 Usenet을 잘 지원함.
     * 최근 한 달 이상 동안 Usenet은 Google Groups로부터 전례 없는 스팸 공격을 받고 있으며, Google은 이에 대해 아무런 조치를 취하지 않고 있음. 이에 대응하여 사람들은 Google Groups에서 오는 모든 것을 필터링하고 있으며, 일부는 Google Groups를 Usenet 연합에서 제외할 것을 요구하는 목소리도 있음.
     * Deja News 인수 당시 공개적으로 접근 가능했던 데이터를 다시 대중에게 돌려주는 방법이 있었으면 좋겠음. Google Groups를 통해 comp.unix.* 그룹에 접근하기 위해 한동안 자바스크립트가 필요했으며, 이후에는 일부 데이터가 누락되었음. Google Groups 뿐만 아니라 개별 아카이버들의 잘 알려진 저장소들도 Google 인수 전에 사용 가능했던 데이터를 모두 포함하고 있지 않음.
     * 최근에 한 중단된, 관리되는 그룹의 관리자로 승인받음. 이에 따라 관리자로서 관리되는 그룹에 게시물을 올릴 수 있는 Usenet 제공자를 찾아야 했음. Eternal September에 연락했으나 작동하지 않았고, 이후 응답이 없었음. 그 후 Giganews, Tweaknews, Eweka, Usenetserver 등 상업적 제공자 네 곳에 연락했으나, 이들은 관리되는 그룹에 대해 알지 못했고, 개념을 이해하지 못했으며, 결국 지원이 실패로 돌아감.
     * Google은 Usenet 스팸의 100%를 차지하며, 이제 Usenet에서 스팸이 줄어들 것으로 보임.
     * Usenet을 되살리고, 특수한 리더 앱을 사용해야 하는 등의 복잡성을 더해 새로운 인터넷에 지친 사람들을 위한 피난처로 만들자는 의견이 있음.
     * Google이 제품/기능을 종료하는 것이 Usenet 그룹에 스팸이 줄어들어 좋다는 의견이 있음.
     * Usenet을 통해 오늘날 전파되는 콘텐츠는 대부분 바이너리(비텍스트) 파일 공유와 스팸인데, Google Groups는 이를 지원하지 않음. 이에 대해 어떤 젊은이가 Usenet, IRC 등을 잘 모르고 모두를 Discord와 Slack으로 밀어붙이려 한다는 느낌을 받는다는 의견이 있음.
"
"https://news.hada.io/topic?id=12408","Wasm3의 최소 유지 관리 단계 진입","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Wasm3의 최소 유지 관리 단계 진입

Wasm3 프로젝트 유지 관리 상태로 전환

     * Wasm3 프로젝트가 최소한의 유지 관리 단계에 들어감. 개발자의 집이 침략한 러시아인들에 의해 파괴되어 새로운 기능 개발을 계속할 수 없음.
     * 프로젝트를 살리기 위해 풀 리퀘스트를 적극적으로 검토하고 병합할 것임을 약속함.
     * Wasm3에 대한 기여가 그 어느 때보다 중요해짐.

Wasm3 시작하기

     * Wasm3 설치 안내에 따라 설치를 진행할 것.
     * Wasm3는 Python3, Rust, C/C++, GoLang 등 다양한 언어와 플랫폼을 위한 라이브러리로 사용 가능.

Wasm3 상태

     * Wasm3는 WebAssembly 스펙 테스트 스위트를 통과하며 많은 WASI 앱을 실행할 수 있음.
     * 최소 유용 시스템 요구 사항은 코드용으로 약 64Kb, RAM으로 약 10Kb.
     * 다양한 아키텍처(x86, ARM, RISC-V 등) 및 플랫폼(Linux, Windows, OS X, Android, iOS 등)에서 실행 가능.

Wasm3 기능

     * WebAssembly 코어 제안과 추가 기능을 지원함. 예를 들어, 가변 글로벌의 가져오기/내보내기, 구조화된 실행 추적, 빅 엔디언 시스템 지원 등이 포함됨.
     * 아직 지원하지 않는 기능들도 있음, 예를 들어, 다중 메모리, 참조 타입, 꼬리 호출 최적화 등이 미지원.

Wasm3 동기

     * ""느린 인터프리터"" 대 ""빠른 JIT"" 사용 이유는 다양함. 속도가 주요 관심사가 아닌 상황에서 실행 파일 크기, 메모리 사용량, 시작 지연 시간 등을 개선할 수 있음.
     * 이식성과 보안을 달성하고 유지하기가 훨씬 쉬움.
     * Wasm3와 같은 간단한 라이브러리는 컴파일하고 기존 프로젝트에 통합하기 쉬움.
     * 일부 플랫폼(예: iOS, WebAssembly 자체)에서는 런타임에 실행 가능한 코드 페이지를 생성할 수 없어 JIT 사용이 불가능함.

Wasm3의 응용 분야

     * Wasm3는 연구 프로젝트로 시작되어 다양한 환경에서 엔진을 평가하는 것이 연구의 일부임.
     * Lua, JS, Python 등이 MCU에서 실행되는 것처럼, WebAssembly는 유망한 대안임.
     * 엣지 컴퓨팅, 스크립팅, 플러그인 시스템, IoT 규칙 실행, 스마트 계약 등 실용적인 사용 사례가 있음.

GN⁺의 의견

     * Wasm3 프로젝트는 개발자의 개인적인 어려움에도 불구하고 커뮤니티의 기여를 통해 유지되고 있으며, 이는 오픈 소스 프로젝트의 회복력과 협력의 중요성을 보여줌.
     * Wasm3는 다양한 플랫폼과 아키텍처에서 WebAssembly를 실행할 수 있는 범용성을 가진 인터프리터로, 임베디드 시스템에서의 WebAssembly 사용 가능성을 탐구하는 데 중요한 역할을 함.
     * 프로젝트의 이식성과 보안에 대한 초점은 WebAssembly가 임베디드 시스템과 같은 제한된 환경에서도 유용한 도구가 될 수 있음을 시사함.

        Hacker News 의견

     * 원문 작성자(OP)의 참여
          + 원문 작성자가 질문에 답할 준비가 되어 있음을 알림.
          + Wasm3에 대한 추가 맥락을 제공하는 트위터 링크를 공유함.
     * Wasm3에 대한 애정과 우려
          + Wasm3는 성능 면에서 다른 Wasm 인터프리터보다 앞서 있었으며, 네이티브 코드보다 3-5배 느리고, 일반적인 Wasm 인터프리터보다 약 3배 빠름.
          + 우크라이나를 침공한 러시아로 인해 어려움을 겪고 있는 Volodymyr가 상황을 극복하기를 바람.
     * Wasm3 프로젝트의 현 상황 설명
          + Volodymyr가 자신의 집이 파괴되어 Wasm3 프로젝트를 최소한으로만 유지할 수밖에 없음을 커뮤니티에 알림.
          + 새로운 기능 개발은 불가능하지만, 프로젝트를 살리기 위해 노력하고, Pull Request를 적극적으로 검토하고 병합할 것임을 약속함.
          + 이 어려운 시기에 이해와 지원에 감사하며, Wasm3에 대한 기여가 그 어느 때보다 중요함을 강조함.
          + 2022년 9월에 올라온 트윗 링크는 파괴된 집의 비디오를 보여주고, 돕고자 하는 사람들에게 기부를 요청함.
     * 댓글 삭제됨
          + 일부 댓글이 삭제되었음을 표시함.
"
"https://news.hada.io/topic?id=12480","두 약사가 구강 페닐에프린이 효과가 없다는 것을 밝혀내다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    두 약사가 구강 페닐에프린이 효과가 없다는 것을 밝혀내다

비강용 충혈제거제가 효과가 없다는 것을 알아낸 두 약사의 이야기

     * 2005년 연방법은 메스암페타민 제조에 사용되는 것을 방지하기 위해 슈도에페드린을 일반 판매대에서 뒤로 옮기도록 강제함.
     * 이로 인해 미국의 기침 및 감기약 조성이 변경되었으며, 슈도에페드린의 대체제인 경구용 페닐에프린이 충혈제거제로서 비효과적임을 증명하는 계기가 됨.
     * FDA는 두 번의 청원에도 불구하고 10년 이상이 지난 후에야 이러한 발견에 대응함.
     * FDA 자문 패널은 페닐에프린이 코막힘을 해소하는 데 거의 도움이 되지 않는다는 결론을 내리고, 이 성분이 포함된 제품의 판매 중단을 권고함.
     * FDA가 이 권고를 받아들이면, 페닐에프린은 FDA의 '모노그래프' 과정을 통해 승인된 최초의 OTC(일반의약품)이 될 수 있음.
     * FDA의 OTC 의약품 규제 과정에 대한 신뢰가 필요하며, 오래된 성분을 포함한 의약품의 규제에 변화가 필요함.

FDA의 규제 과정과 페닐에프린의 비효과성

     * 2000년대 초반 슈도에페드린이 뒤로 옮겨지면서, 페닐에프린이 유일한 경구용 충혈제거제로 남게 됨.
     * 페닐에프린 제품은 소수에서 다수로 늘어났으며, 소비자들은 제품이 변경되었음을 인식하지 못함.
     * 플로리다 대학교의 약학 서비스를 통해 약사들은 경구용 페닐에프린의 효과에 대해 문의함.
     * 연구를 통해 1971년 이전의 연구에서 경구용 페닐에프린이 비효과적임을 발견함.
     * FDA는 OTC 의약품의 효과를 전문가 패널이 기존 데이터를 검토하여 결정하였으며, 이러한 모노그래프 과정은 오래된 OTC 성분을 승인 없이 시장에 내놓을 수 있게 함.

페닐에프린의 효과성에 대한 증거 부족

     * 페닐에프린의 효과성에 대한 출판되지 않은 연구들 중 4개는 효과가 있다고 보고했지만, 7개는 위약과 다름없다고 보고함.
     * 자유 정보법 요청을 통해 증거를 검토하고, 메타분석을 수행하여 페닐에프린이 비효과적임을 확인함.
     * 한 실험실의 데이터에 정상적이지 않은 분포가 발견되어 데이터 조작 가능성을 제기함.

FDA의 반응과 규제 과정

     * FDA는 경구용 페닐에프린이 해를 끼치지 않는다고 보고 판매 제한에 관심을 보이지 않음.
     * FDA는 위험 기반 접근 방식을 사용하며, 제한된 자원으로 인해 상대적으로 안전한 경구용 페닐에프린은 우선순위에서 밀려남.
     * 정치적 경로를 통해 FDA에 페닐에프린의 비효과성을 재고하도록 요청함.
     * 2007년 FDA는 비처방약 자문위원회를 구성하여 페닐에프린의 효과성을 검토함.

FDA의 다양한 규제 과정

     * FDA는 처방약 승인을 위한 임상시험으로 이어지는 신약 신청 과정으로 가장 잘 알려져 있음.
     * 그러나 많은 OTC 의약품은 다르게 규제되며, 1962년 개정된 법에 따라 효과가 입증되어야 함.
     * 1962년 이전에 승인된 약물에 대해서는 FDA가 처방약에 대한 검토를 시도했지만, 여전히 승인되지 않은 처방약이 시장에 있음.
     * OTC 의약품의 경우, FDA는 모노그래프 과정을 통해 효과가 입증되지 않은 제품을 재검토하도록 함.

OTC 비강용 충혈제거제 모노그래프의 시작과 검토

     * OTC 비강용 충혈제거제 모노그래프는 1976년에 시작되었으며, 1994년에 최종 모노그래프가 발표됨.
     * 페닐프로판올아민은 효과적이었지만 안전하지 않아 시장에서 철수됨.
     * 2007년 비처방약 자문위원회는 페닐에프린의 효과성에 대한 새로운 데이터를 요청함.

페닐에프린의 흡수율과 효과성에 대한 연구

     * 페닐에프린의 경구 흡수는 불규칙하며, 활성 형태로 혈류에 들어가는 양이 매우 적음.
     * 페닐에프린이 혈관을 수축시키는 효과가 있으나, 충분한 활성 성분이 혈류에 들어가지 않으면 코 혈관의 붓기를 줄이는 데 도움이 되지 않음.
     * 2007년 FDA 자문위원회는 페닐에프린의 효과성에 대한 더 나은 데이터가 필요하다고 제안함.

페닐에프린의 시장에서의 지속과 과학적 검토의 필요성

     * 2015년 두 번째 시민 청원을 제출하고, 페닐에프린이 비효과적임이 명확해짐에도 FDA에서는 별다른 조치가 없었음.
     * 2022년 학술 논평을 통해 페닐에프린의 시장 유지에 대한 의문을 제기함.
     * 2023년, FDA 자문위원회는 페닐에프린이 GRASE(일반적으로 안전하고 효과적으로 인정됨)가 아니라고 결론내림.
     * 1962년 이전에 승인된 OTC 의약품에 대한 모노그래프 과정을 재검토할 필요가 있음.

GN⁺의 의견

     * 이 기사는 경구용 페닐에프린이 충혈제거제로서 효과가 없다는 것을 밝혀낸 과정을 다루고 있음.
     * 연구자들의 끈질긴 노력과 과학적 증거에 기반한 규제의 중요성을 강조함.
     * 이 사례는 의약품 규제에 있어서 과학적 검증의 필요성과 소비자 보호를 위한 정책 변화의 중요성을 보여줌.

   효과가 없으면 애초에 어떻게 승인이 난걸까

   효과가 아예 없진 않지만… 위약과 차이가 나지 않을 정도라고… 하는 이야기를 팟캐에서 들었습니다

        Hacker News 의견

     * 한 의료 분야 종사자의 경험에 따르면, 페닐에프린이 실제로는 플라시보에 불과하다는 것은 널리 알려진 사실임. 이는 DEA의 정책에 의해 메스암페타민 제조에 사용될 수 있는 효과적인 약물인 수도에페드린을 대체하기 위해 시행된 것으로, 페닐에프린은 비효과적이지만 거리의 마약으로 전환될 수 없는 약물임. 이 정책은 수백만 명에게 해를 끼치고 메스암페타민의 확산과 가용성을 줄이지 못했으며, 건강 관리 시스템에 수십억 달러의 부수적 비용을 초래함.
     * 수도에페드린에 대한 언급이 있는 기사는 N-메틸암페타민에서 수도에페드린을 합성하는 간단하고 편리한 방법을 소개한 연구 논문 링크를 포함해야 함을 지적함.
     * 미국의 약국들은 단순한 약국이 아니라 대형 마트와 같으며, 보충제, 미용 및 웰빙 제품에 대한 FDA 규제가 느슨해 비효과적인 제품들이 고객들에게 대대적으로 마케팅되고 있음. 이러한 상황에서 허브 치료제와 거의 쓸모없는 일반의약품이 과학을 무시하고 증상 완화 치료만 가능한 상황에서도 효능이 있는 것처럼 판매됨.
     * 안전하고 오염물질이 없는 것을 인증하는 것부터 시작하여 난이도가 점차 높아지는 세 가지 또는 네 가지 인증이 필요하다고 생각함. 보충제는 실제로 무엇을 섭취하고 있는지 알 수 없기 때문에 특히 이러한 인증이 절실히 필요함.
     * 댓글 작성자 중 한 명은 자신이 페닐에프린이라는 단어를 생전 처음 들어본다며, 다른 댓글 작성자들이 이 주제에 대해 어떻게 그렇게 잘 알고 있는지 의아해함.
     * 한 소매 약국 기술자의 경험에 따르면, 페닐에프린이 별다른 효과가 없다는 것을 약사들도 알고 있었음.
     * 기침과 감기에 대한 다른 일반의약품들의 효과에 대한 증거가 있는지 궁금해하는 댓글이 있음.
     * 제약 회사들이 페닐에프린이 효과가 있다는 잘못된 데이터를 제출했을 가능성에 대해 아무도 조사하지 않는 것이 진짜 범죄라고 지적하는 댓글이 있음. 이러한 사기 행위가 페닐에프린에만 국한되지 않았을 가능성에 대해 의문을 제기함.
     * 한 사용자는 대학 시절 감기에 걸렸을 때 DayQuil이 큰 도움이 되었지만, 나중에 효과가 없어졌다는 것을 알게 되었고, 이는 수도에페드린 대신 페닐에프린으로 바뀌었기 때문임을 알게 됨. 처방전 없이 구입할 수 있는 수도에페드린을 사용하자 다시 효과를 느낄 수 있었다고 함.
     * 정치적 경로를 통해 당시 FDA 감독을 맡고 있던 의원에게 연락하여 구두로 페닐에프린의 효과에 대해 재고해달라는 요청을 한 사례가 있음. 이는 공공 포럼에서 정치인들이 받는 비판에도 불구하고 실제로 차이를 만든 몇 안 되는 사례 중 하나임.
"
"https://news.hada.io/topic?id=12364","보안 문제: 클라우드 사이트 매니저, 내 콘솔이 아닌 타인의 콘솔을 노출","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                보안 문제: 클라우드 사이트 매니저, 내 콘솔이 아닌 타인의 콘솔을 노출

클라우드 사이트 관리자 보안 문제: 다른 사용자의 콘솔이 나에게 표시됨

     * 사용자가 평소처럼 자신의 콘솔에 접근하기 위해 https://unifi.ui.com/consoles에 로그인했으나, 다른 계정의 88개 콘솔이 표시됨.
     * 해당 콘솔들에 대한 완전한 접근 권한을 가짐, 자신의 콘솔처럼 사용 가능.
     * 브라우저를 강제로 새로고침한 후에야 자신의 콘솔이 다시 표시됨.

커뮤니티 반응 및 토론

     * 이 문제가 처음 제기된 것은 아니며, 이전 게시물을 찾아보려 했으나 답변을 찾을 수 없음.
     * Team Ubiquiti의 UI-Marcus가 직접 메시지를 통해 추가 정보를 요청하고 상황을 더 잘 이해하려 함.
     * 일부 사용자는 이러한 반응이 충분하지 않다고 지적하며, 문제를 공식적으로 인정하고 정기적인 업데이트를 제공해야 한다고 주장.
     * 다른 사용자는 사건 발생 시 통신에 대한 엄격한 프로토콜을 따라야 하며, UI 팀이 문제를 해결하기 위해 노력하고 있을 것이라고 신뢰함.
     * 모바일 앱이 정적 IP 주소로 직접 연결할 수 있도록 업데이트해 클라우드 없이도 접근할 수 있게 해달라는 요청이 있음.

GN⁺의 의견

     * 이 사건은 클라우드 기반 서비스의 보안 취약점을 드러내며, 사용자들의 데이터 보호와 개인 정보 보안에 대한 중요성을 강조함.
     * 커뮤니티의 반응은 제품 개발과 보안 팀에게 실시간 피드백을 제공하며, 사용자들이 직면한 문제를 해결하기 위한 협력적 접근 방식의 중요성을 보여줌.
     * 이 글은 소프트웨어 및 네트워크 보안에 관심 있는 사람들에게 흥미로울 것이며, 기술 커뮤니티 내에서의 상호 작용과 문제 해결 과정에 대한 통찰력을 제공함.

        Hacker News 의견

     * 전 Ubiquiti 직원의 의견:
          + 초기 Ubiquiti는 문제가 있었지만 똑똑하고 열심히 일하는 사람들이 많았음.
          + 회사가 Ubiquiti와 UniFi를 널리 알릴 당시 직원 수가 적었다는 사실에 사람들은 놀람.
          + CEO가 포틀랜드와 중국 사무실 중심으로 회사를 재편한 후 회사는 점차 쇠퇴함.
          + 포틀랜드의 UX 디자이너들은 제품 사용 방법을 이해하지 못하면서 모든 것을 더 멋지게 디자인하려 함.
          + 포틀랜드에는 회사를 협박하고 해킹에 대해 언론에 거짓말을 한 클라우드 책임자 Nick Sharp도 있었음.
          + 중국 사무실은 실패한 FrontRow 제품을 만들었으며, 이들은 회사의 미래 리더가 될 예정이었으나 모든 시도가 재앙이었음.
          + 클라우드 팀은 사람들이 회사를 떠나거나 해고되어 현재 누가 클라우드를 관리하는지조차 모름.
          + 회사가 다시 올바른 길로 돌아가길 바람.
     * UniFi 네트워크를 구축한 사용자의 의견:
          + 6~7년 전 UniFi 네트워크를 구축했으며, 하드웨어는 매우 견고해 보였음.
          + 하드웨어는 실제로 좋았지만, 소프트웨어는 사용하기 거의 불가능했음.
          + 소프트웨어는 경영진에게 인상적으로 보이도록 설계되었으나 실제 사용에는 적합하지 않았음.
          + 간단한 홈 네트워크 설정에도 며칠이 걸렸으며, 한 번 설정한 후에는 다시 건드리지 않았음.
          + UniFi는 이론적으로 원하는 시스템이지만, 소프트웨어가 사용자 친화적이지 않으면 하드웨어 품질이 무의미함.
     * Ubiquiti 서브레딧에서의 의견:
          + 클라우드는 공공 화장실과 같아서 사적이지만 항상 주변에 사람들이 있음.
          + 클라우드에 올리라는 말은 Dropbox에서 비밀번호를 무시하는 변경 사항을 적용한 사건을 떠올리게 함.
          + 라우터의 원격 접근을 비활성화하는 방법에 대한 설명.
          + CDN을 사용하는지에 대한 질문과 이로 인해 발생한 문제들에 대한 언급.
          + UDMP를 사용하는 사람들을 위한 원격 접근 비활성화 방법 안내.
          + Ubiquiti 서버를 통한 데이터가 왜 끝까지 암호화되지 않는지에 대한 의문 제기.
          + Ubiquiti의 공식 성명 링크 제공.
"
"https://news.hada.io/topic?id=12450",""돈 스타브, 디아블로" 기술을 탑재한 "패럴랙스 7"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ""돈 스타브, 디아블로"" 기술을 탑재한 ""패럴랙스 7""

게임 아트 트릭

     * 1990년대 게임들이 2D에서 3D로 전환되기 시작함.
     * 외계인이 당시 지구에 착륙했다면, 저해상도의 다각형 모델이 필요 없다고 생각했을 것임.
     * 그러나 인간은 3D 렌더링을 구현하려는 강한 의지를 가지고 있었음.

파라랙스 효과

     * 1982년 게임 '문 패트롤'에서 처음으로 파라랙스 효과가 소개됨.
     * 이 효과는 다른 속도로 움직이는 여러 ""평면""들이 강한 인상을 주었음.
     * 하지만 이는 여전히 평면적인 느낌을 주었음.

SNES 시대의 기술

     * SNES 기술인 ""모드 7""은 실제 3D가 아닌 것처럼 보이게 만들었음.
     * 닌텐도는 텍스처를 조작하여 높이를 깊이로 바꾸는 기술을 사용함.

오늘날의 게임 아트

     * 현재는 모든 자산을 ""진짜"" 3D로 렌더링할 수 있지만, 때로는 구식 방식이 더 나을 수 있음.
     * 예를 들어, '돈 스타브' 게임에서 모든 부시, 나무, 적들은 평면적임.

디아블로 2의 예

     * 디아블로 2는 2D 게임이지만, '문 패트롤'의 파라랙스 효과와 '모드 7' 바닥 렌더링을 결합함.
     * 게임에는 ""퍼스펙티브 모드""가 있어, 스프라이트가 지평선을 향해 기울어지는 것처럼 보임.
     * 스프라이트가 32x32px 부분으로 나뉘어져 최적화되고 변형될 때 유용함.

기술적 복잡성

     * 스프라이트의 모든 자산이 간격 없이 변형되어야 함.
     * 스프라이트가 다양한 방향으로 변형되어야 하며, 이는 복잡함을 더함.

디아블로 2의 퍼스펙티브 모드

     * 이 모드는 D3D를 통해서만 활성화될 수 있었음.
     * 공식 정보가 부족하지만, 이 기술은 2D를 더 3D처럼 보이게 하는 인간의 의지를 보여줌.

GN⁺의 의견

     * 디아블로 2의 퍼스펙티브 모드는 단순한 2D 게임에 깊이와 입체감을 부여하는 놀라운 기술적 성과임.
     * 이 기사는 게임 개발의 역사적인 순간들과 창의적인 해결책들을 탐구하는 데 흥미를 불러일으킴.
     * 게임 아트와 기술의 결합이 어떻게 시각적 경험을 향상시키는지에 대한 이해를 돕는 사례로, 초급 소프트웨어 엔지니어에게 영감을 줄 수 있음.

        Hacker News 의견

     *
          + Project Diablo 2를 통해 여전히 D2를 즐기는 사용자가 있음. 144fps에서의 관점 모드가 아름답게 보이며, 원본 LoD 클라이언트의 30fps로 돌아가기 어려움을 표현함. 판데모니움 요새에서 내려가는 계단을 걸어가며 처음 그래픽에 감탄했던 기억과 향수를 여전히 가지고 있음.
     *
          + 월드 오브 워크래프트의 하늘이 어떻게 만들어졌는지, 그리고 워크래프트 3의 땅이 어떻게 만들어졌는지에 대한 궁금증을 10년 넘게 가지고 있는 사용자가 있음. 하늘은 낮, 밤, 구름, 달, 별 등의 특징을 가지고 있으며, 아름답고 가볍고 매 프레임마다 아름답게 업데이트됨. 2002년 컴퓨터에서도 실행될 수 있을 정도로 기술적으로 놀라운 작품임을 언급함.
     *
          + SNES의 ""Mode 7"" 기술에 대해 설명하는 댓글이 있음. Mode 7은 실제로 원시적인 3D 가속기로, 다양한 변환을 가진 단일 텍스처 평면을 렌더링함. 현대 GPU만큼 ""진짜 3D""라고 할 수 있지만, 매우 제한적이고 정확도가 떨어짐을 언급함.
     *
          + 자신의 작은 기사를 공유해준 것에 대해 감사함을 표현하는 댓글이 있음.
     *
          + 게임에서의 시차(parallax)에 초점을 맞춘 기사에 대해, 시차가 애니메이션에서 오랜 역사를 가지고 있음을 언급하는 댓글이 있음. 디즈니의 멀티플레인 카메라와 그 이전의 기술들이 거의 100년 전에 등장했으며, 2D 이미지로 깊이감이 있는 장면을 구성하는 많은 트릭이 가능함을 설명함.
     *
          + 스프라이트의 하단 가장자리가 휘어진 이유를 모르겠다고 언급하며, 이것이 수직으로 오리엔테이션된 스프라이트에 대해 지면 아래로 사라지는 점을 시뮬레이션하기 위해 필요하다고 생각함을 표현하는 댓글이 있음. 3Ds Max 장면에서는 카메라가 전면 축을 중심으로 회전하지 않으면 수평선이 직선으로 보임을 설명함.
     *
          + 초기 컴퓨터 그래픽에 대한 감탄을 표현하는 댓글이 있음. 초기 애니메이션과 컴퓨터 그래픽을 위한 기여 없이는 소프트웨어와 하드웨어가 현재보다 세대가 뒤처졌을 것이라고 확신함을 밝힘. NVIDIA가 기계 학습과 인공 지능에 유용한 동일한 아키텍처를 우연히 사용했지만, 회사 전체가 컴퓨터 그래픽에 기반을 두고 있음을 언급함.
     *
          + 개발자가 시차 효과에 매우 만족했지만, 실제로 사용해본 적은 없으며, 기본 설정에 이미 익숙해진 후에는 이상하게 느껴졌다는 개인적인 의견을 나타내는 댓글이 있음.
     *
          + AAA 게임에서 Diablo 2의 관점 모드와 같은 기능이 오늘날 구현될 가능성이 있는지 궁금해하는 댓글이 있음. 게임 플레이에 실제로 추가되는 것이 없고, 지원되는 3D 카드를 가진 사용자에게만 작동하며, 메뉴에서 옵션을 찾아 활성화해야 하는 많은 노력이 필요한 기능에 대해 의문을 제기함.
     *
          + 오래된 게임들이 ""진짜가 아닌"" 3D를 가지고 있지만, 현대의 3D 게임들도 평면 스크린에서 플레이되므로 근본적으로 같은 방식으로 ""진짜가 아닌"" 3D라고 할 수 있다는 관점을 제시하는 댓글이 있음.
"
"https://news.hada.io/topic?id=12466","애플, 일부 iOS 앱에 인근 SSID 목록을 통한 사용자 위치 추적 허용","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               애플, 일부 iOS 앱에 인근 SSID 목록을 통한 사용자 위치 추적 허용

Apple, 사용자 동의 없이 위치 추적 허용

     * Apple은 사용자 프라이버시의 수호자를 자처하지만, 이 기사에서는 그 주장이 사실이 아님을 밝힘.
     * 거의 10년 동안, Apple은 사용자가 이 기능을 비활성화하거나 인지할 수 있는 옵션 없이 앱이 사용자의 위치를 추적할 수 있도록 허용함.

HotspotHelper API의 작동 원리

     * 2015년 iOS 9 도입 이후, Apple은 'HotspotHelper'라는 API를 포함시켜 개발자들이 WiFi 접속 지점에 연결을 돕는 앱 기능을 요청할 수 있게 함.
     * 개발자들은 HotspotHelper API를 사용하여 WiFi 네트워크 정보를 등록하고, 이를 통해 사용자의 위치를 추적할 수 있는 데이터를 추출할 수 있는 가능성을 보여줌.

프라이버시 딜레마

     * 앱이 WiFi 접속 지점 정보에 접근할 수 있게 되면서, 사용자의 위치를 효과적으로 추적할 수 있는 문제가 발생함.
     * WiFi 접속 지점이 대부분 고정되어 있어 사용자 위치를 삼각측량하는 데 일관된 참조점을 제공함.
     * HotspotHelper의 본래 목적은 원활한 연결성을 촉진하는 것이었지만, 사용자의 명시적 동의 없이 위치 추적이 가능하다는 점은 프라이버시 논쟁에서 주목받음.

전 세계적 영향: WeChat과 Alipay

     * WeChat과 Alipay와 같은 주요 앱들이 이미 이 기능을 구현했음.
     * 중국 본토에서 이 두 앱은 매우 널리 사용되며, 사람들의 일상생활의 거의 모든 측면에 영향을 미침.
     * 이러한 앱의 널리 퍼진 사용은 사용자 동의 없는 위치 추적의 영향을 증폭시킴.

Apple의 ""반응""

     * 실제로 이 문제를 약 2년 전에 발견하고 Bilibili에서 이에 대해 논의하는 비디오를 만들었지만, 대중의 인식은 매우 제한적임.
     * Apple에게 이 문제를 알렸고 이메일로 답변을 받았으나, 현재까지 추가 업데이트는 없음.

결론

     * Apple이 사용자에게 이 기능을 비활성화할 수 있는 옵션을 제공하고, 앱이 이 기능에 접근하기 전에 명시적인 허가를 요청해야 함을 강력히 주장함.
     * 디지털 프라이버시에 대한 논의가 계속 진화함에 따라, Apple은 혁신과 사용자 데이터 보호 사이의 미묘한 경계를 탐색하고 있음.
     * Apple이 HotspotHelper 기능에 대한 우려를 해결하면서 프라이버시에 대한 약속을 유지할 수 있을지는 시간이 말해줄 것임.

   GN⁺의 의견:
     * 이 기사는 사용자 프라이버시와 기술 혁신 사이의 긴장 관계를 잘 보여줌.
     * Apple의 프라이버시 보호에 대한 명성에 의문을 제기하며, 사용자들이 자신들의 데이터가 어떻게 사용되고 있는지에 대해 더 많은 통제권을 가져야 한다는 중요한 논의를 촉발함.
     * 특히 중국의 WeChat과 Alipay와 같은 앱들이 이 기능을 사용함으로써, 전 세계적으로 프라이버시 보호의 중요성이 강조되고 있음을 보여줌.

   프라이버시를 세일즈 포인트로 미는 기업이 뒤에선 사용자 알림과 위치 정보를 빼돌리네요.

   전 저 기능이 막혀있어서 지하철 승하차 알림이 불가능한 줄 알았는데 이미 기능이 있었군요. 그럼 왜 아이폰만 안되는 거지...
"
"https://news.hada.io/topic?id=12415","GCC 기반 Rust 컴파일러 개발 진전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GCC 기반 Rust 컴파일러 개발 진전

GCC 기반 Rust 컴파일러 개발 진행 상황

     * GCC 기반 Rust 컴파일러 프로젝트인 gccrs는 2014년에 시작되어 GNU Compiler Collection(GCC) 내에서 Rust 컴파일러를 구현하는 것을 목표로 함.
     * gccrs의 목표는 GCC 13 릴리스에 포함되는 것이었으나, 이는 달성되지 않았고 현재는 GCC 14(2024년 중반 릴리스 예상)에 포함될 것을 목표로 함.
     * gccrs는 Rust 버전 1.49를 대상으로 하며, 이는 const generics이 도입되기 전의 마지막 버전임.
     * gccrs 프로젝트의 중요한 원칙 중 하나는 Rust의 ""superset""을 만들지 않고, rustc의 출력을 그대로 복제하는 것임.
     * Rust 표준 라이브러리는 여러 ""crates""로 구성되어 있으며, gccrs는 이 중 core와 alloc crate의 컴파일을 지원하는 데 집중하고 있음.
     * gccrs는 현재 여러 기능 부족으로 인해 이러한 crates를 컴파일할 수 없으며, borrow checker의 부재와 GCC에서 지원하지 않는 LLVM intrinsics의 부족이 문제임.

GCC 생태계의 이점 활용

     * gccrs 개발의 주요 이유 중 하나는 GCC의 보안 플러그인을 활용할 수 있게 하는 것임.
     * gccrs는 이미 Sega Dreamcast 홈브루 커뮤니티에서 사용되고 있으며, GCC 플러그인을 사용하여 unsafe Rust 코드의 정적 분석을 수행할 수 있음.
     * gccrs 노력을 통해 Rust 명세에 추가 기능을 기여할 수 있었으며, Rust의 공식 명세 작성 작업에 참여하고자 함.

개발 중인 기능들

     * gccrs는 여전히 많은 핵심 기능이 누락되어 있으며, async/await, GCC에서 부재한 LLVM intrinsics, format_args!() 매크로 등이 포함됨.
     * Polonius 프로젝트는 rustc의 현재 borrow checker의 단점을 해결하기 위해 다른 알고리즘으로 참조 수명을 계산하는 borrow checker를 구현함.
     * format_args!() 매크로 작업이 시작되었으며, 이는 다른 문자열 포맷팅 매크로에 전달되는 인수를 구성하는 데 필요함.

rustc_codegen_gcc

     * rustc_codegen_gcc는 gccrs보다 더 성숙하고 범위가 제한된 다른 GCC 기반 Rust 프로젝트임.
     * rustc_codegen_gcc는 libgccjit 라이브러리를 사용하여 rustc의 LLVM 백엔드 API에 연결하며, rustc와 GCC의 뒤늦은 단계에서 컴파일을 수행함.
     * 2023년 10월 기준으로 rustc_codegen_gcc는 추가 패치 없이 Rust for Linux를 컴파일할 수 있음.

Rust for Linux

     * Rust for Linux 프로젝트는 rustc 또는 rustc_codegen_gcc를 사용하여 커널용 Rust 코드를 빌드하는 방법에 대한 문서를 제공함.
     * gccrs는 Rust for Linux 지원을 목표로 하고 있으나, 현재 지원되는 rustc 버전과의 큰 차이로 인해 실현 가능성이 멀어 보임.

GN⁺의 의견

     * gccrs 프로젝트는 Rust 언어의 GCC 기반 컴파일러 구현을 목표로 하며, 이는 Rust 생태계에 다양성을 제공하고 GCC의 보안 플러그인과 같은 기존 도구를 활용할 수 있는 잠재력을 가짐.
     * gccrs가 Rust 표준 라이브러리의 핵심 부분을 아직 컴파일할 수 없는 상황이지만, 이미 Sega Dreamcast 홈브루 커뮤니티에서 실제 사용 사례를 찾을 수 있음은 주목할 만함.
     * 본 기사는 Rust 언어의 다양한 컴파일러 구현과 그에 따른 생태계 확장 가능성에 대한 흥미로운 통찰을 제공함.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + 기사에서 gccrs 개발 동기에 대한 주장이 약하다고 느낌.
          + gccrs가 GCC의 보안 플러그인을 활용하기 위해 개발되고 있음.
          + 리눅스 커널에 러스트 지원을 추가하는 'Rust for Linux' 이니셔티브가 또 다른 이유임.
          + 리눅스 커널을 GNU 툴체인만으로 컴파일하길 원하는 커널 개발자들이 많아서 중요한 동기임.
          + GCC를 백엔드로 사용하는 이유는 설명되지만, 왜 중복된 프론트엔드가 필요한지에 대한 설명은 부족함.
          + C++의 실수에서 배워야 하며, 다양한 프론트엔드는 플랫폼 간 개발을 어렵게 만듦.
          + gccrs가 'GNU Rust'가 되지 않도록 주의를 기울이고 있으며, rustc의 출력을 복제하려고 함.
     * 두 번째 댓글 요약:
          + 러스트에는 언어 표준이 필요함.
          + 많은 조직과 산업이 표준이 없으면 러스트를 채택하지 않을 것임.
          + C, C++, C#, 자바스크립트(ECMAScript)와 같은 다른 언어들은 모두 표준을 가지고 있음.
     * 세 번째 댓글 요약:
          + GCC-RS에 대한 부정적인 반응에 놀람.
          + 언어가 여러 구현을 가지고 있지 않다면, 그 언어는 불완전한 것임.
     * 네 번째 댓글 요약:
          + gccrs가 LLVM이 지원하지 않는 아키텍처들에 대한 러스트 지원을 가능하게 할 것임.
     * 다섯 번째 댓글 요약:
          + gccrs가 rustc의 버그와 특이점까지 복제하려는 것은 실수라고 생각함.
          + 러스트에는 공식적인 사양이 없으며, 단일 참조 구현만으로 문서화하는 것은 장기적인 약점임.
          + 기존 코드가 모든 구현에서 작동하도록 하려는 것은 합리적이지만, 잘못된 결정과 버그를 영구화하는 문제가 있음.
          + 마이크로소프트는 오래된 프로그램이 계속 실행되도록 많은 노력을 기울임.
          + 러스트는 언어 개발 초기에 이러한 부담을 지지 말아야 함.
          + 언어가 진화하려면 QA와 QC를 수용해야 함.
          + 강력한 표준을 가진 언어들은 이러한 믿음을 받아들임.
     * 여섯 번째 댓글 요약:
          + lwn.net 링크를 게시해줘서 구독 갱신을 상기시켜줌에 감사함.
     * 일곱 번째 댓글 요약:
          + 리눅스는 이미 clang을 사용하여 컴파일할 수 있음.
          + GNU '순수성'을 위해 이러한 중복된 노력을 개발하고 유지하는 것은 가치가 없어 보임.
"
"https://news.hada.io/topic?id=12458","소비자용 GPU를 탑재한 PC에서의 고속 대형 언어 모델 서빙","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   소비자용 GPU를 탑재한 PC에서의 고속 대형 언어 모델 서빙

PowerInfer: 소비자용 GPU를 사용한 빠른 대규모 언어 모델 서빙

     * PowerInfer는 활성화 지역성을 활용하는 CPU/GPU LLM 추론 엔진.
     * PowerInfer와 llama.cpp는 동일한 하드웨어에서 실행되며 RTX 4090의 VRAM을 완전히 활용.

개요

     * PowerInfer는 개인용 컴퓨터(PC)에 탑재된 단일 소비자용 GPU로 대규모 언어 모델(LLM) 추론을 고속으로 수행하는 엔진.
     * PowerInfer의 설계 기반은 LLM 추론에서 나타나는 높은 지역성을 활용하는 것으로, 뉴런 활성화에 있어서 멱법칙 분포를 특징으로 함.
     * 이 분포는 소수의 '핫' 뉴런이 일관되게 활성화되고, 대다수의 '콜드' 뉴런은 입력에 따라 달라짐을 나타냄.
     * PowerInfer는 이러한 통찰을 활용하여 GPU-CPU 하이브리드 추론 엔진을 설계: '핫' 뉴런은 GPU에 미리 로드되고, '콜드' 뉴런은 CPU에서 계산되어 GPU 메모리 요구사항과 CPU-GPU 데이터 전송을 크게 줄임.
     * PowerInfer는 적응형 예측기와 뉴런 인식 희소 연산자를 통합하여 뉴런 활성화와 계산 희소성의 효율성을 최적화함.
     * 평가 결과, PowerInfer는 단일 NVIDIA RTX 4090 GPU에서 다양한 LLM(예: OPT-175B)에 대해 평균 13.20 토큰/초, 최대 29.08 토큰/초의 토큰 생성률을 달성, 서버급 A100 GPU에 비해 18% 낮은 성능을 보임.
     * 모델 정확도를 유지하면서 llama.cpp보다 최대 11.69배 빠른 성능을 보임.

특징

     * 지역성 중심 설계: 효율적인 LLM 추론을 위해 희소 활성화와 '핫'/'콜드' 뉴런 개념을 활용, 낮은 자원 요구사항으로 고속성 보장.
     * 하이브리드 CPU/GPU 활용: CPU와 GPU의 메모리/계산 능력을 원활하게 통합하여 균형 잡힌 작업 부하와 빠른 처리 가능.
     * 간편한 통합: 인기 있는 ReLU-희소 모델과 호환.
     * 로컬 배포 용이성: 소비자용 하드웨어에서 로컬 배포에 깊이 최적화되어 단일 GPU에서 저지연 LLM 추론 및 서빙 가능.
     * 하위 호환성: llama.cpp와는 다르지만, 서버 및 배치 생성과 같은 대부분의 examples/를 llama.cpp처럼 사용할 수 있음.

시작하기

     * 설치 및 모델 가중치 안내 제공.

설정 및 설치

     * 코드 획득 및 빌드 방법 안내.

모델 가중치

     * PowerInfer 모델은 LLM 가중치와 예측기 가중치를 포함하는 PowerInfer GGUF 형식으로 저장됨.
     * Hugging Face를 통해 PowerInfer GGUF 가중치 다운로드 가능.
     * 원본 모델 가중치와 예측기 가중치를 PowerInfer GGUF로 변환하는 방법 안내.

추론

     * CPU만 사용하거나 모든 사용 가능한 VRAM을 사용하는 CPU-GPU 하이브리드 추론을 위한 지침 제공.

양자화

     * INT4(Q4_0) 모델에 대한 최적화된 양자화 지원 및 사용 방법 안내.

평가

     * PowerInfer는 FP16 및 INT4 모델에 대해 최대 11배 및 8배의 속도 향상 달성.

자주 묻는 질문

     * CUDA_ERROR_OUT_OF_MEMORY 오류 해결 방법 및 기타 문제 해결을 위한 지원 안내.

할 일

     * PowerInfer의 핵심 코드, Mistral-7B 모델, Windows 지원, text-generation-webui, perplexity 평가 코드, Mac용 Metal 지원, OPT 모델 코드, 예측기 훈련 코드, FFN 네트워크의 온라인 분할, Multi-GPU 지원 등의 출시 계획 안내.

논문 및 인용

     * PowerInfer에 대한 기술적 세부사항은 논문에서 확인 가능.
     * PowerInfer가 유용하거나 관련 프로젝트 및 연구에 도움이 되면 논문 인용 요청.

감사의 말

     * 수정 가능한 연산자 라이브러리 ggml과 llama.cpp의 실행 런타임에 감사.
     * ReLU 기반 희소 모델에 대한 THUNLP의 지원에 감사.
     * PowerInfer에 영감을 준 Deja Vu 연구에 감사.

   GN⁺의 의견
     * PowerInfer는 소비자용 GPU를 사용하여 대규모 언어 모델을 빠르고 효율적으로 추론할 수 있는 혁신적인 엔진임.
     * '핫'/'콜드' 뉴런 개념과 하이브리드 CPU/GPU 활용을 통해 자원을 절약하면서도 서버급 성능에 근접하는 추론 속도를 제공함.
     * 이 기술은 AI 연구 및 개발에 있어서 개인 개발자나 소규모 팀이 서버급 하드웨어에 접근하지 않고도 고성능 모델을 실험하고 배포할 수 있는 기회를 열어줌.
"
"https://news.hada.io/topic?id=12461","와이어플로우 - 사용자 흐름 프로토타입을 만들기 위한 무료 온라인 오픈 소스 도구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             와이어플로우 - 사용자 흐름 프로토타입을 만들기 위한 무료 온라인 오픈 소스 도구

Wireflow: 무료 온라인 오픈 소스 사용자 흐름 도구

     * Wireflow는 아름다운 사용자 흐름 프로토타입을 만들기 위한 무료, 온라인, 오픈 소스 도구임.
     * 포토샵 기술이 필요 없으며, 100개 이상의 맞춤형 그래픽/카드를 사용할 수 있음.
     * 실시간 협업이 가능하며, 동료를 초대해 프로젝트의 사용자 흐름을 함께 설계할 수 있음.

프로젝트 권한 및 실시간 채팅

     * 프로젝트/방에 대한 접근 권한을 설정하고, 공개 또는 비공개로 만들 수 있음.
     * 내장된 실시간 채팅 기능을 통해 팀원과 소통하며 동시에 협업할 수 있음.

사용하기 쉬운 인터페이스

     * 간단하고 최소한의 인터페이스로 사용자에게 좋은 경험을 제공함.
     * 복잡한 소프트웨어 경험이 없어도 Wireflow를 쉽게 사용할 수 있음.

Wireflow 프로젝트에 대하여

     * Wireflow는 프로젝트 계획 및 브레인스토밍 초기 단계를 단순화할 필요성에서 탄생함.
     * 복잡한 소프트웨어나 와이어프레임/사용자 흐름 키트 구매 필요성을 없애는 것이 목표임.
     * 다른 주요 프로젝트와 함께 빠르게 개발되었으며, 아직 프로토타입 단계이고 버그가 있을 수 있음을 유의해야 함.

도구 및 기능

     * 확대/축소, 커넥터(화살표), 캔버스 이동, 실행 취소/다시 실행, 헤더 제거, 헤더 텍스트 편집, 앞으로 가져오기/뒤로 보내기, 키보드 단축키 등의 기능을 제공함.

완전 오픈 소스

     * Vanila 팀은 Meteor.js를 사용하여 빠르고 실시간, 확장 가능한 애플리케이션을 제공함.
     * Meteor.js는 순수 자바스크립트로 웹 및 모바일 앱을 구축하기 위한 완전한 플랫폼임.

팀 및 협력자

     * Stefan Smiljkovic, Jelena Jovanovic, Abu Taher, Lauri Ojansivu, Raul Torrefiel, Taqi Mustafa 등 다양한 국가의 개발자들이 Wireflow 프로젝트에 기여함.

GN⁺의 의견

     * 혁신적인 협업 도구: Wireflow는 사용자 흐름을 설계하는 데 있어 복잡한 소프트웨어를 배우거나 설치할 필요 없이, 실시간 협업과 통신을 가능하게 하는 혁신적인 도구임.
     * 오픈 소스 커뮤니티의 힘: 전 세계 다양한 개발자들이 참여하여 만들어진 오픈 소스 프로젝트로, 기술 공유와 협력의 중요성을 보여줌.
     * 접근성과 편의성: 간단하고 직관적인 인터페이스를 통해 누구나 쉽게 사용할 수 있으며, 이는 디자인과 프로토타이핑 과정을 더욱 민주화하는 데 기여함.

        Hacker News 의견

     * 첫 번째 댓글:
          + GitHub의 메인 브랜치가 몇 년 동안 업데이트되지 않아 유용해 보이지만 유지 관리가 되고 있는지 의문.
     * 두 번째 댓글:
          + 설치 가능한 웹 앱으로 제시되었지만, 안드로이드 크롬에서는 작동하지 않는 것 같음.
          + 휴대폰에서는 프로젝트를 보거나 편집하지 않고 검토하거나 이메일이나 팀 채팅에 답변하는 데 사용할 수 있어야 함.
     * 세 번째 댓글:
          + 클릭 한 번으로 그리기 시작할 수 있고, 이미지로 내보낼 수 있음. 로그인이나 가입이 필요 없어 매우 편리함.
     * 네 번째 댓글:
          + 매우 멋져 보임. GitHub README에 링크된 YouTube 비디오는 사용할 수 없음. 최신 데모 비디오를 보고 싶음.
     * 다섯 번째 댓글:
          + 오타 발견: 기능 사이드바에 'permisions'이라고 적혀 있어야 할 곳에 'permissions'이라고 적혀 있음.
     * 여섯 번째 댓글:
          + VueJs로 작성된 비슷한 프로젝트를 아는 사람이 있는지 궁금함.
     * 일곱 번째 댓글:
          + 이 도구가 매우 유용해 보임. 게임 디자인 아이콘을 만들기 위해 포크하는 것이 쉬운지 궁금함.
     * 여덟 번째 댓글:
          + 사용자 흐름 프로토타입이 무엇인지 질문.
     * 아홉 번째 댓글:
          + 내장된 실시간 채팅 기능이 있어 팀원과 같은 앱에서 협업하면서 소통할 수 있음. 그러나 문법에 약간의 수정이 필요함.
     * 열 번째 댓글:
          + 다른 사람들이 어떤 도구를 사용하여 이러한 와이어플로우를 구축하는지 궁금함. Figma는 너무 세부적이고, Mockup은 완전히 만족스럽지 않음. 추천할 만한 도구가 있는지 질문.
"
"https://news.hada.io/topic?id=12411","미키, 디즈니, 그리고 공공 도메인: 95년간의 사랑의 삼각관계","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  미키, 디즈니, 그리고 공공 도메인: 95년간의 사랑의 삼각관계

미키, 디즈니, 그리고 공공 도메인: 95년간의 사랑 삼각관계

     * 2024년 1월 1일, 거의 한 세기의 저작권 보호를 받은 후, 미키 마우스의 한 버전이 공공 도메인에 진입함.
     * 미키 마우스가 처음 등장한 영화인 '증기선 윌리'와 '플레인 크레이지'의 무성 영화 버전은 1928년에 제작되었으며, 미국에서는 1928년 작품들이 2024년 새해 첫날 공공 도메인에 포함됨.
     * 공공 도메인에 진입하는 것은 미키가 유명한 저작권 캐릭터이기 때문만이 아니라, 미키, 디즈니, 공공 도메인 간의 복잡한 관계 때문임.

저작권 연장과 공공 도메인의 침식

     * 디즈니는 저작권 기간을 95년으로 연장하는 법률을 밀어붙였으며, 이는 ""미키 마우스 보호법""이라고 비꼬아 불림.
     * 이 연장은 경제적으로 퇴보적이며 문화 유산에 접근하는 능력에 파괴적인 영향을 미친다는 비판을 받음.
     * 디즈니는 공공 도메인을 활용하여 많은 작품을 창조해왔으며, '겨울왕국', '라이온 킹', '환타지아' 등의 영화들이 공공 도메인에서 영감을 받음.

미키 마우스의 공공 도메인 진입과 그 의미

     * 2024년 1월 1일부터 미키 마우스 캐릭터를 사용할 수 있는 범위에 대한 설명.
     * '증기선 윌리'에 등장하는 미키와 미니 마우스는 공공 도메인에 속하게 되며, 누구나 이 자료를 공유, 적응, 리믹스할 수 있음.
     * 디즈니는 여전히 '환타지아'의 '마법사의 제자' 미키 등 더 최근 버전의 미키에 대한 저작권을 보유하고 있음.

더 최근 버전의 미키 마우스에 대하여

     * 원래 미키와 미니 마우스 캐릭터를 새로운 창작물에 사용할 수 있지만, 이 캐릭터들이 나중에 저작권이 있는 작품에 등장하는 경우, 디즈니는 새로 추가된 창의적 표현에 대해서만 저작권을 소유함.
     * 미키의 외모는 시간이 지나면서 변화했으며, 1928년의 미키는 2024년에 공공 도메인이 됨.

디즈니의 미키 마우스 상표권에 대하여

     * 상표권은 소비자가 제품의 출처나 후원에 대해 혼동하거나 속을 가능성이 있는 경우에만 사용을 금지함.
     * 상표권은 저작권과 다르며, 상표권은 저작권이 만료된 후에도 계속 유지될 수 있지만, 사용 범위가 더 제한적임.
     * 디즈니는 '미키 마우스' 이미지와 단어를 다양한 제품에 연결하여 상표권을 유지하고 있으며, 이는 공공 도메인에 속한 캐릭터를 새로운 창작물에 사용하는 것을 방해하지 않음.

공공 도메인: 창의성의 원천

     * 공공 도메인에 속한 이야기와 캐릭터들은 셰익스피어의 연극, 제인 오스틴의 소설, 메리 셸리의 '프랑켄슈타인', 브램 스토커의 '드라큘라' 등 수많은 새로운 작품을 낳음.
     * 디즈니는 공공 도메인에서 많은 영감을 받아 자신의 영화를 만들어왔으며, '세 명의 근위병', '크리스마스 캐럴', '미녀와 야수' 등의 작품들이 이에 해당함.

   GN⁺의 의견:
     * 이 기사에서 가장 중요한 점은 미키 마우스라는 상징적인 캐릭터가 공공 도메인에 진입한다는 것이며, 이는 저작권과 상표권에 대한 이해와 창작의 자유에 대한 논의를 촉발할 수 있음.
     * 미키 마우스의 공공 도메인 진입은 창작자들에게 새로운 기회를 제공하고, 디즈니가 공공 도메인을 어떻게 활용해왔는지에 대한 흥미로운 사례를 보여줌.
     * 이 사건은 저작권과 상표권의 복잡한 관계를 이해하는 데 있어 중요한 교육적 가치가 있으며, 창작물의 보호와 공공의 이익 사이의 균형을 모색하는 데 기여할 것임.

        Hacker News 의견

     * 미키 마우스의 당대 광고를 살펴보면, 1928년 포스터에 따르면 미키 마우스가 빨간 셔츠, 흰색 단추, 노란색 장갑, 갈색 신발을 착용한 모습으로 표현됨.
     * 디즈니가 주도한 저작권 조항 아래에서는, 특히 '이상한 나라의 앨리스'와 같은 초기 영화들이 저작권 침해가 될 수 있었음을 지적하며, 이는 자신이 건넌 로프 다리를 끊는 것과 같은 아이러니함을 가짐.
     * 디즈니가 자신들의 오프닝 로고 시퀀스를 '스팀보트 윌리'로 변경한 것이 저작권상의 이유 때문인지, 혹은 이제 그것이 자신들의 상표가 되었다는 주장 때문인지에 대한 의문 제기.
     * '나이트 오브 더 리빙 데드'의 최종 컷이 저작권 고지 없이 출시되어 공공 도메인에 속하게 되었고, 이는 좀비를 대중 문화 현상으로 만들었지만, 조지 로메로에게는 손해가 되었음을 언급한 기사에 대한 놀라움 표현.
     * 미키 마우스를 사용하는 것이 마치 지뢰밭을 걷는 것과 같으며, 저작권이 있는 변형을 실수로 사용하면 소송을 당할 위험이 있음.
     * 디즈니가 저작권을 만료시키는 것은 새로운 아이디어를 영화에 적용하기 위한 전략이라는 냉소적인 견해 제시.
     * 미키 마우스 곡선이 마침내 패배했으나, 이제 그것을 다시 물리치는 것이 더 어려운 일임.
     * 디즈니에게 법에서 면제를 주고 공공 도메인을 축소하는 것은 불공정한 타협 제안이며, 법을 파괴하는 대신 법 위의 사람들에게 경쟁을 만들어 현실을 인정해야 함을 주장.
     * 미키 마우스가 만료되었지만, 디즈니가 만든 창작물들은 어떻게 되는지에 대한 질문. 창작물에는 실제 그림, 애니메이션, 스토리 라인이 포함됨.
"
"https://news.hada.io/topic?id=12356","Deno 1.39: WebGPU 의 귀환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Deno 1.39: WebGPU 의 귀환

     * 2021년에 도입되었다가 올해초 성능문제로 제거되었던 WebGPU가 다시 복귀. 모든 성능문제가 해결됨.
     * 새로운 deno coverage 리포터 summary (텍스트 테이블 출력) 와 html (스태틱 HTML)
     * deno compile 향상: 더 나은 node_modules 지원. 실행파일 이름에 대한 제한 제거. Dynamic Import 지원
     * Deno Language Server 개선:
          + 빠른 타이핑에도 반응성 뛰어난 편집 경험 제공
          + 좀비 LSP 인스턴스 제거를 위한 종료 시간 제한
          + 업데이트 알림
          + 향상된 Diagnostic 정보
     * Node.js 호환성 향상 :
          + Sloppy Import 지원
          + node_modules/.bin/의 실행파일을 deno task에서 실행 가능
          + node_modules 의 CommonJS 엔트리포인트를 잘 핸들링
          + Object.prototype.__proto__ 지원
     * Deno API 변경
          + 유닉스 소켓에 대한 Deno.serve()가 stable 해짐
          + Deno.HttpServer.shutdown() 도 stable
          + Deno.HttpClient 가 using 으로 선언 가능
          + Deno.Kv.watch() 추가 (unstable)
          + Deno.cron 업데이트: JSON 형태의 스케줄 정보 입력 가능
"
"https://news.hada.io/topic?id=12403","벤토이: 혁신적인 멀티부팅 USB 솔루션","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         벤토이: 혁신적인 멀티부팅 USB 솔루션

Ventoy란 무엇인가

     * Ventoy는 ISO/WIM/IMG/VHD(x)/EFI 파일을 위한 부팅 가능한 USB 드라이브를 생성하는 오픈 소스 도구임.
     * 디스크를 반복해서 포맷할 필요 없이, 파일들을 USB 드라이브에 복사하고 직접 부팅할 수 있음.
     * 여러 파일을 한 번에 복사할 수 있으며, Ventoy는 선택할 수 있는 부팅 메뉴를 제공함.

Ventoy의 특징

     * 다양한 OS 지원(Windows/WinPE/Linux/ChromeOS/Unix/VMware/Xen 등)과 1100개 이상의 이미지 파일 테스트 완료.
     * x86 레거시 BIOS, IA32 UEFI, x86_64 UEFI, ARM64 UEFI, MIPS64EL UEFI를 동일한 방식으로 지원함.
     * 네트워크(PXE)를 통해 OS를 부팅하고 설치하고 싶다면, 새 프로젝트인 iVentoy를 확인할 것.

Ventoy의 사용 경험 공유

     * Ventoy 사용자와 부팅 기술 애호가들과 좋은 경험을 공유함.

Ventoy 브라우저

     * Ventoy를 사용하여 로컬 디스크의 ISO/WIM/IMG/VHD(x)/EFI 파일을 탐색하고 부팅할 수 있음.

Ventoy의 기능

     * 100% 오픈 소스이며 사용이 매우 간단함.
     * ISO 파일 복사 속도에만 제한되는 빠른 속도로 작동함.
     * USB/로컬 디스크/SSD/NVMe/SD 카드에 설치 가능함.
     * 파일 추출 없이 직접 ISO/WIM/IMG/VHD(x)/EFI 파일에서 부팅 지원함.
     * MBR과 GPT 파티션 스타일 모두 지원함.
     * IA32/x86_64 UEFI 보안 부팅 지원함.
     * 리눅스 지속성, 윈도우 자동 설치, 리눅스 자동 설치 지원함.
     * 윈도우/리눅스 자동 설치 스크립트를 위한 변수 확장 지원함.
     * 주 파티션 파일 시스템으로 FAT32/exFAT/NTFS/UDF/XFS/Ext2(3)(4) 지원함.
     * 4GB 이상의 ISO 파일 지원함.
     * 메뉴 별명, 메뉴 팁 메시지 지원함.
     * 비밀번호 보호 기능 지원함.
     * 레거시 및 UEFI를 위한 네이티브 부팅 메뉴 스타일 지원함.
     * 사용자 정의 가능한 테마와 메뉴 스타일, USB 드라이브 쓰기 보호 지원함.
     * 버전 업그레이드 중 데이터 비파괴 보장함.
     * 새로운 배포판이 출시되어도 Ventoy를 업데이트할 필요 없음.

GN⁺의 의견

     * Ventoy는 사용자가 여러 운영 체제를 쉽게 설치하고 테스트할 수 있게 해주는 강력한 도구임. 이는 시스템 관리자나 IT 전문가에게 매우 유용할 수 있음.
     * 오픈 소스이며 지속적인 업데이트와 커뮤니티 지원을 받고 있어, 사용자들이 신뢰하고 사용할 수 있는 솔루션임.
     * Ventoy의 다양한 파일 시스템과 OS 지원은 사용자가 다양한 환경에서 유연하게 부팅 가능한 USB를 생성할 수 있게 해주며, 이는 기술적인 장벽을 낮추고 접근성을 높이는 데 기여함.

        Hacker News 의견

     * 멀티 부팅 USB 도구에 대한 긍정적인 평가
          + 다양한 ISO 파일을 하나의 USB에 담을 수 있는 편리함에 대한 감탄.
          + Linux, Windows, FreeBSD, 일부 DOS 버전 등 대부분의 시스템과 호환됨.
          + PXE 네트워크 부팅 버전도 출시됨.
          + 관련 글 링크 제공: The Register 기사, iVentoy 웹사이트.
     * 보안 우려와 관련된 질문
          + 소스 코드의 공개 여부에 대한 질문으로, 보안상의 이유로 회사에서 사용이 거부된 사례 언급.
          + Ventoy가 아시아 국가에서 제작되었기 때문에 보안 팀에서 트로이 목마 우려를 표함.
     * PXE 부팅과 관련된 Ventoy의 확장 버전
          + iVentoy는 유료이지만 비싸지 않으며, PXE 부팅을 지원하는 Ventoy의 확장 버전.
          + 설정에 시간이 조금 걸리지만, Linux 시스템에서 실행하여 모든 이미지로 기기를 부팅할 수 있음.
     * 유사한 주제에 대한 이전 토론 링크
          + 해커뉴스의 관련 토론 링크 제공:
               o A New Bootable USB Solution (2021년 10월 16일)
               o Ventoy makes making bootable USB drives easy (2020년 8월 25일)
               o Ventoy: A new bootable USB solution (2020년 8월 21일)
               o Ventoy – A New Bootable USB Solution (2020년 6월 2일)
     * 다양한 운영 체제를 실험하는 사용자에게 유용
          + 리눅스 배포판을 자주 변경하는 사용자에게 유용하며, dd 명령어 대신 USB에 여러 ISO 파일을 복사하는 간편함 제공.
     * 리눅스 설치 및 복구/유지보수에 최적화된 도구
          + 리눅스 설치에 최적화되어 있으며, BIOS와 UEFI를 지원하고 USB를 다른 파일 저장용으로도 사용할 수 있음.
     * 소프트웨어의 문제 해결 능력에 대한 높은 평가
          + 이 소프트웨어가 사용자의 모든 문제를 해결해준다고 평가.
     * 지속성(persistence) 기능에 대한 언급
          + 지속성 기능을 통해 사용자 정의가 가능하며, 복구 디스크 USB를 업데이트할 때 ISO를 새로 만들 필요가 없음.
          + 관련 기능 설명 링크 제공: Ventoy 지속성 플러그인.
     * 일상적인 휴대품으로서의 Ventoy
          + 노트북 외에도 Ventoy가 설치된 플래시 드라이브를 항상 휴대함으로써 편리함을 강조.
"
"https://news.hada.io/topic?id=12362","Golang용 SQLite 드라이버 벤치마크","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Golang용 SQLite 드라이버 벤치마크

사용한 라이브러리들

     * craw: CGO 기반 솔루션. database/sql 드라이버가 아님
     * mattn: CGO 기반 솔루션. 여전히 de-facto standard 이고 많이 사용됨
     * modernc: 순수 Go 솔루션. 새로운 라이브러리로 SQLite C 코드를 Go로 재작성한 코드 기반
     * ncruces: WASM 기반의 순수 Go 솔루션
     * sqinn: CGO를 사용하지 않은 솔루션. SQLite DB 파일을 접근하기 위해 github.com/cvilsmeier/sqinn 를 사용
     * zombie: crawshaw 드라이버를 modernc 라이브러를 활용해서 재작성한 것. database/sql 드라이버가 아님

벤치마크

     * user/article/comment로 구성된 테스트 DB를 생성
     * 1백만 사용자 생성 및 조회
          + insert : sqinn 883ms > craw 1234ms > mattn 1537ms > zombie 1862ms > modernc 5557ms > ncruces 10073ms
          + query : zombie 325ms > craw 608ms > sqinn 641ms > mattn 1267ms > modernc 1379ms > ncruces 6080ms
     * 복잡한 쿼리: 한 트랙잰션에서 200 사용자 생성, 또다른 트랜잭션으로 각 사용자당 100 아티클 생성, 또 다른 트랜잭션으로 아티클당 20 코멘트 생성. 모든 것을 JOIN 해서 쿼리
          + insert : sqinn 574 > craw 729ms > mattn 911ms > zombie 1400ms > modernc 3211ms > ncruces 5159ms
          + query : zombie 507ms > craw 667ms > sqinn 709ms > mattn 1387ms > modernc 1633ms > ncruces 5380ms
            Here are the remaining sections of the ""go-sqlite-bench"" GitHub repository summary in the requested format:
     * 많은 조회(Many) : N명의 사용자를 하나의 데이터베이스 트랜잭션에 삽입한 다음, 1000번 조회
          + query/N=10 : zombie 17ms > craw 14ms > sqinn 25ms > mattn 30ms > modernc 35ms > ncruces 185ms
          + query/N=100 : zombie 36ms > craw 65ms > sqinn 83ms > mattn 130ms > modernc 135ms > ncruces 829ms
          + query/N=1000 : zombie 225ms > craw 520ms > sqinn 619ms > mattn 1143ms > modernc 1180ms > ncruces 7230ms
     * 대용량 데이터(Large) : 10,000명의 사용자와 N 바이트의 행 내용을 삽입한 다음, 모든 사용자 조회
          + query/N=50000 : mattn 168ms > craw 197ms > ncruces 244ms > modernc 276ms > zombie 552ms > sqinn 519ms
          + query/N=100000 : mattn 290ms > craw 346ms > ncruces 391ms > modernc 514ms > zombie 1071ms > sqinn 1085ms
          + query/N=200000 : mattn 591ms > craw 624ms > ncruces 789ms > modernc 888ms > zombie 2198ms > sqinn 2264ms
     * 동시성(Concurrent) : 100만 명의 사용자를 삽입한 후, N개의 고루틴으로 모든 사용자 조회
          + query/N=2 : zombie 367ms > craw 692ms > sqinn 854ms > mattn 1516ms > modernc 2889ms > ncruces 8268ms
          + query/N=4 : zombie 646ms > craw 1100ms > sqinn 1411ms > mattn 1840ms > modernc 7144ms > ncruces 12710ms
          + query/N=8 : zombie 1140ms > craw 1873ms > sqinn 2460ms > mattn 3483ms > modernc 18674ms > ncruces 25792ms

요약

     * 우열을 가릴 수는 없으며, 모든 것이 유스 케이스에 따라 다름
     * Crawshaw 와 Zombiezen이 꽤 빠름
     * Mattn이 사실상의 표준이긴 하지만 전반적으로 최고의 솔루션은 아님
     * CGO가 없는 SQLite도 가능함
"
"https://news.hada.io/topic?id=12471","Beeper, 안드로이드용 iMessage 연결 부분을 100% 오픈소스로 전환","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Beeper, 안드로이드용 iMessage 연결 부분을 100% 오픈소스로 전환

     * Beeper Mini가 Apple의 간섭으로 인해 '다운'되거나 안전성이 떨어질 때마다 Beeper의 신뢰성에 타격을 입음
     * 최신 소프트웨어 릴리스로 Apple이 용인할 수 있는 것을 만들었다고 믿으며, 이 솔루션이 오프라인이 되더라도 현재 대응 계획은 없음.
     * Beeper Mini와 Beeper Cloud를 지원하는 iMessage 연결 소프트웨어는 이제 100% 오픈 소스이며, 누구나 사용하거나 개발을 계속할 수 있음

앞으로 집중할 것

     * Beeper Mini는 원래의 목표인 최고의 채팅앱을 만드는 것으로 돌아 갈 것
          + 어떤 채팅앱과도 다 메시지 가능하고, 안전하고, 신뢰가능하며, 빠르고, 모든 기기에 동기화 가능
     * Apple과 일부 열성적인 온라인 지지자들을 제외하고, 미국에서 SMS를 통한 문자 채팅이 기본 형태인 iPhone과 Android 사용자 모두에게 큰 승리임

Apple과 다른 평론가들의 주장

     * Apple과 다른 평론가들은 Beeper Mini에 대해 여러 주장을 했으나, 이 주장들은 심각하지만 결함이 있음.
     * Beeper Mini가 사용자의 메시지나 계정을 훔치거나 데이터를 수집하는 악의적인 앱이 아님을 쉽게 확인할 수 있음
     * Beeper Mini는 iPhone과 Android 연락처 간의 불안전한 채팅을 업그레이드하고 끝에서 끝까지 암호화로 보안을 강화함
     * Apple이 RCS를 지원할 계획이라고 발표했지만, 실제로 지원할지는 미지수이며, Beeper는 이미 RCS를 지원함
     * Apple은 미국 스마트폰 시장의 50% 이상을 통제하고 있으며, 공정한 경쟁, 소비자 피해, 혁신 장벽에 관한 다른 규칙을 따라야 함

GN⁺의 의견

     * Beeper Mini는 기존의 통신 방식에 도전하며, 사용자의 편의성과 보안을 향상시키려는 혁신적인 접근을 보여줌
     * Apple과의 갈등은 기술 산업에서 자주 발생하는 대기업과 스타트업 간의 긴장 관계를 반영함
     * 이 기사는 기술의 개방성과 호환성에 대한 중요한 논의를 제기하며, 사용자들이 기술 선택에 있어 더 많은 자유를 가질 수 있도록 하는 방향으로의 변화를 촉구함

        Hacker News 의견

     *

     “Beeper Mini가 Apple의 간섭으로 인해 '다운'되거나 신뢰성이 떨어질 때마다 Beeper의 신뢰성에 타격을 입는다. 이는 지속 가능하지 않다”고 Beeper는 말한다.
          + Beeper Mini가 Apple의 제한적인 정책 때문에 신뢰성을 잃을 때마다 Beeper의 명성에 손상이 간다는 우려가 있음.
          + Apple 생태계 내에서는 필요성이 떨어지며, Apple이 제한하고자 하는 것에 의존하는 제품의 지속 가능성에 대한 의문이 제기됨.
          + Beeper 팀은 능력이 있지만, 불안정한 기반에 의존하는 사업 모델은 신뢰성이 떨어진다고 인식됨.
     *

     Sweet, they open sourced their iMessage connector. I was shocked to see that Apple is using Hashcash in their oauth header!
          + Beeper가 iMessage 연결기를 오픈소스로 공개한 것에 대해 긍정적인 반응.
          + Apple이 OAuth 헤더에 Hashcash를 사용하고 있음에 놀라움을 표함. 이는 비밀번호 시도를 더 비용이 많이 드는 작업으로 만들어 캡챠가 필요 없게 하는 목적으로 추정됨.
     *

     It's good they are open sourcing it. That's where it belongs.
          + Beeper의 오픈소스 전략이 적절하다고 평가.
          + 비즈니스를 해킹적인 방법에 의존하는 것은 바람직하지 않으며, 중앙화된 시스템은 Apple에 유리함.
          + Airbnb와 Plaid와 같이 해킹적인 방법으로 시작한 사업들도 있지만, 이는 지속 가능한 비즈니스 모델이 아님을 지적.
     *

     I'm sorry to see them pull the plug so quickly, but it was mostly expected.
          + Beeper가 서비스를 빠르게 종료한 것에 대해 아쉬움을 표함.
          + 개방형 표준을 통한 상호운용 가능한 메시징 서비스에 대한 기대감을 나타냄.
          + 이메일의 보편성과 비교하며, 메시징 서비스가 독립적인 이유는 수익화를 위한 완전한 제어가 불가능하기 때문임을 언급.
     *

     I would love to have been a fly on the wall at the Beeper offices over the past few weeks.
          + Beeper의 최근 행보에 대한 궁금증을 표함.
          + Beeper Mini 프로젝트가 마케팅 전략의 일부로 보이며, Apple의 반응에 대한 Beeper의 태도가 의외라는 인상을 받음.
          + Beeper Cloud 서비스에 대한 만족감을 표현하며, iMessage 기능에는 큰 관심이 없음을 밝힘.
     *

     Just in case Eric sees this -- We're an Apple household, but I have to use a PC for work.
          + Apple 제품을 사용하는 가정이지만, 업무상 PC를 사용해야 하는 상황에서 Beeper가 iMessage를 PC로 확장하는 데 도움이 됨.
          + Beeper의 새로운 솔루션이 성능 면에서 다른 대안보다 우수하다고 평가하며, 서비스에 대한 지불 의사를 밝힘.
     *

     I guess I’m the only one here that remembers BBM.
          + BBM(BlackBerry Messenger)을 기억하는 사람이 별로 없다고 언급.
          + BBM이 국제 메시징에 있어 중요한 역할을 했지만, BlackBerry와 BBM 서비스 활성화가 필요했으며, 시장이 변화한 후에는 관심이 줄어듦을 지적.
     *

     It's sad to see how Apple behaved here.
          + Apple의 행동에 대해 실망감을 표현.
          + Beeper 팀이 해결책을 찾기 위해 노력한 것에 대한 칭찬.
          + Apple의 반대 조치가 반독점 사례로 보일 수 있음에도 불구하고, Texts.com에서는 Windows나 Android로의 이동을 시도하지 않은 이유를 설명.
     *

     They control more than 50% of the US smartphone market, and lock customers into using Apple’s official app for texting.
          + Apple이 미국 스마트폰 시장의 50% 이상을 차지하고, 공식 메시징 앱 사용을 강제함을 지적.
          + Beeper가 iOS 앱 스토어에 등록되어 있음을 언급.
     *

     This whole Beeper situation has increased awareness that the limitations of ""green bubbles"" are created by Apple, not by Android devices.
          + Beeper 사태를 통해 '녹색 말풍선'의 제한이 Android 기기가 아닌 Apple에 의해 만들어졌다는 인식이 확산됨.
          + 소셜 서클 내에서 이 문제에 대한 인식이 변화하고 있음을 나타냄.
"
"https://news.hada.io/topic?id=12423",""루비를 사랑하는 사람들"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ""루비를 사랑하는 사람들""

프로그래머의 행복을 추구함

     * 루비는 프로그래머의 행복을 추구하는 언어로, 이는 종종 다른 커뮤니티에 의해 조롱의 대상이 되기도 함.
     * 루비를 사용하는 것은 즐거움을 주며, 이는 언어, 젬(gems) 생태계, 커뮤니티 전반에 걸쳐 내재된 가치임.
     * 루비 코드를 작성할 때, 심지어 나쁜 부분에서조차 즐거움을 느낌.

표현력을 장려함

     * 루비는 아마 지구상에서 가장 표현력이 풍부한 프로그래밍 언어일 것임.
     * 메타프로그래밍 기능과 문화적 관용구를 통해 프로그래머가 의도를 명확하게 표현할 수 있는 코드를 작성할 수 있음.
     * 예를 들어, RSpec의 DSL은 테스트하고자 하는 내용을 마치 사람이 말하는 것처럼 읽히게 함.

나만을 위해 만들어진 언어

     * 많은 루비 개발자들은 루비와 레일즈가 자신의 두뇌에 딱 맞는다고 느낌.
     * 메소드 이름과 시그니처를 직관적으로 추측할 수 있으며, 틀렸을 때는 인자의 순서를 바꿔볼 수 있음.
     * 문서를 읽기 전에 직관에 기반하여 무언가를 시도하는 것을 빠르게 배움.

커뮤니티와 가치

     * 루비 커뮤니티는 언어가 무엇인지, 언어를 사용하는 느낌을 형성하는 데 중요한 역할을 함.
     * 켄트 벡은 ""소프트웨어 디자인은 인간 관계의 연습""이라고 말했는데, 이는 커뮤니티와 가치에도 적용됨.
     * 루비 커뮤니티는 환영하고, 친절하며, 서로를 지원하는 놀라운 그룹임.
     * 루비는 기쁨과 커뮤니티라는 주요 특징을 가지고 있으며, 이는 뛰어난 장점임.

GN⁺의 의견

     * 루비 언어의 가장 중요한 특징은 프로그래머의 행복과 표현력 있는 코드 작성을 가능하게 하는 것임.
     * 루비 커뮤니티의 강력한 결속력과 상호 지원적인 문화는 이 언어를 사용하는 개발자들에게 큰 자부심과 만족감을 제공함.
     * 이 글은 루비를 사랑하는 개발자의 관점에서 루비의 매력을 전달하며, 프로그래밍 언어가 단순한 도구를 넘어 커뮤니티와 문화를 형성할 수 있음을 보여줌으로써 흥미롭고 매력적임.

        Hacker News 의견

     * 루비 언어의 표현력에 대한 의견이 분분함

     루비는 생태계 내부에서 또는 생태계가 기대하는 작업을 할 때는 훌륭하지만, 비표준적인 작업을 하려고 할 때는 매우 까다로움. 지원 기능 메소드가 5단계 추상화 깊이 어딘가에 정의되어 있을 수 있으며, 때로는 어떤 라이브러리의 메타프로그래밍 일부일 수도 있어 LSP가 가리키지 못하는 경우도 있음. 루비는 암시적인 것을 축하하는 생태계로, 이는 때때로 미칠 듯한 느낌을 줌. 완성된 코드가 멋지고 읽기 좋다고 해도 이것이 모든 문제를 해결해주지는 않음.
     * 개발자 경험에 대한 중요성을 인정하면서도 루비가 최고는 아니라는 의견

     개발자 경험이 많은 프로그래밍 언어나 프레임워크에서 과소평가되고 있다는 점에 동의하지만, 루비가 이 분야에서 최고라고 생각하지는 않음. 문법이 처음에는 좋아 보일 수 있지만, 타입 정보의 부재와 메타프로그래밍은 루비를 사용하기 어렵게 만듦. 또한 프로그래밍 언어를 선택할 때 고려해야 할 다른 요소들이 있음, 예를 들어 런타임 성능 등이 있음. 정적 타이핑의 부재와 이러한 이유들로 루비가 유행에서 빠진 것 같음. 개인적으로 코틀린이 프로그래밍 언어에서 이상적인 지점이라고 생각함. 코틀린은 간결하고 읽기 쉬운 언어로, 세계적 수준의 도구 지원, 정적 타이핑, JVM의 우수한 성능과 자바 생태계의 모든 것을 제공함.
     * 루비 언어에 대한 애정을 표현하면서도 파이썬을 선호하는 이유를 설명하는 의견

     루비를 좋아하며, 파이썬보다 루비를 더 선호함. 특히 함수형 연산의 연쇄가 매우 깔끔하고 표현력이 뛰어남. 자바 스트림과 비슷한 점을 좋아함. 라이브러리 생태계도 훌륭하며, 파이썬과 유사하게 라이브러리가 매우 실용적임. 하지만 유지보수가 필요한 작업에는 파이썬을, 성능에 조금이라도 신경을 써야 할 때는 자바를 선택함. 루비와 파이썬 사이에서는 점진적 타이핑에 대한 다른 접근 방식 때문에 계속 파이썬을 선택함. 파이썬3는 타입을 프로그램의 일부로 포함시킬 수 있지만, 루비는 타입을 별도의 파일로 두는 경향이 있음. 이는 주로 라이브러리를 위한 것으로 보이며, 자바스크립트 라이브러리가 타입스크립트 타입 파일을 함께 제공하는 것과 유사함. 하지만 개인적으로는 타입을 직접 사용하고 싶음. 물론 Sorbet이라는 도구가 있지만, 이것이
     젬(gem)이라는 점과 문법의 일부가 아니라 언어 내에서 동작한다는 점이 마음에 들지 않음. Stripe에서 잘 작동하는 것을 보았지만 개인적으로는 좋아하지 않으며, 내장된 타입 힌팅을 가진 파이썬3이 루비보다 타입을 더 쉽게 적용할 수 있다고 느낌. 루비를 매우 좋아하지만 타입 힌팅 부분이 개선되기를 바람.
     * 다양한 언어에 대한 경험을 공유하며 루비에 대한 선호도가 낮다는 의견

     다양한 언어를 시도해봤고, 한때 레일즈를 주로 사용할 때 루비에 깊이 몰두했음. 그러나 루비는 아마도 가장 좋아하지 않는 언어임. 루비를 독특하게 만드는 대부분의 기능이 오히려 F#으로 기능적인 즐거움을 찾거나, 모험을 느끼고 싶을 때 C++을 사용하거나, 동적 언어를 원할 때는 Scheme/Racket을 사용하도록 유도함. 프로그래밍 언어의 표현력에 대한 일반적으로 인정받는 정량적 정의가 있는지 궁금함. 여기서 저자는 표현력을 자연 언어에 가까움으로 동일시하는 것 같음. 경험상, 루비 코드는 작성하기 쉽지만 코드 베이스와 그 이디엄에 익숙하지 않으면 따라가기 어려움. 이해하는 데 필요한 많은 정보가 암시적인 맥락을 통해 전달됨.
     * 루비에 대한 강한 반감을 표현하면서도 현재 주로 사용하는 언어임을 밝히는 의견

     루비를 열정적으로 싫어하지만, 현재 주로 사용하는 언어임. 루비 자체가 합리적인 언어라기보다는 생태계에서 흔한 패턴들이 문제임. 코드 공유를 위한 상속 사용, 전역 가변 상태의 만연, 메타프로그래밍의 남용 등이 문제로 지적됨. 이러한 문제들은 언어가 강제하는 것이 아니라 커뮤니티에서 드물게 사용하는 관습임.
     * 루비 유지보수의 어려움을 토로하며 다른 언어로의 전환을 시도하는 의견

     루비 유지보수가 악몽이라고 느끼며, 그 지옥에서 벗어나려고 시도 중임. 개인 프로젝트에는 루비를 좋아하지만, 다른 사람들과 함께 작업할 때는 더 빠르게 엉망이 되고, 그로 인해 ""당신의 길을 방해하지 않는다""는 루비의 장점이 사라짐. 코드에서 지역적 추론 능력을 파괴하는 것이 문제로 지적됨.
     * 루비에서 러스트로 전환한 경험을 공유하며 루비에 대한 애정을 표현하는 의견

     10년간 루비를 사용한 후 4년 전에 러스트로 전환했으며, 뒤돌아보지 않을 계획임. 그럼에도 불구하고 루비에 대한 애정이 있음. 좋은 타입 시스템 없이는 더 이상 할 수 없다고 느끼며, 러스트에 익숙해진 것 같음. 그러나 루비의 강력한 리플렉션 기능이 그립다고 함.
     * 즐거운 프로그래밍 언어가 종종 작은 일자리 시장을 가지고 있다는 아이러니를 지적하는 의견

     가장 즐거운 프로그래밍 언어가 종종 가장 작은 일자리 시장을 가지고 있는 것이 프로그래밍의 아이러니 중 하나임. 엘릭서를 하루 종일 프로그래밍할 수 있다면 프로그래머로서의 직업이 훨씬 나아질 것이지만, 타입스크립트, 파이썬, 자바에 비해 엘릭서 일자리는 거의 없음. 루비는 이에 대한 예외였지만, 이제는 레일즈를 기반으로 하는 사람들이 거의 없으며, 대신 리액트와 NextJS를 기반으로 하는 사람들이 많아짐. 이것은 전체 스택 애플리케이션 시장에 대한 이야기이며, 시스템용 러스트 사용자나 데이터/AI용 파이썬 사용자에게는 다를 수 있음.
     * 루비 생태계와 문화가 프로그래밍에 미치는 영향을 강조하는 의견

     언어 자체에 대한 논의가 많지만, 루비 생태계와 그것이 조성하는 문화가 루비에 계속 머무르게 하는 이유임. 기사에서도 이 점을 지적함. 루비 주변의 프로그래밍 커뮤니티만큼 격려적이고 친절한 커뮤니티를 아직 보지 못함.
     * 루비를 즐기는 저자에 대한 긍정적인 반응과 개인적인 경험을 공유하는 의견

     저자가 루비를 즐기는 것에 대해 기쁘게 생각하며, 루비에 대한 제한된 경험을 가진 사람으로서 이러한 인용구들이 눈에 띔. 언어가 사용하기 즐거워야 한다는 것, 잘 작성된 루비 코드가 자연 언어처럼 읽힐 수 있다는 것, 프로그래밍하는 언어에서 인정을 느끼는 것의 강력함 등이 중요하다고 강조함. 소프트웨어 설계가 인간 관계의 연습이라는 켄트 벡의 말에도 동의함. 컴파일러, 문서, 표준 라이브러리, 타사 라이브러리, 패키지 관리자, 프레임워크, 포맷터, 프로파일러 등 언어를 지원하는 모든 구성 요소들이 특히 중요함.
"
"https://news.hada.io/topic?id=12405","SvelteKit 2 발표","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             SvelteKit 2 발표

     * Vite 5 지원 및 여러 개선 사항을 포함하는 인크리멘탈 릴리즈
     * 24년에 출시될 Svelte 5를 위해서 SvelteKit2 로 미리 업그레이드하는 것을 권장
     * Shallow Routing 기능 추가
          + 네비게이션을 발생시키지 않고 State를 History와 연결하는 기능
          + 뒤로 스와이핑해서 해제 가능한 모달 및 전체 네이비게이션을 원하지 않는 팝업등을 만드는데 유용

   스벨트 쓰면 쓸 수록... 잘 만들었어요.
"
"https://news.hada.io/topic?id=12432","AMD MI300X, Nvidia H100보다 30% 향상된 성능을 보여","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                AMD MI300X, Nvidia H100보다 30% 향상된 성능을 보여

     * AMD가 최근 MI300X 그래픽 가속기를 발표하며 Nvidia의 H100에 비해 최대 1.6배 더 높은 성능을 주장
          + 이에 대해 Nvidia는 AMD가 H100과의 비교 시 자사의 최적화를 사용하지 않았다고 반박함
     * AMD는 Nvidia가 서버 워크로드에서 흔히 발생하는 지연 시간을 고려하지 않고, 실제 상황을 모방하지 않은 처리량 성능만을 보여줬다고 지적함
          + 또한 Nvidia가 H100의 내부 TensorRT-LLM을 사용하여 선택적 인퍼런싱 워크로드 세트를 벤치마킹했다고 주장
     * AMD는 널리 사용되는 vLLM과 FP16 데이터 타입을 사용하여 테스트를 진행했으며, vLLM은 FP8을 지원하지 않음을 강조
     * AMD는 Nvidia가 실제 서버 환경을 반영하지 않고 지연 시간을 고려하지 않은 채 처리량 성능을 제시했다고 비판

AMD의 최적화 및 지연 시간 고려한 업데이트된 테스트 결과

     * AMD는 Nvidia의 TensorRT-LLM을 사용하여 세 번의 성능 테스트를 수행함
     * 첫 번째 테스트는 두 회사 모두 vLLM을 사용하여 FP16 데이터셋으로 비교함 : MI300X가 2.1배 빠름
     * 두 번째 테스트에서는 MI300X의 vLLM 성능을 TensorRT-LLM과 비교함 : MI300X가 1.3배 빠름
     * 세 번째 테스트에서는 MI300X의 vLLM(FP16)과 TensorRT-LLM(FP8)과 비교함: 1.7초대 1.6초로 H100이 조금 더 빠름
     * FP8을 사용하기 위해서는 TensorRT-LLM의 폐쇄형 시스템과 함께 FP16을 버려야 하며, 본질적으로 vLLM을 영원히 버려야 한다는 점도 인정해야 함
"
"https://news.hada.io/topic?id=12365","gigaGPT - 565줄의 코드로 만든 GPT-3 모델","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    gigaGPT - 565줄의 코드로 만든 GPT-3 모델

     * 100M(1억개) 파라미터만 가능한 Andrei Karpathy의 nanoGPT 를 개선하여 100B(100억개) 까지 훈련 가능
     * 다른 코드 및 타사 프레임워크 의존성은 없고, ""Cerebras 하드웨어""의 대용량 메모리와 연산 능력을 활용하여 바닐라 torch.nn 코드에 대한 대규모 학습을 가능하게 함
     * 별도 수정없이도 긴 컨텍스트 길이를 지원하며, 다양한 최적화 도구와 함께 작동함
     * Cerebras 는 칩셋 제조사로, 매트릭스 곱셈 속도는 GPU와 비슷하지만 훨씬 더 크게 만들어서 한개의 칩에 더 많은 트랜지스터와 메모리를 넣는 회사
          + 이 크기 덕분에 여러 디바이스에 걸쳐서 샤딩 후 통합 하는 등의 작업이 필요가 없어서 LOC를 적게 만들수 있음
"
"https://news.hada.io/topic?id=12470","Microsoft LLMLingua - 추론 가속 및 비용 절감을 위해 프롬프트 압축하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Microsoft LLMLingua - 추론 가속 및 비용 절감을 위해 프롬프트 압축하기

     * GPT2-small 또는 LLaMA-7B와 같이 정렬 및 잘 훈련된 작은 언어 모델을 압축에 사용
     * 프롬프트에서 중요하지 않은 토큰을 감지하고 블랙박스 LLM에서 압축된 프롬프트로 추론을 가능하게 함
          + LLM의 추론 속도를 높이고 주요 정보에 대한 LLM의 인식을 향상시키기 위해 프롬프트와 KV-Cache를 압축
          + 성능 손실을 최소화하면서 최대 20배의 압축을 달성
     * 프롬프트 와 생성된 컨텍스트를 줄여서 비용을 절감
     * 프롬프트내에 중요한 정보의 밀집도를 더 높여서 더 긴 컨텍스트를 지원 가능
"
"https://news.hada.io/topic?id=12367","크리스마스 조명을 고장 낸 사건","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           크리스마스 조명을 고장 낸 사건

블루투스 LE LED 조명 컨트롤러 역공학, 또는 내 크리스마스 조명을 어떻게 망가뜨렸는가

     * 블루투스 LE를 통해 통신하고 앱이 있는 장치는 집안 자동화 시스템에 통합될 가치가 있음.
     * 예산 친화적인 LED 라이트 스트립을 역공학하여 자동화하는 데 상당한 시간을 할애함.
     * 최근에는 가장 저렴한 £2.38짜리 블루투스 LE 제어 5M 비주소 지정 스트립을 몇 시간 만에 Home Assistant에 연결하는 데 성공함.

  1단계. 전선을 통한 바이트

     * 자체 소프트웨어에서 장치를 제어하려면 앱에서 장치로 보내는 블루투스 바이트를 검사하는 것이 첫 단계임.
     * 안드로이드는 이 과정을 쉽게 함. 개발자 모드를 활성화하고, 조명 앱을 설치한 다음 개발자 설정에서 Bluetooth HCI snoop를 활성화하여 로그를 기록함.
     * Wireshark로 로그를 열어 정확한 바이트를 확인하고, 값의 패턴을 찾아 각 동작에 대한 바이트 시리즈를 식별할 수 있음.

  2단계. 재생 공격

     * 단순히 조명을 켜고 끄는 것이 목표라면 관찰한 반복 바이트 시리즈가 전원 제어에 충분할 수 있음.
     * gatttool을 사용하여 BLE 장치에 연결하고 바이트를 보내 테스트할 수 있음.

  3단계. 안드로이드 앱 디컴파일

     * 앱의 APK를 다운로드하고 jadx에서 열어 내부의 비밀을 확인함.
     * 소스에서 AES를 참조하는 것을 발견하여 암호화된 프로토콜 가능성을 시사함.
     * 암호화된 데이터는 매번 변하지 않으며, 저전력 MCU에서 빠른 복호화가 필요하고, 각 장치마다 고유하지 않은 고정 키가 있을 가능성이 있음.

  4단계. 모든 기능

     * 각 앱 기능을 작업하며 보내진 바이트를 기록함.
     * 각 동작을 기록하고, 반복하며, 패턴을 발견하고 캡처된 바이트와 메모를 상관시키는 데 도움이 됨.

  5단계. 자동화된 전자 폐기물 생성기

     * 색상 변경을 탐색하는 동안 앱이 빨강, 초록, 파랑에 대해 0x1F 이상의 값을 보내지 않는 것을 관찰함.
     * 8비트 값을 시도해 보고 더 밝은 색상이 잘 작동하는 것을 발견함.
     * 추가 효과가 있는지 궁금해져 간단한 루프로 시도해 봄.
     * 10번째 효과까지는 잘 작동했으나, 11번째에서 비밀 모드를 발견했고, 12번째에서 어둠이 찾아옴.
     * 재부팅을 시도했지만 조명은 다시 켜지지 않았고, 블루투스 광고도 하지 않아 더 이상 연결할 수 없음.
     * 버퍼 오버플로우로 펌웨어가 손상된 것으로 추정됨.
     * 그러나 LED 자체는 표준 주소 지정 가능 LED이므로 다른 마이크로컨트롤러에 연결하여 사용할 수 있음.

  내 조명을 어떻게 망가뜨릴 수 있을까

     * 문제가 발생했음에도 불구하고 대부분의 프로토콜을 문서화하고 Home Assistant 사용자 정의 구성 요소를 포함한 Github 프로젝트를 생성함.
     * 작동하지만, 위험을 감수하고 진행해야 함.

    GN⁺의 의견

     * 이 글에서 가장 중요한 것은 개인이 집에서 사용하는 스마트 조명을 자동화 시스템에 통합하려는 DIY 정신과 역공학에 대한 열정임.
     * 역공학 과정은 기술적 지식뿐만 아니라 문제 해결 능력과 창의성을 필요로 하며, 이는 초급 소프트웨어 엔지니어에게도 매우 흥미로운 주제임.
     * 실패의 경험을 공유하는 것은 다른 이들이 같은 실수를 반복하지 않도록 도움을 주며, 이러한 공개적인 지식 공유는 오픈 소스 커뮤니티의 핵심 가치 중 하나임.

        Hacker News 의견

     * 해독된 패킷 분석
          + 패킷 해독 시도 결과, 고정된 헤더와 5번째 바이트가 켜짐과 꺼짐을 나타내는 1과 0으로 전환되며, 나머지는 0으로 채워진 것을 확인함. 이는 명령어 길이, 명령어(""TURN""), 인자(0 또는 1)를 나타내며, 16바이트로 패딩된 것으로 추정됨.
     * 전원 공급 문제
          + WS281x LED 스트립이 매우 밝게 빛나며 많은 전류를 소모함. 100개의 스트립을 모두 최대 밝기로 구동하기에 12V, 3A 전원 공급 장치가 겨우 충분함. 펌웨어가 최대 밝기 255 중 31만을 사용하는 것으로 보아 퓨즈가 나갔을 가능성을 시사함.
     * 암호화된 조명 역공학 시도
          + 암란 60d와 SmallRig RM75 배터리 LED 조명을 역공학하려 했으나 암호화되어 있음을 발견함. 두 조명 모두 같은 협상 과정을 사용하지만 다른 라이브러리를 사용함. Diffie-Hellman 키 교환 과정을 모방하려 했으나, 추가적인 단계에서 무작위로 보이는 숫자(또 다른 키?)의 목적을 파악하지 못해 포기함. 이 글을 읽고 하드코딩된 키를 시도해볼 생각을 하게 됨.
     * BLE 조명에 대한 의견
          + BLE를 사용하는 조명 세트에 대해 충분히 읽었으며, 저자가 언급한 것에 감사함. 이는 아날로그 기술 연결 비디오를 떠올리게 함.
     * BLE 연결 크리스마스 조명 자동화 시도
          + BLE 연결 크리스마스 조명을 자동화하려 했으나 전자 폐기물을 만들어냄. 이제 당신도 만들 수 있음.
     * 메시지 암호화에 대한 의문
          + 메시지가 왜 암호화되어 있는지, 이것이 표준인지에 대한 의문 제기.
     * 암호화에 대한 댓글
          + ""공중을 통해 평문을 보낼 수 없다, 안전하지 않다""라는 말과 ""걱정 마, AES 암호화를 추가했다""라는 댓글.
     * 조명 해킹에 대한 유머러스한 댓글
          + ""내 조명을 어떻게 해킹할 수 있는지 말해줘""라는 말에 ""하하! 사랑한다""라는 반응.
     * Govee 조명 역공학에 대한 초보자 질문
          + Govee 조명과 같은 WiFi 조명을 역공학할 수 없는 이유가 무엇인지, MITM(중간자 공격)이 더 어려운 것인지에 대한 초보자 질문.
"
"https://news.hada.io/topic?id=12473","위키피디아의 여섯 단계 연결","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            위키피디아의 여섯 단계 연결

        Hacker News 의견

     * 프로젝트 생성자로서, 해커뉴스가 내 오래된 부수적 프로젝트를 재발견한 것에 기쁨을 표함.
          + 코드는 GitHub에서 무료로 제공됨.
          + 프로젝트는 트래픽으로 인해 현재 다운된 f1-micro GCE 인스턴스에서 운영 중임.
          + 현재 시간이 없어서 즉시 수정할 수 없으나, 트래픽이 줄면 자동으로 해결될 것임.
          + 데이터 소스는 몇 년 전 것이므로 현재 현실과 일치하지 않을 수 있는 링크를 반환할 수 있음.
          + 그 외에는 여전히 작동해야 함.
          + 현재는 Shortwave라는 AI 이메일 앱을 개발 중이며, 이는 더 나은 가동 시간과 지속적인 업데이트를 약속함.
     * 이 프로젝트는 해커뉴스의 첫 페이지에 몇 년에 한 번씩 등장함.
          + Jacob(프로젝트 생성자)은 현재 Shortwave의 공동 창업자임.
          + 그의 최신 작업을 보고 싶다면 Shortwave를 확인할 것을 권장함.
     * 이 프로젝트는 매우 재미있음.
          + 6단계에 이르는 링크를 찾는 것이 도전적임.
     * 두 관련 페이지 사이의 중간 페이지가 무엇인지 알아보는 것이 매우 흥미로움.
          + 예를 들어, Coinbase와 Arthur Koestler 사이에서 ""Half Truth""가 내부 노드 중 하나임.
          + 뇌 속의 무작위성을 생성하는 I-Ching의 목표와 같이, 새로운 개념을 생각해내는 데 유용함.
     * 몇 년 전에 만든 위키피디아 링크를 기반으로 한 게임에 대한 뻔뻔한 홍보.
          + 목표는 다른 페이지와 연결되지 않은 페이지를 찾는 것임.
     * 모든 검색이 실제 주제에서 2단계 떨어진 결과를 보여줌.
          + 주제와 다음 노드 사이의 정확한 관계를 보여주지 않아 연결고리를 볼 수 없음.
          + 예: Ricardo Darin -> Ron Gilbert
     * 이 프로젝트는 Six Degrees of Kevin Bacon에서 영감을 받았을 가능성이 높음.
     * 6단계의 분리를 가진 예를 찾음:
          + Geronimus Polynomials -> Aenictus Raptor
          + 예를 들어 Aenictus Raptor는 주로 Aenictus(속) 페이지에만 연결되어 있고, 이는 거의 개미 페이지에만 연결되어 있음.
          + 국가와 관련된 것은 하지 말 것. 거의 모든 기사가 국가를 나열하기 때문에 이들 사이를 쉽게 이동할 수 있음.
     * 가장 분리된 두 페이지, 즉 서로를 연결하는 가장 긴 경로를 가진 페이지가 무엇인지 궁금함.
"
"https://news.hada.io/topic?id=12360","HN에 묻다: AI/ML 기술 향상을 위한 일일 연습 방법?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HN에 묻다: AI/ML 기술 향상을 위한 일일 연습 방법?

인공지능/머신러닝 기술 개발에 투자하는 최선의 방법

     * 매일 약 1시간을 인공지능(AI)/머신러닝(ML) 기술 개발에 할애할 때, 이 시간과 에너지를 투자하는 최선의 방법에 대한 의견을 묻는 질문.
     * 다양한 방법들이 제시되어 있으며, 각각에 대한 구체적인 예시나 추천이 요구됨.
          + 소규모 프로젝트 구축(무엇을 만들 것인가?)
          + 블로그/뉴스레터 읽기(어떤 것들을 읽을 것인가?)
          + 강의 수강(어떤 강의를 들을 것인가?)
          + 교과서 읽기(어떤 책을 읽을 것인가?)
          + Kaggle 대회 참가
          + AI/ML 포럼/커뮤니티 참여
          + 위의 조합(가능하다면 시간 비율/가중치 공유)
     * 이 질문은 소프트웨어 엔지니어들이 ML 분야에서 역량을 쌓을 수 있도록 도움을 주기 위해 일반적으로 물어봄.

GN⁺의 의견

     * 중요성: 인공지능과 머신러닝은 현재 기술 세계에서 가장 빠르게 성장하는 분야 중 하나이며, 소프트웨어 엔지니어들에게 필수적인 기술로 자리잡고 있음. 이 분야의 기술을 개발하는 것은 경력 발전에 큰 도움이 될 수 있음.
     * 흥미로움: AI/ML은 다양한 산업과 응용 분야에 혁신을 가져오고 있으며, 이 분야에서의 학습과 실습은 창의적이고 도전적인 프로젝트를 만들 수 있는 기회를 제공함.
     * 학습 방법의 다양성: 제시된 학습 방법들은 개인의 학습 스타일과 목표에 따라 유연하게 조정될 수 있으며, 이러한 다양성은 각자에게 맞는 최적의 학습 경로를 찾는 데 도움이 될 수 있음.

        Hacker News 의견

     * 학위 경험 공유
          + 석사 학위를 좋은 학교에서 ML(머신러닝)로 취득했음. 학교에서 배운 것은 혼자서도 배울 수 있었지만, 학교는 혼자서는 할 수 없는 집중과 압박을 제공함.
          + 논문 구현이 가장 많이 배운 경험임. 강의와 교과서는 단어에 불과하고, 실제로 해보는 것이 훨씬 깊은 지식을 줌.
          + 다양한 커리큘럼을 제안할 수 있지만, 1시간 동안의 집중된 문제 해결이 가장 좋음.
          + 몇 가지 프로젝트 제안: 간단한 함수 학습을 위한 베이비 신경망 훈련, MNIST 숫자 분류기, 특수한 말뭉치로 GPT2 미세 조정, 시각적 유사성 측정을 위한 쌍둥이 신경망 훈련 등.
          + 자신의 신경망과 역전파를 작성하는 데 시간을 낭비하지 말고, 프로파일링 및 디버깅 도구 사용법을 배우라고 조언함.
     * AI 연구자 및 기술 창업자의 조언
          + 최신 발전에 대해 이야기하는 것으로 가정하고, 선형적인 경로를 따르지 말 것을 권장함. 한 과정과 작은 프로젝트를 하고, 시간을 정해두고 끝내려고 노력할 것.
          + 흥미로운 연구 분야를 찾아 해당 GitHub 코드를 실행하고, 개선하거나 앱에서 사용할 방법을 찾을 것.
          + fast.ai 과정 수강, 카파시의 블로그 포스트 읽기, 스탠포드 cs231n 및 cs234 과정 수강 등을 제안함.
          + 관심 있는 프로젝트를 찾아 실행할 것.
     * ML 실용화의 중요성
          + 많은 댓글이 ML의 저수준 부분을 강조할 것이지만, 현재 ML에 필요한 것은 구현 수준에서 똑똑한 사람들임.
          + 기존 LLM 기술을 활용하여 일반 사람들이 사용할 수 있는 소프트웨어를 만드는 것이 중요하고 필요한 작업임.
          + 일상적인 실습은 애플리케이션 스케치, 프롬프트 및 함수 호출 구성, 창조한 것을 마케팅하는 방법 학습, 제로에서 하나로 가는 도구 만들기 등임.
          + 예시로, 아리스토텔레스 시대의 공통 장서 기술을 현대의 임베딩 시대에 적용한 것과 순수 MD 사양을 이해하고 스트리밍 생성 모델을 통합한 것을 들 수 있음.
     * AI/ML을 일상 업무로 전환하기
          + AI/ML을 중요한 경로에 두는 방법을 찾음. 새로운 언어를 배우는 것과 같이, 완전한 몰입만큼 효과적인 것은 없음.
          + 아직 분야에서 일자리를 얻을 만큼 충분한 기반을 갖추지 못했다면, 열정 프로젝트를 찾고 새로운 해결 방법을 계속 생각하는 것이 다음으로 좋은 방법임.
          + 마지막으로, 학교로 돌아가는 것을 고려할 것. 하루 1시간 이상이 걸리지만, 다른 학습 전략보다 훨씬 빠르고 구체적인 결과를 볼 수 있음.
     * 전형적인 ML/AI 학생의 로드맵
          + 수학, 컴퓨터 과학 등의 선행 학습이 필요함. 이는 보통 미적분, 선형대수, 확률 및 통계, 프로그래밍, 객체지향 프로그래밍, 데이터 구조 및 알고리즘 등을 포함함.
          + 기본적인 ML 과정을 거친 후, 빠르게 변화하는 DL(딥러닝)의 기본 부분을 다룸.
          + ML 엔지니어링과 ML 연구로 나뉨. 엔지니어링은 ML 파이프라인과 관련된 기술적인 것들을, 연구는 과학 자체에 집중함.
          + 다른 사람들의 말처럼, 도구를 사용하여 구현하는 것이 재미있고 도움이 됨. 모든 모델을 구현하려고 하면 매우 어려움을 겪을 수 있음.
          + ""실용적인"" ML을 배울 때, API를 통해 데이터를 입력하고 결과를 받을 수 있는 방식으로 모델을 구현하려고 함. 이는 데이터 처리, 소프트웨어 개발 및 호스팅, API 개발 등의 도전을 포함함.
     * AI/ML의 한계 인식
          + 상상력을 너무 풀어놓거나 AI/ML이 할 수 있는 것에 대해 과신하지 말 것.
          + 주요 회사에서 2년간 ML 프로젝트에 참여했으나, 기존의 통계적 방법보다 개선되지 않았고, ML의 ""블랙 박스""를 이해하는 능력이 없어 프로세스에 실질적인 개선이 없었음을 깨달음.
          + 많은 ML 작업이 문제를 찾는 해결책이었음.
          + 데이터베이스(SQL 및 비SQL) 사용 방법을 이해하는 것이 중요함. ML을 효과적으로 사용하려면 대량의 데이터를 성능 좋게 프로그래밍하는 데 뛰어난 기술이 필요함.
     * AI/ML 공부 방법
          + Hastie 등의 ""An Introduction to Statistical Learning with Applications in R/Python""을 처음부터 끝까지 읽고 설명된 개념/아이디어/뉘앙스/미묘함을 이해할 것.
          + 수학/통계 책을 준비해두고, 모르는 수학 기법이 나오면 즉시 이 책들을 참고하거나 짧은 유튜브 동영상을 보며 개념과 사용법을 이해할 것.
          + 이것이 AI/ML을 공부하고 이해하는 가장 간단하고 직접적인 방법임. 이 스레드에서 언급된 다른 모든 것은 이것이 끝난 후에 해야 함.
     * ML과 엔지니어링의 결합
          + ML과 엔지니어링 사이의 결합을 살펴볼 것.
          + ML ops, DevOps 적용, ML 공간에서의 테스트 및 ci/cd, 여러 GPU에서 훈련하는 방법, 특히 대규모 및 저렴하게 LLM을 호스팅하는 방법 등을 고려할 것.
          + 학계에서 강력한 학문적 배경을 가진 수백 명의 후보자가 있지만, 그들의 야망을 실현할 수 있는 경험 많은 엔지니어는 매우 적음.
     * 딥러닝에 초점을 맞춤
          + 대부분의 LLM은 변환기 아키텍처를 사용함. 이에 대해 시각적으로 배울 수 있으며, 블로그 포스트나 Andrej Karpathy의 블로그 포스트와 자료를 통해 배울 수 있음.
          + 매주 발표되는 논문을 최신 상태로 유지하기 위해 매주 일요일 요약을 읽음.
          + 엔지니어링 측면을 더 배우기 위해 EleutherAI의 Discord 서버에 가입하거나 llama.cpp와 같은 프로젝트의 GitHub 토론을 따를 수 있음.
          + 가장 효율적인 개발 방법은 아마도 분야의 주요 논문을 재구현하는 것일 것임. 명확한 목표가 있고, 성공의 명확한 징후가 있으며, 작업을 확인하고 비교하며 배울 수 있는 많은 구현이 있음.
     * LLM 초보자를 위한 퀴즈
          + 비CS(생의학) 대학원생을 위한 LLM 소개 강의를 최근에 진행함. 숙제 퀴즈를 할당하고 싶었지만 좋은 것을 찾지 못해 다지선다형 퀴즈를 만듦. 이 퀴즈는 ""악마적""이며, 단단한 이해가 없으면 넘어질 수 있음. 몇 가지 질문은 이해를 시험하고 올바른 답을 찾으려고 노력함으로써 배우는 데 도움이 되는 뉘앙스를 가지고 있음. 이메일을 수집하지 않는 Google 양식임.
"
"https://news.hada.io/topic?id=12449","폭스바겐, 포르쉐, 아우디 도 테슬라의 EV 충전 플러그 사용할 것이라 밝혀","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               폭스바겐, 포르쉐, 아우디 도 테슬라의 EV 충전 플러그 사용할 것이라 밝혀

     * 폭스바겐 그룹이 테슬라의 전기차 충전 표준 채택 계획 발표
     * 현재 전기차 소유자를 위한 어댑터 솔루션 탐색 중이며, 2025년까지 테슬라의 슈퍼차저 네트워크 접근 가능 예정
     * 2025년부터는 NACS 포트를 기본으로 장착한 새로운 폭스바겐 전기차 출시 예정
     * 폭스바겐 그룹은 세계 최대 자동차 제조사 중 하나로, 아우디, 벤틀리, 부가티, 포르쉐, 람보르기니 등을 소유
     * 폭스바겐의 전기차 충전 자회사인 Electrify America도 테슬라 충전 플러그 추가 시작
     * 독일의 다른 자동차 산업체들도 테슬라의 충전 표준을 따르기 시작함

테슬라의 충전 기술 및 네트워크

     * 테슬라, 2022년 11월 자사의 충전 기술을 북미 충전 표준(NACS)으로 명명하고 다른 자동차 제조사들에게 개방 발표.
     * 테슬라 슈퍼차저는 과거 테슬라 차량 전용이었으나, 유럽과 미국에서 점차 다른 전기차에도 개방.
     * 테슬라 슈퍼차저의 신뢰성은 99.95%의 평균 가동 시간으로 거의 완벽함을 자랑.

GN⁺의 의견

     * 폭스바겐 그룹의 테슬라 충전 표준 채택은 전기차 산업에서 테슬라의 영향력과 기술 리더십을 인정하는 중요한 사건.
     * 이 결정은 전기차 소유자들에게 더 많은 충전 옵션과 편의성을 제공하며, 전기차의 대중화에 기여할 것.
     * 테슬라의 충전 네트워크 개방은 지속 가능한 교통 수단으로의 전환을 가속화하는 데 중요한 역할을 할 것으로 예상됨.

   진짜 충전표준으로는 천하통일 되어가네요.
   제발 우리나라도 CCS-1좀 버렸으면 ㅠ

   펄럭~

        Hacker News 의견

     * Starlight Charging의 창립자는 다가구 주택을 위한 저렴한 L2 충전기 개발에 집중하고 있음. 플러그 앤 차지 기능은 필수적이며, EVSE에서 차량으로의 결제/전력 통신 표준에 대한 합의 부족이 주요 미해결 문제임. OCPP 2.0.1과 ISO 15118은 이론적으로 플러그 앤 차지 기능을 가능하게 하지만, 차량과 충전기 간의 프로토콜에 대한 진전이 필요함. 테슬라는 자체 결제 시스템을 유지하고자 OCPP를 구현하지 않음.
     * 테슬라가 충전 네트워크 전쟁에서 승리하고 있으며, 모든 전기차가 테슬라의 슈퍼차저 네트워크를 사용할 수 있게 됨으로써 테슬라에게 엄청난 수익원과 네트워크 확장 가능성을 제공함.
     * 유럽연합(EU)이 때때로 비판을 받지만, 전기차 충전기 표준 설정에 있어서는 즉각적이고 정확한 조치를 취함. 모든 전기차가 모든 충전기에 연결 가능하며, 북미가 이제 표준에 동의함으로써 전기차 채택에 도움이 될 것임.
     * 북미 충전 표준이 유럽에 존재하지 않아 차량 재수입이 더 어려워짐.
     * 테슬라가 인프라가 전기차 미래의 절반을 차지한다는 것을 인식하고, 전기차 미래를 적어도 10년 앞당김.
     * 아우디가 전기차 시장 진출을 뒤로 미룸.
     * 테슬라 커넥터를 사용하는 차량이 출시될 때까지 사람들이 전기차 구매를 중단할지에 대한 의문이 있음. 현재 테슬라 플러그 없이 차를 구매하는 것은 VHS 지원 발표 후 베타맥스 플레이어를 구매하는 것과 비슷함.
     * 피아트 500 하이브리드처럼 USB-C를 채택하기를 바람.
     * NACS에 대한 Technology Connections 비디오가 주제에 대해 교육적임.
     * 폭스바겐 그룹에서 일하는 사람은 아우디와 포르쉐가 폭스바겐 그룹에 속해 있기 때문에, 그룹의 결정에 따라야 함을 언급함.
"
"https://news.hada.io/topic?id=12438","Fedora Asahi Remix - 애플 실리콘 맥을 위한 가장 세련된 리눅스","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Fedora Asahi Remix - 애플 실리콘 맥을 위한 가장 세련된 리눅스

     * Fedora Linux 39 + Apple Silicon
     * 모든 M1/M2 시리즈 맥북/맥미니/맥스튜디오/iMac 기기 지원
     * 맥에서 curl https://alx.sh | sh 입력만으로 설치 가능
     * KDE Plasma 를 데스크탑 환경으로 사용
          + 야간모드, 트랙패드 설정 변경, 디스플레이 스케일 조정, HiDPI 지원등이 모두 잘 동작
          + 현재는 5.27을 사용하며, Fedora Linux 40 부터는 KDE Plasma 6을 사용 예정
     * GNOME 45도 사용 가능
     * 100% Wayland 환경 지원
     * GPU 가속 지오메트리 쉐어 및 트랜스폼 피드백을 포함한 비규격 OpenGL 3.3 지원
     * 애플 실리콘용으로는 유일하게 인증된 OpenGL ES 3.1 구현도 포함
     * 최고의 리눅스 랩탑 오디오 : 별도의 설정없이 바로 이용 가능
          + PipeWire 및 WirePlumber와 협력하여 완전 자동 및 투명 DSP 구성 지원을 추가
          + 자체개발한 Bankstown 베이스 부스트 기술과 오픈소스 Smart Amp 구현으로 Full Loudness 및 Dynamic Range 를 안전하게 제공
          + DSP 처리의 전력 소비 및 스케줄링을 최적화 하여 오디오 재생시에 뛰어난 배터리 수명을 실현
     * 디바이스 지원
          + 칩 : M1 / M2
          + 지원 기능 : 디스플레이, 키보드(+백라이트), 트랙패드, 헤드셋 잭, 스피커, 카메라, MagSafe(M2만), USB Type C(USB 3.0), Wi-Fi, BlueTooth
          + 아직 미지원 : USB-C 디스플레이, Thunderbolt/USB4, 마이크, TouchID

   m1 맥미니 중고하나 사서 리눅스 서버로 사용해 봐야겠군요. 가성비 전성비 쩌는 리눅스 서버가 될 듯.

   m1 mac mini가 한때 할인하면 $299까지 신품이 풀리기도 했었는데, 이제는 중고도 이거보다 비싸더군요. 아직도 쓸만해서인지, 싼가격에 풀리지가 않네요

   저도 이거 보자마자 맥미니로 nas/홈서버 구축해야 하나 생각이 들었습니다.
   10기가랜 달린 맥미니 중고를 노려봐야겠네요. +_+

   맥북에 멀티 OS로 사용 가능한가요? 한번도 해본적이 없어서...

   저 curl 스크립트를 사용하면, 기존 macOS 파티션을 리사이즈해서 줄인 뒤에 별도 파티션을 더 만들게 되고요.
   그 다음엔 재부팅하면서 그 파티션에 Asahi 리눅스를 셋업하게됩니다. 설치가 끝나면 기본으로 리눅스 부팅이 되지만, 파워온시에 파워 버튼을 계속 누르고 있으면 OS 선택창이 나와서 기존 macOS 부팅도 가능하게 됩니다.

   스크립트로 파티션 까지 나눠서 설치가 되는거였군요...정말 감사합니다!

   당장은 아닌데, 혹시나 제 M1 노트북이 은퇴?하고 M3+등으로 바꾸게 되면 가장 고려해볼만한 옵션인 것 같아요.
"
"https://news.hada.io/topic?id=12384","[2023/12/11 ~ 12/17] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    [2023/12/11 ~ 12/17] 이번 주의 주요 ML 논문 (Top ML Papers of the Week)

  개요

     * DAIR.AI에서 매주 공개하는 ML 논문들에 대한 글을 자동 번역해보았습니다.
     * 이번 주에 선택된 논문들을 살펴보면, 'LLM(Large Language Models)'에 대한 연구가 주를 이루고 있다는 점이 눈에 띕니다. 구체적으로, 수학 분야에 있어서의 발견, 일반화 문제, 의학 분야의 적용, 인간 데이터를 넘어서는 학습 방법 등 다양한 주제에 걸쳐 LLM의 활용도와 성능 향상에 대한 분석이 진행된 것으로 보입니다.
     * 이러한 경향은 최근 몇 년간 인공지능 분야에서 LLM의 발전이 주목받고 있음을 반영합니다. 특히, OpenAI의 GPT-3 같은 대형 언어 모델이 등장하면서 이 모델들이 다양한 분야에 적용될 수 있는 가능성이 크게 확장되었습니다. 이는 LLM가 단순한 텍스트 처리를 넘어서 복잡한 문제 해결에 있어서도 중요한 역할을 할 수 있음을 시사하며, 이번 주 논문들에서 수학과 의학이라는 전통적인 분야에까지 영향력을 확장하고 있는 것으로 보입니다. 또한, 투명성과 개방성을 중시하는 추세는 연구 및 응용 분야에 있어서의 신뢰성과 협력의 중요성을 강조하고 있습니다.
     * 또한 'Weak-to-strong Generalization'이나 'Beyond Human Data for LLMs' 같은 논문들은 LLM의 일반화 능력과 학습 방법론에 대한 연구를 시사하며, 이는 현재 LLM가 갖고 있는 제한적인 학습 환경에서 벗어나 보다 강력한 학습 메커니즘을 개발하려는 시도로 볼 수 있습니다. 이러한 추세는 LLM 연구가 단순히 성능 향상에 주력하는 것을 넘어서 모델의 일반화 능력과 효용성을 획기적으로 증진시키고자 하는 방향으로 진행되고 있음을 나타내고 있습니다.


  수리 과학 분야의 발견을 위한 LLM / LLMs for Discoveries in Mathematical Sciences

    논문 소개

     * 수학 및 컴퓨터 과학에서 새로운 해법을 찾기 위해 LLM을 사용, 사전 학습된 LLM과 체계적인 평가자를 결합하고 이를 반복하여 낮은 점수를 받은 프로그램을 새로운 지식을 발견하는 높은 점수의 프로그램으로 발전시키는 펀서치(funsearch) 제안, 수학적 발견 및 기타 실제 문제를 해결하기 위해서는 LLM 환각으로부터 보호하는 것이 중요하다는 것이 이 연구의 핵심 결과 중 하나입니다.

     Uses llms to search for new solutions in mathematics & computer science; proposes funsearch which combines a pre-trained llm with a systematic evaluator and iterates over them to evolve low-scoring programs into high-scoring ones discovering new knowledge; one of the key findings in this work is that safeguarding against llm hallucinations is important to produce mathematical discoveries and other real-world problems.

    논문 링크

   https://www.nature.com/articles/s41586-023-06924-6

    더 읽어보기

   https://x.com/GoogleDeepMind/status/1735332722208284797


  약 대 강 일반화 / Weak-to-strong Generalization

    논문 소개

     * 약한 모델 감독이 더 강한 모델의 모든 기능을 이끌어낼 수 있는지 연구하고, 약한 모델이 생성한 레이블에 대해 강력한 사전 학습 모델을 순진하게 미세 조정하면 약한 감독자보다 더 나은 성능을 낼 수 있음을 발견하고, GPT-2 수준의 감독자로 GPT-4를 미세 조정하면 NLP 작업에서 GPT-3.5 수준에 가까운 성능을 회복할 수 있음을 보고합니다.

     Studies whether weak model supervision can elicit the full capabilities of stronger models; finds that when naively fine-tuning strong pretrained models on weak model generated labels they can perform better than their weak supervisors; reports that finetuning gpt-4 with a gpt-2-level supervisor it’s possible to recover close to gpt-3.5-level performance on nlp tasks.

    논문 링크

   https://cdn.openai.com/papers/weak-to-strong-generalization.pdf

    더 읽어보기

   https://x.com/OpenAI/status/1735349718765715913
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  오디오 박스 / Audiobox

    논문 소개

     * 다양한 오디오 모달리티를 생성할 수 있는 플로우 매칭 기반의 통합 모델, 설명 기반 및 예제 기반 프롬프트를 설계하여 제어 가능성을 높이고 음성 및 사운드 생성 패러다임을 통합, 레이블이 없는 대량의 오디오를 사전 학습할 수 있도록 자체 감독 인필 목표를 조정, 음성 및 사운드 생성 성능이 우수하고 새로운 보컬 및 음향 스타일로 오디오를 생성하는 새로운 방법의 잠금 해제.

     A unified model based on flow-matching capable of generating various audio modalities; designs description-based and example-based prompting to enhance controllability and unify speech and sound generation paradigms; adapts a self-supervised infilling objective to pre-train on large quantities of unlabeled audio; performs well on speech and sound generation and unlocks new methods for generating audio with novel vocal and acoustic styles.

    논문 링크

   https://ai.meta.com/research/publications/…

    더 읽어보기

   https://x.com/AIatMeta/status/1734257634008531453


  수학적 언어 모델: 설문 조사 / Mathematical Language Models: A Survey

    논문 소개

     * 수학적 과제에 대한 LLM의 진행 상황에 대한 설문조사, 수학 단어 문제 풀이 및 정리 증명과 같은 프롬프트 기법 및 과제에 관한 LLM 연구에 대한 논문과 리소스를 다룹니다.

     A survey on the progress of llms on mathematical tasks; covers papers and resources on llm research around prompting techniques and tasks such as math word problem-solving and theorem proving.

    논문 초록

     * 최근 몇 년 동안 수학 영역에서 사전 학습 언어 모델(PLM)과 대규모 언어 모델(LLM)을 아우르는 언어 모델(LM)을 활용하는 데 괄목할 만한 발전이 있었습니다. 이 논문에서는 수학적 LM에 대한 포괄적인 조사를 실시하여 중추적인 연구 노력을 과제와 방법론이라는 두 가지 관점에서 체계적으로 분류합니다. 그 결과 수많은 수학적 LM이 제안되었으며, 이를 다시 교수법 학습, 도구 기반 방법, 기본 CoT 기법, 고급 CoT 방법론으로 세분화하여 살펴볼 수 있었습니다. 또한 이 설문조사에는 학습 데이터세트, 벤치마크 데이터세트, 증강 데이터세트를 포함한 60개 이상의 수학 데이터세트를 수집하는 작업이 수반됩니다. 수학적 LM 분야의 주요 과제를 해결하고 미래의 궤적을 묘사하는 이 설문조사는 이 분야를 발전시키는 데 투자하는 연구자들 사이에서 미래의 혁신을
       촉진하고 영감을 줄 수 있는 귀중한 자료로 자리매김하고 있습니다.

     In recent years, there has been remarkable progress in leveraging Language Models (LMs), encompassing Pre-trained Language Models (PLMs) and Large-scale Language Models (LLMs), within the domain of mathematics. This paper conducts a comprehensive survey of mathematical LMs, systematically categorizing pivotal research endeavors from two distinct perspectives: tasks and methodologies. The landscape reveals a large number of proposed mathematical LLMs, which are further delineated into instruction learning, tool-based methods, fundamental CoT techniques, and advanced CoT methodologies. In addition, our survey entails the compilation of over 60 mathematical datasets, including training datasets, benchmark datasets, and augmented datasets. Addressing the primary challenges and delineating future trajectories within the field of mathematical LMs, this survey is positioned as a valuable resource, poised to facilitate and inspire future innovation among researchers invested in
     advancing this domain.

    논문 링크

   https://arxiv.org/abs/2312.07622

    더 읽어보기

   https://x.com/omarsar0/status/1735323577392542084


  LLM360: 완전히 투명한 오픈소스 LLM을 향한 여정 / LLM360: Towards Fully Transparent Open-Source LLMs

    논문 소개

     * 엔드투엔드 머신러닝 학습 프로세스를 투명하고 재현 가능하게 만들어 개방적이고 협업적인 AI 연구를 지원하는 LLM360을 제안하고, 학습 코드, 데이터, 중간 체크포인트 및 분석을 포함하여 처음부터 미리 학습된 7b 파라미터 머신러닝, 앰버 및 크리스탈코더를 출시합니다.

     Proposes llm360 to support open and collaborative ai research by making the end-to-end llm training process transparent and reproducible; releases 7b parameter llms pre-trained from scratch, amber and crystalcoder, including their training code, data, intermediate checkpoints, and analyses.

    논문 초록

     * 최근 LLaMA, 팔콘, 미스트랄과 같은 오픈소스 대규모 언어 모델(LLM)이 급증하면서 AI 실무자와 연구자에게 다양한 옵션이 제공되고 있습니다. 그러나 대부분의 LLM은 최종 모델 가중치나 추론 코드와 같은 부분적인 아티팩트만 공개하고 있으며, 기술 보고서는 점점 더 높은 수준의 설계 선택과 표면 통계로 범위를 제한하고 있습니다. 이러한 선택은 LLM 학습에 대한 투명성을 떨어뜨리고 학습 과정에서 팀이 많은 세부 사항을 다시 발견하도록 함으로써 현장의 발전을 저해합니다. 유니티는 모든 학습 코드와 데이터, 모델 체크포인트, 중간 결과를 커뮤니티에 공개하는 LLM의 완전한 오픈소스화를 위한 이니셔티브인 LLM360을 발표했습니다. LLM360의 목표는 모든 사람이 엔드투엔드 LLM 학습 과정을 투명하고 재현 가능하게 만들어 개방적이고 협력적인 AI 연구를
       지원하는 것입니다. 유니티는 LLM360의 첫 번째 단계로 학습 코드, 데이터, 중간 체크포인트 및 분석을 포함하여 처음부터 미리 학습된 두 개의 7B 파라미터 LLM인 Amber와 CrystalCoder를 공개합니다(https://www.llm360.ai). 유니티는 이러한 오픈소스 노력을 통해 LLM의 한계를 지속적으로 확장하기 위해 최선을 다하고 있습니다. 더 크고 강력한 모델이 개발 중이며 향후 출시될 예정입니다.

     The recent surge in open-source Large Language Models (LLMs), such as LLaMA, Falcon, and Mistral, provides diverse options for AI practitioners and researchers. However, most LLMs have only released partial artifacts, such as the final model weights or inference code, and technical reports increasingly limit their scope to high-level design choices and surface statistics. These choices hinder progress in the field by degrading transparency into the training of LLMs and forcing teams to rediscover many details in the training process. We present LLM360, an initiative to fully open-source LLMs, which advocates for all training code and data, model checkpoints, and intermediate results to be made available to the community. The goal of LLM360 is to support open and collaborative AI research by making the end-to-end LLM training process transparent and reproducible by everyone. As a first step of LLM360, we release two 7B parameter LLMs pre-trained from scratch, Amber and
     CrystalCoder, including their training code, data, intermediate checkpoints, and analyses (at https://www.llm360.ai). We are committed to continually pushing the boundaries of LLMs through this open-source effort. More large-scale and stronger models are underway and will be released in the future.

    논문 링크

   https://arxiv.org/abs/2312.06550

    더 읽어보기

   https://x.com/omarsar0/status/1734591071575744820


  의학 분야의 대규모 언어 모델에 대한 조사: 원리, 응용 및 과제 / A Survey of Large Language Models in Medicine: Principles, Applications, and Challenges

    논문 소개

     * 의학 분야의 머신러닝에 대한 종합적인 설문조사(300개 이상의 논문 분석)로, 의학 분야의 머신러닝이 직면한 원칙, 적용, 과제에 대한 개요를 포함합니다.

     A comprehensive survey (analyzing 300+ papers) on llms in medicine; includes an overview of the principles, applications, and challenges faced by llms in medicine.

    논문 초록

     * ChatGPT와 같은 대규모 언어 모델(LLM)은 인상적인 인간 언어 이해 및 생성 능력으로 인해 상당한 주목을 받고 있습니다. 따라서 의사와 환자 치료를 지원하기 위해 의학 분야에서 LLM을 적용하는 것은 인공지능과 임상 의학 모두에서 유망한 연구 방향으로 떠오르고 있습니다. 이러한 추세를 반영하여 본 설문조사에서는 의학 분야에서의 인공신경망의 원리, 응용, 그리고 직면한 과제에 대한 포괄적인 개요를 제공합니다. 특히 다음과 같은 질문을 다루고자 합니다: 1) 의료용 LLM은 어떻게 구축될 수 있는가? 2) 의학 LLM의 다운스트림 성과는 무엇인가요? 3) 실제 임상에서 의료용 LLM을 어떻게 활용할 수 있을까요? 4) 의료용 LLM을 사용하면서 어떤 문제가 발생하는가? 5) 어떻게 하면 의료용 LLM을 더 잘 구축하고 활용할 수 있는가? 결과적으로 이 설문조사는 의학
       분야에서 LLM의 기회와 도전 과제에 대한 인사이트를 제공하고 실용적이고 효과적인 의학 LLM을 구축하기 위한 귀중한 자료로 활용하고자 합니다. 의학 LLM에 관한 실용적인 가이드는 정기적으로 업데이트되는 목록은 https://github.com/AI-in-Health/MedLLMsPracticalGuide 에서 확인할 수 있습니다.

     Large language models (LLMs), such as ChatGPT, have received substantial attention due to their impressive human language understanding and generation capabilities. Therefore, the application of LLMs in medicine to assist physicians and patient care emerges as a promising research direction in both artificial intelligence and clinical medicine. To reflect this trend, this survey provides a comprehensive overview of the principles, applications, and challenges faced by LLMs in medicine. Specifically, we aim to address the following questions: 1) How can medical LLMs be built? 2) What are the downstream performances of medical LLMs? 3) How can medical LLMs be utilized in real-world clinical practice? 4) What challenges arise from the use of medical LLMs? and 5) How can we better construct and utilize medical LLMs? As a result, this survey aims to provide insights into the opportunities and challenges of LLMs in medicine and serve as a valuable resource for constructing
     practical and effective medical LLMs. A regularly updated list of practical guides on medical LLMs can be found at https://github.com/AI-in-Health/MedLLMsPracticalGuide.

    논문 링크

   https://arxiv.org/abs/2311.05112

    더 읽어보기

   https://x.com/omarsar0/status/1734599425568231513
     __________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

  휴먼 데이터 그 이상: 언어 모델로 문제 해결을 위한 자가 학습 확장하기 / Beyond Human Data: Scaling Self-Training for Problem-Solving with Language Models

    논문 소개

     * 사람이 생성한 데이터에 대한 의존도를 크게 줄일 수 있는 피드백을 통한 자가 학습 접근 방식을 제안하고, 모델 생성 데이터와 보상 기능을 결합하여 문제 해결 작업에서 머신러닝의 성능을 향상시킵니다.

     Proposes an approach for self-training with feedback that can substantially reduce dependence on human-generated data; the model-generated data combined with a reward function improves the performance of llms on problem-solving tasks.

    논문 초록

     * 사람이 생성한 데이터에 대해 언어 모델(LM)을 미세 조정하는 것은 여전히 널리 사용되고 있습니다. 그러나 이러한 모델의 성능은 고품질의 인간 데이터의 양과 다양성에 의해 제한되는 경우가 많습니다. 이 논문에서는 스칼라 피드백에 액세스할 수 있는 작업, 예를 들어 정답을 확인할 수 있는 수학 문제에서 인간 데이터를 뛰어넘을 수 있는지 살펴봅니다. 이를 위해 (1) 모델에서 샘플을 생성하고 이진 피드백을 사용해 필터링한 다음, (2) 이 샘플에 대해 모델을 미세 조정하고 (3) 이 과정을 몇 차례 반복하는 기대 최대화에 기반한 간단한 자가 학습 방법, 즉 ReST $^{EM}$ 을 살펴봅니다. PaLM-2 모델을 사용하여 고급 수학 추론 및 앱 코딩 벤치마크를 테스트한 결과, ReST $^{EM}$ 는 모델 크기에 따라 유리하게 확장되며 인간 데이터에 대해서만 미세 조정하는 것보다
       훨씬 뛰어나다는 것을 발견했습니다. 전반적으로 이번 연구 결과는 피드백을 통한 자가 학습이 사람이 생성한 데이터에 대한 의존도를 크게 줄일 수 있음을 시사합니다.

     Fine-tuning language models(LMs) on human-generated data remains a prevalent practice. However, the performance of such models is often limited by the quantity and diversity of high-quality human data. In this paper, we explore whether we can go beyond human data on tasks where we have access to scalar feedback, for example, on math problems where one can verify correctness. To do so, we investigate a simple self-training method based on expectation-maximization, which we call ReST $^{EM}$, where we (1) generate samples from the model and filter them using binary feedback, (2) fine-tune the model on these samples, and (3) repeat this process a few times. Testing on advanced MATH reasoning and APPS coding benchmarks using PaLM-2 models, we find that ReST $^{EM}$ scales favorably with model size and significantly surpasses fine-tuning only on human data. Overall, our findings suggest self-training with feedback can substantially reduce dependence on human-generated data.

    논문 링크

   https://arxiv.org/abs/2312.06585

    더 읽어보기

   https://x.com/omarsar0/status/1734953578274386002


  가우시안 슬램 / Gaussian-SLAM

    논문 소개

     * 속도와 효율성을 저하시키지 않으면서 실제 장면을 사실적으로 재구성할 수 있는 뉴럴 RGBD 슬램 방식은 기존 방식의 한계를 극복하기 위해 장면 표현을 위한 고전적인 3D 가우시안 방식을 확장한 것입니다.

     A neural rgbd slam method capable of photorealistically reconstructing real-world scenes without compromising speed and efficiency; extends classical 3d gaussians for scene representation to overcome the limitations of the previous methods.

    논문 링크

   https://vladimiryugay.github.io/gaussian_slam/

    더 읽어보기

   https://x.com/vlyug/status/1734683948440252480


  Pearl: 프로덕션에 바로 적용 가능한 강화 학습 에이전트 / Pearl: A Production-ready Reinforcement Learning Agent

    논문 소개

     * 연구자와 실무자가 관찰 가능성이 제한적이고 피드백이 희박하며 확률성이 높은 환경에 적응하는 인공지능 에이전트를 개발할 수 있는 새로운 프로덕션 지원 인공지능 에이전트 소프트웨어 패키지를 소개합니다.

     Introduces a new production-ready rl agent software package that enables researchers and practitioners to develop rl ai agents that adapt to environments with limited observability, sparse feedback, and high stochasticity.

    논문 초록

     * 강화 학습(RL)은 장기적인 목표 달성을 위한 다용도 프레임워크를 제공합니다. 이러한 범용성 덕분에 지연된 보상 처리, 부분적인 관찰 가능성 처리, 탐색 및 착취 딜레마 해결, 온라인 성능 향상을 위한 오프라인 데이터 활용, 안전 제약 조건 충족 보장 등 실제 지능형 시스템이 직면하는 광범위한 문제를 공식화할 수 있습니다. 이러한 문제를 해결하기 위해 RL 연구 커뮤니티에서 상당한 진전을 이루었음에도 불구하고, 기존의 오픈소스 RL 라이브러리는 RL 솔루션 파이프라인의 일부에만 집중하고 다른 측면은 거의 방치하는 경향이 있습니다. 이 논문에서는 이러한 문제를 모듈식 방식으로 수용하도록 명시적으로 설계된 프로덕션 지원 RL 에이전트 소프트웨어 패키지인 Pearl을 소개합니다. 이 논문에서는 예비 벤치마크 결과를 제시할 뿐만 아니라 Pearl의
       업계 채택 사례를 통해 실제 사용 준비가 완료되었음을 보여줍니다. Pearl은 Github에서 github.com/facebookresearch/pearl 로 오픈소스화되어 있으며, 공식 웹사이트는 pearlagent.github.io 에 있습니다.

     Reinforcement Learning (RL) offers a versatile framework for achieving long-term goals. Its generality allows us to formalize a wide range of problems that real-world intelligent systems encounter, such as dealing with delayed rewards, handling partial observability, addressing the exploration and exploitation dilemma, utilizing offline data to improve online performance, and ensuring safety constraints are met. Despite considerable progress made by the RL research community in addressing these issues, existing open-source RL libraries tend to focus on a narrow portion of the RL solution pipeline, leaving other aspects largely unattended. This paper introduces Pearl, a Production-ready RL agent software package explicitly designed to embrace these challenges in a modular fashion. In addition to presenting preliminary benchmark results, this paper highlights Pearl's industry adoptions to demonstrate its readiness for production usage. Pearl is open sourced on Github at
     github.com/facebookresearch/pearl and its official website is located at pearlagent.github.io.

    논문 링크

   https://arxiv.org/abs/2312.03814

    더 읽어보기

   https://x.com/ZheqingZhu/status/1732880717263352149


  Quip / Quip

    논문 소개

     * 학습된 모델 가중치를 낮은 정밀도 형식으로 압축하여 메모리 요구 사항을 줄이고, 격자 코드북과 비일관성 처리를 결합하여 2비트 양자화 모델을 생성하며, 2비트 양자화 LLM와 비정량화 16비트 모델 간의 격차를 크게 줄입니다.

     Compresses trained model weights into a lower precision format to reduce memory requirements; the approach combines lattice codebooks with incoherence processing to create 2 bit quantized models; significantly closes the gap between 2 bit quantized llms and unquantized 16 bit models.

    논문 링크

   https://cornell-relaxml.github.io/quip-sharp/

    더 읽어보기

   https://x.com/tsengalb99/status/1733222467953422702


  원문

   https://nlp.elvissaravia.com/p/top-ml-papers-of-the-week-c22
"
"https://news.hada.io/topic?id=12427","제임스 웹 우주 망원경, 고해상도의 천왕성 이미지 포착","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     제임스 웹 우주 망원경, 고해상도의 천왕성 이미지 포착

우라노스의 새로운 모습

     * 보이저 2호가 1986년 우라노스를 지나갔을 때, 이 행성은 거의 특징 없는 단단한 푸른 공처럼 보였음.
     * 웹 망원경은 우라노스의 적외선 이미지를 통해 훨씬 더 역동적이고 흥미로운 모습을 보여줌.
     * 새로운 이미지에는 우라노스의 고리, 위성, 폭풍, 밝은 북극 모자가 포함되어 있음.

우라노스 클로즈업 (NIRCam 이미지)

     * NASA의 제임스 웹 우주 망원경은 최근 특이하고 수수께끼 같은 우라노스, 즉 옆으로 회전하는 얼음 거인을 관찰함.
     * 웹은 이 역동적인 세계를 고리, 위성, 폭풍 및 기타 대기 특징과 함께 포착함.
     * 이전에 발표된 두 가지 색상의 이미지를 확장하여 추가적인 파장 범위를 포함시켜 더 자세한 모습을 제공함.

우라노스의 독특한 특징

     * 웹의 뛰어난 감도로 우라노스의 희미한 내부 및 외부 고리를 포착함.
     * 행성에 가장 가까운 매우 희미하고 확산된 제타 고리를 포함하여 우라노스의 27개 알려진 위성 중 많은 것들을 이미지화함.
     * 웹은 적외선 파장에서 이상하고 역동적인 얼음 세계로 가득 찬 우라노스를 드러냄.

북극 모자와 폭풍

     * 가장 눈에 띄는 특징 중 하나는 계절적인 북극 구름 모자임.
     * 올해 초 웹 이미지와 비교하여, 새로운 이미지에서는 모자의 일부 세부 사항이 더 쉽게 보임.
     * 북극 모자의 남쪽 경계 근처와 아래쪽에서 여러 밝은 폭풍도 관찰됨.

계절과 기상 효과

     * 우라노스가 다음 해맞이를 맞이하는 2028년에 천문학자들은 행성 대기에서 변화를 관찰할 예정임.
     * 웹은 우라노스의 폭풍에 영향을 미치는 계절적 및 기상 효과를 분리하는 데 도움을 줄 것임.
     * 우라노스는 약 98도의 기울기로 옆으로 회전하여 태양계에서 가장 극단적인 계절을 가짐.

우라노스의 중요성

     * 웹의 비교할 수 없는 적외선 해상도와 감도로 천문학자들은 우라노스와 그 독특한 특징들을 새로운 명확성으로 볼 수 있음.
     * 이 세부 사항들은 특히 가까운 제타 고리에 대해 미래 우라노스 임무 계획에 매우 중요함.
     * 우라노스는 지난 수십 년 동안 발견된 거의 2,000개의 비슷한 크기의 외계 행성을 연구하는 데 대리자 역할을 할 수 있음.

GN⁺의 의견

     * 제임스 웹 우주 망원경의 최신 우라노스 관측은 태양계 내에서 독특한 행성의 복잡한 대기와 계절적 변화를 이해하는 데 중요한 역할을 함.
     * 이러한 관측은 미래의 우라노스 탐사 임무 계획에 필수적인 정보를 제공하며, 외계 행성 연구에도 중요한 기여를 할 수 있음.
     * 웹 망원경은 우리 태양계를 더 큰 우주 맥락 속에서 이해하는 데 도움을 주는 선도적인 우주 과학 관측소임.

        Hacker News 의견

     *
          + Voyager 2가 1986년에 찍은 천왕성의 고해상도 진짜 색상 사진이 있지만, 그 사진에서는 천왕성의 고리를 볼 수 없음.
     *
          + 천왕성의 고리 존재를 몰랐던 사람이 많았으며, 멀리 떨어진 행성의 특징, 예를 들어 폭풍을 식별할 수 있다는 사실이 매우 만족스러움.
     *
          + 천왕성은 태양계 평면에 대해 옆으로 누워있으며, 그 위성들도 같은 방식으로 궤도를 돌고 있음. 천왕성 위성들에게 태양의 움직임은 매우 이색적일 것임.
     *
          + 천왕성의 고리가 적외선 때문에 두드러지게 보이는지, 가까이에서 보면 가시광선에서도 그렇게 보일지 궁금함. 이 고리들은 토성의 고리와 경쟁할 수 있을 정도로 보임.
     *
          + 원본 이미지에서 잘려 나온 특집 이미지보다 넓은 샷을 선호함.
          + NASA 사이트의 이미지 설명: 제임스 웹 우주 망원경의 NIRCam (근적외선 카메라)으로 찍은 천왕성 이미지는 행성과 그 고리를 새로운 명확성으로 보여줌. 행성의 계절적 북극 모자는 밝은 흰색으로 빛나며, 웹의 뛰어난 감도는 천왕성의 희미한 내부 및 외부 고리를 해결하며, 행성에 가장 가까운 매우 희미하고 확산된 제타 고리를 포함함.
          + 이 웹 이미지는 천왕성의 27개 위성 중 14개를 보여줌: 오베론, 티타니아, 움브리엘, 줄리엣, 퍼디타, 로잘린드, 퍽, 벨린다, 데스데모나, 크레시다, 아리엘, 미란다, 비앙카, 포샤.
          + 천왕성의 하루는 약 17시간이므로 행성의 회전은 상대적으로 빠름. 이는 웹과 같은 날카로운 눈을 가진 관측소에게 전체 행성의 단순한 이미지를 캡처하기가 매우 어렵게 만듦 - 폭풍과 기타 대기 특징, 그리고 행성의 위성들은 몇 분 안에 눈에 띄게 움직임. 이 이미지는 관측 시간 동안의 그러한 작은 변화를 수정하기 위해 여러 긴 및 짧은 노출을 결합함.
          + 웹의 극도의 감도는 배경 은하들을 포착하는데, 대부분은 주황색 얼룩으로 나타나며, 이 시야에서 행성 오른쪽에 두 개의 더 큰, 흐릿한 흰색 은하가 있음.
     *
          + 이 사진은 마치 1980년대 공상 과학 책 표지에서 나온 것 같음.
     *
          + 이 사진에서 천왕성의 각도는 작년에 찍은 해왕성 사진과 비교해 눈에 띄게 다름.
     *
          + 우주에 대해 잘 모르는 사람으로서, 더 많은/고해상도의 사진을 기대했음.
     *
          + 가스 행성으로 유인 임무를 보낼 수 있었으면 좋겠음. 천왕성과 해왕성은 매우 신비롭고 아름다운 세계이며, 직접 눈으로 가까이서 보고 싶음. 그 이미지가 얼마나 희미할지라도.
          + 생태계 붕괴를 넘어서면 언젠가 사람들이 직접 대관람차 여행을 할 수 있을지도 모름. (목성, 토성, 천왕성, 해왕성)
     *
          + 이 사진에서 놀라운 점은 그 안에 보이는 많은 은하들임. 이 특정 사진에는 수백 개가 있을 것이며, ""허블 딥 필드"" 각각에는 보이는 은하들 사이에 수천 개가 있을 것임.
          + 원래의 허블 딥 필드 이미지는 별로 감동을 주지 않았지만, 이 사진은 그랬음. 아마도 밤하늘에 얼마나 많은 허블 딥 필드가 있는지 상상하는 데 도움이 되었기 때문일 것임.
"
"https://news.hada.io/topic?id=12370","머신 러닝을 위한 머신 러닝 기술의 발전","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         머신 러닝을 위한 머신 러닝 기술의 발전

ML 컴파일러의 최적화

     * ML 컴파일러는 사용자가 작성한 프로그램을 실제 하드웨어에서 실행할 수 있는 명령어로 변환하는 소프트웨어 루틴임.
     * ML 프로그램은 계산 그래프로 표현될 수 있으며, 노드는 텐서 연산을, 엣지는 텐서 흐름을 나타냄.
     * ML 컴파일러는 그래프 수준과 커널 수준 최적화를 포함한 다양한 복잡한 최적화 문제를 해결해야 함.

TpuGraphs 데이터셋

     * ML 모델의 효율성을 높이기 위해 ML 컴파일러를 개선하는 것을 목표로 함.
     * 학습된 비용 모델을 컴파일러에 장착하여 프로그램과 컴파일러 구성을 입력받고 프로그램의 예상 실행 시간을 출력함.
     * TpuGraphs 데이터셋은 Google의 사용자 정의 Tensor Processing Units(TPUs)에서 실행되는 프로그램에 대한 학습 비용 모델을 위해 출시됨.

Kaggle 경진대회

     * TpuGraph 데이터셋을 사용한 ""Fast or Slow? Predict AI Model Runtime"" 경진대회가 792명의 참가자와 616개 팀이 참여하여 종료됨.
     * 참가자들은 그래프 가지치기/압축, 특징 패딩 값, 노드 특징, 교차 구성 주의 등 다양한 새로운 기술을 사용함.

NeurIPS 엑스포

     * 구조화된 데이터와 인공지능에 대한 연구에 관심이 있다면, 12월 9일에 개최된 NeurIPS Expo 패널 ""Graph Learning Meets Artificial Intelligence""를 주목할 것.

GN⁺의 의견

     * ML 컴파일러의 최적화는 ML 모델의 실행 속도와 효율성을 크게 향상시킬 수 있는 중요한 분야임.
     * TpuGraphs 데이터셋과 같은 자원은 ML 기반 프로그램 최적화 연구를 촉진하고, ML 시스템의 성능을 개선하는 데 기여함.
     * Kaggle 경진대회는 ML 커뮤니티의 협력과 혁신을 촉진하는 플랫폼으로, 참가자들이 새로운 접근 방식과 기술을 공유하고 발전시키는 데 도움을 줌.

        Hacker News 의견

     * ML 컴파일러에 대한 과대평가

     ML 컴파일러들이 과대평가되고 있음. 전통적인 컴파일러와 마찬가지로 트레이드오프가 존재하며, 전문 성능 프로그래머를 고용하는 것보다 처리량은 많지만, 후자가 종종 훨씬 더 높은 성능을 낼 수 있음. ML 컴파일러는 여러 수준에서 열등한데, 알고리즘적으로는 네트워크 수정 방법에 대한 피드백을 제공하지 않고, 의도의 손실이 발생하며, 비효율적인 커널을 생성함. 전문 어셈블리 프로그래머와 비교했을 때 컴파일러의 성능이 30% 이상 떨어짐.
     * ML 컴파일러의 현재 상태와 약속

     ML 컴파일러의 현재 상태와 단기적인 약속에 대한 질문.
     * 계산 그래프의 실행 시간 성능 예측 개선

     GNN을 사용하여 계산 그래프의 실행 시간 성능을 예측하는 방법 개선에 대한 요약. 각 노드의 오퍼레이션 코드에 대한 임베딩 사전과 다른 노드 특성을 사용하며, TPU에서의 다양한 XLA 컴파일 구성과 그에 따른 성능 데이터셋을 공개함. 더 큰 그래프에 대한 예측을 개선하기 위해 그래프 분할(METIS 그래프 분할)과 다른 훈련 방법을 사용함. 이는 성능 예측에만 관련되어 있고, 새로운 동등한 그래프를 개선하거나 제안하는 것은 아님.
     * Gemini 프로젝트에 대한 질문

     Gemini 프로젝트의 현재 상태에 대한 질문.
     * 그래프 내의 합성곱(conv) 작동 방식 설명 요청

     특정 형태의 텐서에 대한 합성곱 연산이 어떻게 이루어지는지에 대한 설명 요청.
     * 트랜스포머에 대한 최적성 여부

     트랜스포머가 어떤 방식으로 최적인지에 대한 징후가 있는지에 대한 질문.
     * 첫 문단에 대한 의견

     첫 문단이 주요 내용을 가리고 있다는 의견이지만, 그 외에는 흥미로운 내용이라는 평가.
     * ML의 발전 속도에 대한 감탄

     ML이 현재 놀라운 속도로 발전하고 있으며, 싱귤래리티를 믿지는 않지만 소프트웨어와 사회를 예측할 수 없는 방식으로 변화시키고 있다는 의견.
     * [플래그된 댓글]

     두 개의 댓글이 플래그되어 내용을 볼 수 없음.
"
"https://news.hada.io/topic?id=12363","인텔 CEO: "전체 산업이 CUDA 시장을 없애려는 동기를 갖고 있다"","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                인텔 CEO: ""전체 산업이 CUDA 시장을 없애려는 동기를 갖고 있다""

인텔 CEO, AI 분야에서 엔비디아의 CUDA 기술 공격

     * 인텔 CEO 팻 겔싱어가 뉴욕 시에서 열린 행사에서 인텔 코어 울트라와 5세대 제온 데이터센터 칩을 발표하며, AI의 추론 기술이 훈련보다 더 중요할 것이라고 주장함.
     * 겔싱어는 엔비디아의 CUDA가 훈련 분야에서 지배적이지만 영원하지 않을 것이라고 언급하며, MLIR, Google, OpenAI 등이 AI 훈련을 더 개방적으로 만들기 위해 '파이썬적 프로그래밍 레이어'로 이동하고 있다고 설명함.
     * 인텔은 훈련 분야뿐만 아니라 추론 분야에서도 경쟁력을 갖추고 있으며, 모델을 잘 실행할 수 있는지가 중요하다고 강조함.

인텔의 AI 전략과 OpenVINO 표준

     * 겔싱어는 OpenVINO 표준을 통해 인텔의 AI 노력을 밀고 나가며, 클라우드와 PC에서 일어나는 혼합 컴퓨팅의 미래를 예측함.
     * 인텔의 데이터센터 및 AI 그룹의 부사장인 산드라 리베라는 인텔이 데이터센터부터 PC까지의 규모를 바탕으로 파트너 선택에 있어 유리할 수 있다고 덧붙임.
     * 겔싱어는 인텔이 리더십 CPU, 가속기, 파운드리로 데이터센터 AI 시장의 100%를 위해 경쟁할 것이라고 말하며, 엔비디아, AMD 등과의 상업적 기회도 추구할 것이라고 언급함.

GN⁺의 의견

     * 인텔 CEO 팻 겔싱어의 발언은 AI 분야에서의 엔비디아 CUDA 기술의 지배력에 도전하는 새로운 시도를 보여줌. 이는 기술 산업 내에서 더 개방적이고 표준화된 접근 방식을 향한 움직임의 일환으로 볼 수 있음.
     * 인텔이 AI의 추론 기술에 중점을 두고 있는 전략은 AI 시장에서의 새로운 경쟁 구도를 예고함. 이는 AI 모델의 효율적인 실행과 활용에 더 큰 가치를 두는 방향으로의 변화를 시사함.
     * OpenVINO와 같은 표준을 통해 인텔이 AI 분야에서 어떻게 자신의 위치를 강화하려고 하는지에 대한 통찰을 제공함. 이는 기술의 민주화와 혁신을 촉진하는 데 기여할 수 있음.

        Hacker News 의견

     * CUDA의 중요성에 대한 논의
          + CUDA는 단순히 칩 생산 속도가 아니라 소프트웨어와 생태계의 문제임. 경쟁사들은 생태계와 경쟁해야 함.
          + 중고 Mi100이 eBay에서 A100과 거의 비슷한 성능을 5배 적은 가격에 제공되지만, 소프트웨어 불일치로 인해 Nvidia GPU에 비해 작동시키는 데 많은 시간이 소요됨.
          + Google은 XLA 인터페이스를 통해 PyTorch와의 호환성을 제공하며, Intel도 비슷한 상황임.
          + 경쟁사들은 모든 모델을 테스트하고 문제를 해결하기 위한 대규모 테스트 스위트를 구축해야 함.
          + Intel은 공개적인 이니셔티브를 발표하고 최소한의 지원만 제공하는 경향이 있으며, OpenVino는 성공하지 못할 가능성이 높음. 반면 OpenAI의 Triton이 더 인기가 있어 보임.
     * NVIDIA의 소프트웨어 엔지니어링 전략
          + NVIDIA의 엔지니어 중 절반 이상이 소프트웨어 엔지니어임. Jensen은 수십 년에 걸쳐 강력한 소프트웨어 스택을 구축함.
          + Intel이 기술적이고 전략적인 CEO를 찾기 전까지는 CUDA에 대한 성공적인 대응을 조직하기 어려울 것임.
     * CUDA 대안에 대한 기대와 현실
          + CUDA보다 나은 도구, 생태계, 프로그래밍 경험을 제공하면 모두에게 이득이 될 것임.
          + 그러나 현재는 OpenCL의 실패와 같은 이전 시도들을 고려할 때, 이러한 주장이 다소 우스운 상황임.
          + Intel과 AMD는 CUDA에 대한 투자에 비해 훨씬 적은 노력을 기울였으며, 그 결과가 실망스러움.
     * CUDA의 진정한 장점에 대한 질문
          + CUDA의 장점은 하드웨어가 아닌 소프트웨어 생태계임.
          + 대부분의 사용자에게는 많은 마이그레이션 비용이 들지 않을 수 있지만, 연구자들과 경계를 넓히는 사람들에게는 그렇지 않을 수 있음.
     * OpenCL 기반의 대응 노력에 대한 비판
          + Intel과 AMD는 OpenCL을 기반으로 유사한 기능을 제공하기 위해 여러 해 동안 시간을 가졌음에도 실패함.
     * CUDA에서 벗어나려는 동기 부족
          + 대부분의 모델과 도구는 여전히 CUDA를 사용하며, AMD NN 미들웨어의 사용은 거의 보이지 않음.
     * Intel과 AMD의 소프트웨어 전략 실패
          + Intel은 지난 10년 동안 아무것도 하지 않았으며, 수십억 달러를 거의 기능하지 않는 GPU에 낭비함.
          + Nvidia는 AI 발전을 돕는 데 성공적으로 투자함.
     * Intel과 AMD의 소프트웨어 전략에 대한 비판
          + Pat Gelsinger와 Lisa Su는 소프트웨어에 대한 이해가 부족하며, 복잡한 하드웨어에 대한 소프트웨어를 커뮤니티에 기대고 있음.
          + Nvidia는 하드웨어와 소프트웨어를 함께 발전시켜왔으며, CUDA 프로그래밍 모델은 오래 전부터 큰 베팅이었음.
          + Intel과 AMD가 근본적인 변화를 하지 않는다면 ARM과 Nvidia에게 패배할 것임.
     * Intel GPU에 대한 기대
          + Nvidia GPU와 동일한 비용으로 성능이 뛰어난 Intel GPU에 PyTorch를 잘 실행할 수 있다면 Intel GPU를 구매할 의향이 있음.
     * CUDA 독점에 대한 비판
          + NVIDIA가 CUDA 독점을 유지하려는 동기는 이해하지만, AMD/Intel/기타 회사들이 기회를 놓친 것도 사실임.
          + 기술적/능력적 장벽이 특정 사용 사례에 대한 사실상의 독점을 유지할 때 소비자가 손해를 보게 됨.
"
"https://news.hada.io/topic?id=12474","제한된 메모리로 효율적인 LLM 추론을 가능하게 하는 'LLM in a Flash'","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             제한된 메모리로 효율적인 LLM 추론을 가능하게 하는 'LLM in a Flash'

NLP 논문 읽기 컬렉션

     * 자연어 처리(NLP)에 관한 논문 읽기 컬렉션은 22개의 항목으로 구성되어 있음.
     * 이 컬렉션은 최근 업데이트되었으며, NLP 분야의 최신 연구 동향을 파악하는 데 유용함.
     * NLP는 인간의 언어를 컴퓨터가 이해하고 처리할 수 있도록 하는 기술로, 기계 번역, 감정 분석, 질의 응답 시스템 등 다양한 응용 분야가 있음.

  GN⁺의 의견

     * 이 컬렉션은 NLP 분야의 최신 연구를 한눈에 볼 수 있는 자료로, NLP에 관심 있는 연구자나 개발자에게 매우 유용할 것임.
     * NLP는 AI 기술 중에서도 특히 빠르게 발전하고 있는 분야로, 이 컬렉션을 통해 최신 트렌드와 혁신적인 아이디어를 접할 수 있음.
     * 자연어 처리 기술은 우리 일상생활에 깊숙이 통합되어 있으며, 이 컬렉션을 통해 그 기술의 발전 방향과 미래의 가능성을 엿볼 수 있음.

        Hacker News 의견

     * 해당 논문을 이해하는 데 시간이 걸렸는데, 이는 'Deja Vu' 논문의 기술을 기반으로 하며, 희소성을 활용하는 복잡한 기법들을 다루고 있기 때문이다:
          + 'Deja Vu' 논문은 낮은 가중치 희소성을 가진 모델들이 높은 ""문맥적 희소성""을 가진다고 관찰함. 즉, 행렬 곱셈이 입력에 따라 다른 위치에 많은 0을 포함한 벡터를 생성함.
          + 논문은 이러한 희소성을 활용해 행렬의 일부 행을 불러오지 않을 수 있음을 지적함.
          + 하지만 좋은 성능 향상을 얻기 위해서는 미리 어떤 행을 건너뛸지 예측할 수 있어야 함. 이는 저차원 행렬로 가능함.
          + 애플의 논문은 이러한 발견이 RAM에서 불러오는 성능을 향상시킬 뿐만 아니라, 플래시 메모리에서 불러오는 것도 대역폭을 희생하지 않고 가능하게 함을 제안함:
               o 주목해야 할 점은 주의(attention) 행렬이 가벼우며, 피드포워드 네트워크(FFN)를 희소하게 불러오는 것이 중요함을 논문이 언급함.
               o ReLU 계층의 출력을 예측하는 것이 FFN의 입력을 예측하는 것보다 훨씬 더 나은 희소성을 얻을 수 있음을 논문이 지적함. 즉, ""matmul 후에 이 벡터 슬롯이 ReLU 전에 음수 값을 가질 것이라고 예측할 수 있다면, 해당 행렬 열을 불러오지 않고 0을 출력할 수 있음""을 의미함.
               o 논문은 대부분의 FFN 행을 전혀 불러올 필요가 없으며, 각 FFN에 대해 최근 사용된 FFN 행의 캐시를 유지하고 필요에 따라 플래시 메모리에서 업데이트할 수 있음을 제안함.
          + 논문에는 청크 로딩과 투영 계층 간의 상관관계에 대한 내용도 있지만, 주요 통찰은 위에서 언급한 부분임.
     * 논문의 결론 부분에서 이 기능이 사용자에게 어떻게 제공될지에 대한 섹션을 찾기를 희망했지만, 아마도 그 논의는 범위를 벗어난 것일 수도 있다.
          + 이러한 기능이 CoreML의 API 호출 및 설정으로 사용자에게 제공되는 것인지, 예를 들어 use_flash 플래그를 설정해야 하는지, 아니면 사용자에게 투명한 런타임 최적화가 되는지 궁금함. 애플이 CoreML, Metal 등의 개발 로드맵에 대해 논의하는 좋은 발표나 프레젠테이션이 있는지 알고 싶음.
     * 모델의 얼마나 많은 부분을 불러오지 않아도 실제 성능 차이를 보기 시작하는지 궁금하다.
          + 예를 들어, RAM에서의 성능의 90%를 유지하고 싶다면, 메모리의 절반만 사용해도 되는지, 아니면 90%나 95%가 필요한지에 대한 질문.
          + RAM을 줄임으로써 최대 성능 대비 성능 손실이 얼마나 빠르게 발생하는지에 대한 궁금증. 차트는 더 적은 RAM을 사용할 경우 기본 알고리즘과 비교하는 것이지만, 이는 다른 (그러나 좋은!) 질문임.
          + 만약 8기가 모델 전체를 휴대폰 메모리에 불러오지 않고도 좋은 성능을 얻을 수 있다면, 이는 분명 매우 유용한 일임.
     * 애플 기기는 경쟁사의 유사한 기기들에 비해 RAM이 매우 적다는 점이 주목할 만하다.
          + 이는 애플의 소프트웨어 팀이 Objective-C와 같은 더 효율적인 언어를 사용하기 때문이기도 하고, iOS 애플리케이션이 다양한 화면 해상도를 대상으로 하지 않아 고해상도 텍스처를 불러온 후 다운스케일링하는 일이 적기 때문이기도 함.
          + 또한 애플 규모에서 RAM을 구매한다고 해서 RAM 가격이 크게 저렴해지지 않으므로, RAM을 늘리는 것은 다른 기능을 추가하는 것보다 마진에 더 큰 영향을 미침.
          + 하지만 이 모든 것이 대규모 언어 모델(LLM)을 사용할 때 문제가 되는데, 이는 본질적으로 RAM을 많이 소모함. 그리고 어떠한 메모리 절약 기술도 더 많은 RAM을 가진 경쟁자가 더 크고 더 나은 모델을 구현하는 데 사용될 수 있음.
     * 주제에 대한 이해가 제한적이지만, 이 기술을 사용하면 모바일 폰에서 오프라인 모드로 LLM을 실행할 수 있는지 궁금하다.
          + 만약 가능하다면, 기밀 데이터를 외부로 전송하지 않고 AI 지원 콘텐츠 모더레이션과 같은 많은 흥미로운 응용 프로그램으로 이어질 수 있음.
     * 최근 기사들이 ""AI"" 대신 ""LLM""이라고 언급하는 것을 높이 평가한다.
          + 그렇게 함으로써 마케팅 하이프가 아닌 구체적인 기술에 대한 것임을 알 수 있음.
     * 이 논문이 FlashAttention을 언급하지 않은 것은 다소 놀랍다.
          + 두 연구 모두 플래시 메모리를 활용하기 때문에, 최소한 언급했어야 할 것으로 보임.
     * 애플이 이란 회사를 인수했나?
     * 예를 들어, OPT 6.7B 모델은 FFN 계층 내에서 97%의 희소성을 보인다고 한다.
          + 여기서 언급된 메트릭이 정확히 무엇을 의미하는지 아는 사람이 있는지 궁금함. 계층에 97%의 0 값이 있는 것을 의미하는지, 아니면 그 크기를 3%로 압축할 수 있다는 것을 의미하는지에 대한 질문.
     * 이 기술이 llama.cpp와 candle에 통합되기를 바란다.
          + 이러한 발전이 매우 놀랍고, 언젠가는 이 라이브러리들에도 적용되기를 희망함.
"
"https://news.hada.io/topic?id=12414",""저렴한" 웹저렴한"" 웹

저렴한 웹 ≠ 무료

     * 좋은 것을 만드는 일은 어렵고 시간이 많이 소요됨.
     * 창작자들이 우리를 위해 좋은 것을 만들어주길 원한다면, 그들의 생활비와 재료비를 지불해야 함.
     * 엔터테인먼트에 시간당 $1 미만을 지출한다면, 창작자와 그들을 지원하는 인프라에 대한 지원 방법을 고려해야 함.

저렴한 웹 ≠ 세련됨

     * 애플 웹사이트의 HTML 소스는 내부적으로 ""아름답지"" 않지만, 애플 엔지니어들을 HTML의 못생김에 대해 탓할 수는 없음.
     * HTML/CSS는 디지털 콘크리트로 조각하는 느낌을 주어야 하지만, 실제로는 익히지 않은 파스타로 다리를 짓는 것 같은 느낌임.
     * 단순하고 안정적인 마크업 언어를 채택하기 전까지는 모든 웹사이트가 비슷하게 보일 것임.
     * 소프트웨어가 너무 복잡해져서 솔직함을 유지하기 어려움.
     * 바르토시 치하노프스키와 같은 사람들이 우아한 미래로 가는 길을 개척하고 있음.

저렴한 웹 ≠ 소름 끼침

     * 미국 중앙지역은 평평하고 비옥하며 바람이 많이 부는 곳임.
     * 텀블위드는 미국에 원래 없던 식물이지만, 와일드 웨스트의 상징이 됨.
     * 월드 와이드 웹은 대규모 인구를 연결하고, 서로 다른 사람들을 개인적으로 멀리하는 광고 수익으로 움직이는 공간임.
     * 소셜 플랫폼은 인터넷을 적대적이고 개인적이지 않은 장소로 변모시킴.
     * 작고 진실된 커뮤니케이션은 조용히 번성하고 있으며, 찾기 쉽고 만들기도 쉬움.

저렴한 웹 ≠ 깊음

     * 스터전의 법칙에 따르면 ""모든 것의 90%는 쓰레기""라고 함.
     * 월드 와이드 웹의 10%는 접근하기 어려움.
     * 스팸, 자바스크립트, 이미지, 접근성, 결제, 임의의 주소, 플랫폼, 임시 보관 등의 문제로 인해 인터넷의 많은 부분이 파손되거나 누락됨.

저렴한 웹 ≠ 어둠

     * NFT는 항상 나쁜 아이디어였을 수 있지만, 암호화폐 커뮤니티는 존경할 만한 목표를 추구함.
     * 글로벌 금융 시스템의 유지자들은 우리를 여러 번 실망시킴.
     * 블록체인이 지속 가능한 기술 미래에서 어떤 역할을 할지는 불분명하지만, 우리가 원하는 편리함과 사생활 보호를 위해 많은 에너지를 낭비할 필요는 없음.

저렴한 웹 = 저렴함

     * 유지비가 저렴해야 함.
     * 웹에서 탈퇴하기 쉬워야 함.
     * 접근성이 좋아야 함.
     * 웹과 상호작용하기 쉬워야 함.
     * 웹 탐색이 즐거워야 함.
     * 웹사이트 제작/호스팅이 스크랩북 만들기보다 쉬워야 함.

    GN⁺의 의견

     * 이 글에서 가장 중요한 것은 웹 디자인과 개발의 접근성과 지속 가능성에 대한 강조임.
     * 저렴한 웹은 단순히 비용이 적게 드는 것을 넘어서, 윤리적이고 진실된 인터넷 환경을 추구하는 철학임.
     * 창작자와 사용자 모두에게 공정하고 지속 가능한 웹 생태계를 만들기 위한 다양한 제안들이 흥미롭고, 이는 기술의 미래와 우리 사회에 중대한 영향을 미칠 수 있음.

        Hacker News 의견

     * 원문자(OP)는 E-ink 스크린과 org/vimwiki/markdown을 원하는 것 같음. 문제는 스타일링에서 시작되는데, 진정으로 접근 가능한 하이퍼텍스트 책을 원한다면 스타일링이 필요 없음. 사용자가 이를 제어해야 하며, 기본 테마는 읽기 쉬운 글꼴, 흰 배경에 검은 글씨, 제목은 36pt 볼드, 문단은 14pt 일반 글씨로 설정됨. 실제 사용에서 Epub은 멋진 포맷이며, 웹사이트가 제안하는 것보다 이러한 ""브라우징"" 경험을 선호함. 또는 OP는 더 높은 수준의 CSS와 HTML을 원할 수도 있는데, 이는 새로운 언어를 만들고 더 복잡한 온톨로지를 주장하는 문제로 이어짐. 물론 기본 스타일링 옵션을 가진 마크다운을 만들 수 있지만, 특정 마크다운을 배우고 운영하여 특정 서버에서 웹사이트를 제공하는 것보다 기본적인 HTML과 CSS를 배우는 것이 그리 복잡하지 않다고 확신함.
     * 웹과 스타일링은 2000년대 웹 스타일링, 다양한 브라우징 장치의 등장, 스마트폰과의 상호작용 방식이 만났을 때 복잡해짐. 오늘날의 브라우저는 거의 OS와 같으며, 공유할 수 있는 복잡성이 1990년대 PC에서 만들 수 있는 복잡성보다 더 높음. 예를 들어, 브라우저에서 Godot 엔진을 실행할 수 있음: 친구들과 재미로 프로젝트 프로토타입을 개발하거나, 좋아하는 사람들과 소통하기 위한 개인 플랫폼을 만들 수 있음. JS에 대한 많은 비판이 있지만, 처음 접했을 때 꿈이 실현된 것 같았고, 경험을 만들고 거의 노력 없이 공유할 수 있는 힘을 줌. 대기업이 지루한 웹사이트를 과도하게 공학화된 프레임워크에서 만들기로 결정했다고 해도 이 사실은 변하지 않음.
     * 웹 개발자가 아니지만, 웹이 문서를 공유하기 위한 수단으로 시작되어 HTML이 그 주위에 구축되었고, 결국 사람들은 일반 애플리케이션(예: Google Docs)을 만들고자 하여 문서가 아닌 것들을 문서인 것처럼 만드는 도구를 만들었음. 모두가 이 도구들이 훌륭하다고 생각하고 사용하기 시작했지만, 웹의 90%는 여전히 문서이지만, 이제는 실제로는 대부분 처음부터 문서를 만들고 있음에도 불구하고 문서가 아닌 것을 만드는 프레임워크에서 모두 구축됨. 전체 상황은 매우 혼란스럽고, 전 세계적인 엔지니어링 문화가 이를 완전히 미친 것으로 보지 않는 것이 이해되지 않음.
     * HTTP 위의 CommonMark를 제안한 사람이 있는지 궁금함. 마크다운을 GET 응답에 넣고 Content-Type: text/markdown으로 설정하면 클라이언트가 렌더링 방식을 결정할 수 있음. 이는 현대적인 Gopher와 같을 것임.
     * 다른 사람들도 내가 느끼는 것을 느낄 때 정말 놀라움. 대부분의 사람들은 신경 쓰지 않고, 신경 쓰고 싶어하지 않음. 페이지의 끔찍한 미학 때문에 주장이 망가짐.
     * 2000년대 초반으로 돌아가서, 어떤 페이지에서든 소스 보기가 매우 깔끔하게 포맷된 코드를 보여주었으면 좋겠음. 많은 회사들이 다양한 이유로 프론트엔드 코드를 고의적으로 난독화하려고 하고, 많은 회사들은 클라이언트의 페이로드 크기와 파싱 시간을 조금이라도 효율적으로 만들기 위해 미니파이를 하면서 의도치 않게 난독화함. 브라우저 수준에서 결정해야 할 것: 클라이언트가 브라우저에서 실행되는 것을 정확히 파악할 수 있게 하고 싶은가? 현재 상황이 좋다면 그렇지 않고, 현재 상황은 매우 암울하며, WASM 기반 페이로드의 등장으로 모든 것 위에 디스어셈블을 해야 함으로 더욱 암울해질 것임.
     * 소프트웨어가 썩어가면서, 다국적 기업이 웹사이트를 만드는 유일한 주체가 될 수 있음. 이미 오픈 소스 소프트웨어가 누구를 위한 것인지 결정하는 주체임. 많은 부자와 그들의 권력이 없으면 많은 가난한 사람들과 그들의 무력함이 없다는 것을 사람들이 가장 깨닫지 못함. 전자의 이해관계는 항상 후자를 효과적으로 약화시킴. 마찬가지로, 다국적 기업과 일반 사람들을 동시에 만족시키는 소프트웨어는 있을 수 없음. 전자의 이해관계는 항상 후자를 효과적으로 약화시킴.
     * 채팅을 위해 분산된 XMPP 서버를 사용해야 하는데, 이는 다른 채팅 옵션과 달리 감자 하드웨어에서도 작동함.
     * 내용이 주로 텍스트이고 이미지가 적게 사용되는 간단한 웹사이트를 탐색하는 것은 상쾌함. 모든 ""현대적인"" 웹사이트는 너무 피곤함. 웹사이트가 첫 방문 시 화면에 무언가를 띄우면, 뉴스레터 가입, 로그인 요청, 뷰포트를 가리는 큰 이미지 등이든, 바로 리더 뷰로 전환함.
     * 대부분의 웹페이지는 무기한으로 작동해야 하며, 유지 관리 비용이 저렴해야 함. 간단한 HTML은 해당 버전의 HTML과 CSS를 지원하는 브라우저가 여전히 존재하는 한 작동함. 정적 Go 바이너리가 동적 HTML을 제공하는 것도 가능함. 하지만 Python, Ruby 등이 이를 달성할 수 있을지는 상상하기 어려움. 즉, 이것이 좋은 규칙인지는 의문이며, 더 달성 가능하게 만들기 위해 재작업이 필요할 수 있음.
     * 2005년에 모든 사람의 페이지가 똑같아 보이기로 우리가 결정했을 때 가치 있는 것이 손실되었다고 생각함(예: TheFacebook™ 프로필). 불행히도, 그것과 Google이 개인 사이트와 같은 결과를 저평가하기 위해 변경한 것이 이러한 멋진 맞춤형 페이지를 거의 파괴함.
"
"https://news.hada.io/topic?id=12441","Beeper 대 Apple 싸움 격화: 의원들, 법무부 조사 요구","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Beeper 대 Apple 싸움 격화: 의원들, 법무부 조사 요구

미국 상원의원들, 애플에 대한 법무부 조사 촉구

     * 양당 소속의 미국 상원의원들이 법무부에 애플의 반경쟁적 행위에 대한 조사를 요청함.
     * 애플은 Beeper Mini와 Beeper Cloud의 iMessage 접근을 여러 날 동안 차단하고 있음.
     * 현재 Beeper 사용자의 60%가 Android용 iMessage 서비스에 접근할 수 없음.

법무부에 보낸 서한

     * 미네소타 주 상원의원 에이미 클로버샤, 유타 주 상원의원 마이크 리, 하원의원 제리 내들러, 하원의원 켄 벅이 서명한 서한이 법무부에 전달됨.
     * 이 서한에서 법 집행 기관에 애플이 Beeper에 대해 행한 잠재적인 반경쟁적 행위가 미국 반독점법을 위반하는지 조사할 것을 촉구함.

Beeper 서비스 중단

     * Beeper Mini와 Beeper Cloud는 애플의 차단 시도로 인해 최근 몇 일간 서비스 중단을 겪고 있음.
     * 이러한 서비스 중단으로 인해 사용자들이 iMessage를 통한 메시지 송수신이 불가능해짐.

법원의 우려

     * 2015년 12월, Beeper의 최고경영자인 에릭 미기코브스키가 상원 법사위원회의 경쟁 정책, 반독점, 소비자 권리 소위원회에서 증언함.
     * 그는 지배적인 메시징 서비스가 상호운용성에 장벽을 만들어 Beeper의 시장 진입과 소비자가 원하는 서비스 제공을 방해할 것을 우려했음.
     * 법원은 애플의 최근 행동이 경쟁을 해치고 소비자 선택을 제거하며, 상호운용 가능한 메시징 서비스에 대한 미래 혁신과 투자를 저해할 것이라고 우려를 표함.

GN⁺의 의견

     * 이 사건은 기술 산업에서의 상호운용성과 반독점법에 대한 중요한 논의를 촉발시킬 수 있는 사례임.
     * 애플과 Beeper 간의 갈등은 플랫폼 소유자가 시장 지배력을 이용해 경쟁을 제한할 수 있는 방법에 대한 더 넓은 논의를 유도함.
     * 이 기사는 소비자의 선택권과 혁신에 대한 중요성을 강조하며, 기술 산업의 미래에 대한 흥미로운 통찰을 제공함.
"
"https://news.hada.io/topic?id=12436","Microsoft가 실수로 microsoft.com 도메인에 192.168.1.1을 등록했습니다","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Microsoft가 실수로 microsoft.com 도메인에 192.168.1.1을 등록했습니다

     * Microsft가 microsft.com 도메인의 DNS를 업데이트 하며 192.168.1.1을 추가함.
     * 만약 192.168.1.1에 라우터 같은 로컬 네트워크가 있는 경우 microsoft.com 접속이 되지 않을 수 있음.
     * 현재 실시간으로 수정 중이지만, 전 세계 모든 DNS 서버에 전파되기 까지는 시간이 소요될 것으로 예상됨.

   가끔 이런 실수를 보며 위안받습니다. 시총 3000조원 짜리 회사도 실수하는데!

   KT DNS 서버에서 조회해보니 아직 192.168.1.0이 들어가 있네요.

   누군가의 실수겠지만, DNS 변경이 미치는 영향은 아주 클 수 있으니 주의가 필요하다고 생각됩니다.
   TTL이랑 전파 시간 덕분에 바로 바로잡기도 어렵고요.
"
"https://news.hada.io/topic?id=12421","네이버의 개인 방송 플랫폼, 치지직 베타 시작","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       네이버의 개인 방송 플랫폼, 치지직 베타 시작

     * 트위치의 한국 사업 종료 발표와 함께 공개된 네이버의 개인 방송 플랫폼인 치지직의 베타가 방금 시작됨.
     * 별도의 프로그램 없이 1080p 60fps 방송 시청 및 vod 다시 보기 지원.
     * 네이버 페이와 연동되어 치즈를 구매하여 방송인에게 후원 가능.
     * 채팅 관리, 연령 제한 등 일부 기능은 추후 개선 예정.
     * 안드로이드와 iOS의 앱도 같이 공개함.
     * 현재 치지직 공식 홈페이지 에서 수천 명 이상이 시청하는 방송을 확인할 수 있음.

   안드로이드 앱으로 방송들 몇개 봤는데 발열이 좀 있더라구요. 코덱이라던지 최적화 문제가 남아있긴 한가봅니다.

   오..

   기본적으로 한국 서비스라 그런지 방송 누르면 바로 로딩되네요.
   네이버 이스포츠도 전용 프로그램이 있어야 1080p 시청이 가능했는데, 웹에서 바로 되는 부분도 마음에 듭니다.

   잘 개선해서 아프리카 대신 치지직이 흥했으면 좋겠습니다.

   솔직히 말해서 치지직이 흥했으면 좋겠다는 것에 대해서는 동의하지 않습니다. 트위치 철수 사태의 근본적인 원인은 결국 CP-ISP 간의 무정산 피어링 관행이 정착되지 못한건데(트위치 네트워크 수수료가 10배 이상인 원인은 다른 나라는 대부분 무정산으로 피어링을 하는데 한국은 그렇지 않기 때문입니다. 트렌짓을 사거나 페이드 피러링을 해야합니다.), 네이버도 무정산 피어링이 정착되지 못한 것에 대한 원인을 직접적 내지 간접적으로 제공했다고 보고 있습니다. 차라리 유튜브 라이브가 흥행으면 좋겠어요.
"
"https://news.hada.io/topic?id=12472","구글 OAuth 일부 기능 장애 발생","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          구글 OAuth 일부 기능 장애 발생

Google OAuth 취약점 발견

     * Google OAuth 취약점이 발견되어, 회사에서 퇴사한 직원들이 Slack, Zoom과 같은 애플리케이션에 무기한 접근할 수 있는 문제가 있음.
     * 이 취약점은 비기술적인 대중도 쉽게 이해하고 악용할 수 있으며, Google은 아직 이 위험을 줄이기 위한 조치를 취하지 않음.
     * 사건의 타임라인은 다음과 같음: 8월 4일 Google에 취약점 공개, 수백 개의 애플리케이션이 영향을 받을 것으로 예상됨. 8월 7일 문제가 분류됨. 10월 5일 Google이 문제에 대해 $1337를 지급함. 11월 25일 Zoom과 Slack을 포함한 수십 개의 영향을 받는 애플리케이션에 대한 대량 사설 공개. 12월 16일 Google에 통보한 지 134일 후에 공개됨.

배경 이야기

     * Truffle Security의 Forager 도구 베타 테스터 중 한 명이 Microsoft OAuth 취약점에 영향을 받는 로그인을 발견하고 공개한 사건이 있었음.
     * Microsoft가 Microsoft에서 생성하거나 검증하지 않은 이메일 주장을 보내고, 이메일 주장 자체가 신뢰할 수 없다는 사실에 놀람.
     * Google의 OIDC 문서에서 이메일을 식별자로 사용하는 것에 대한 경고를 발견함.

Non-Gmail Google 계정

     * Gmail이 아닌 기존 이메일 주소를 사용하여 Google 계정을 생성할 수 있음.
     * 이러한 새로운 Google 계정은 Yahoo 이메일 주장을 보낼 수 있음.
     * Google 문서가 이메일을 주요 식별자로 사용하지 말라고 하는 이유는, 설정에서 비 Gmail 이메일을 편집하고 새 계정이 이전에 편집된 이메일로 생성될 경우, 두 개의 다른 Google 계정이 동일한 이메일 주장을 보낼 수 있기 때문임.

문제가 되는 부분

     * 기업 Google 조직을 통해 이메일 별칭과 이메일 플러스 기호 전달을 사용하여 Google 계정을 생성할 수 있음.
     * 이러한 이메일 주소는 많은 영향을 받는 조직에서 파싱되며, 이메일 끝에 있는 도메인을 사용하여 로그인할 수 있는지 결정함.
     * 이러한 비 Gmail Google 계정은 실제로 Google 조직의 구성원이 아니므로, 관리자 설정이나 사용자 Google 목록에 나타나지 않음.

해결 방안

     * 조직은 Google 로그인을 비활성화하고 SAML을 엄격히 적용하여 스스로를 보호할 수 있음.
     * 서비스 제공업체는 Google 조직 멤버십을 결정하는 방법이 있으나, HD 클레임은 Google 조직의 구성원이 아닌 계정에서는 생략됨.
     * Google은 모든 사람을 위해 이 문제를 광범위하게 해결할 수 있는 여러 단계를 취할 수 있음.

추가 영향

     * 조직의 Zoom과 Slack에 초기 접근 권한이 없어도 접근할 수 있는 기술적 가능성이 있음.
     * Zendesk와 같은 특정 지원 및 티켓 시스템을 통해 이메일로 지원 티켓을 생성하고, 이를 통해 Google 계정을 생성하여 OAuth를 통해 로그인할 수 있음.

최종 생각

     * Google의 OAuth 시스템의 허점으로 인해 전 직원이 Slack과 Zoom과 같은 플랫폼에 계속 접근할 수 있는 것은 단순한 감독이 아닌 중대한 보안 결함임.
     * Google은 이 문제를 완화하기 위해 광범위한 수정을 적용할 수 있는 능력이 있으며, 공개적인 공개의 목적은 실제 변화를 촉구하기 위함임.
     * Google은 문제를 신속하게 분류했지만, 자체적인 90일 내 문제 해결 베스트 프랙티스를 따르지 않아, 134일째 되는 날 이 문제가 공개됨.

GN⁺의 의견

     * 이 기사는 Google OAuth 시스템의 취약점을 통해 퇴사한 직원들이 회사의 중요한 통신 플랫폼에 계속해서 접근할 수 있는 심각한 보안 문제를 드러냄.
     * 이러한 취약점은 기업의 내부 정보 보안에 큰 위협이 될 수 있으며, 이를 통해 기업의 민감한 정보가 유출될 가능성이 있음.
     * Google이 이 문제에 대한 적극적인 조치를 취하지 않은 것은 기업과 개인 사용자 모두에게 중요한 보안 문제를 제기하며, 이는 사이버 보안에 대한 인식을 높이고 보안 프로토콜을 강화할 필요성을 강조함.
"
"https://news.hada.io/topic?id=12457","PowerInfer - 소비자용 GPU를 사용해서 빠르게 LLM 서빙하기","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                PowerInfer - 소비자용 GPU를 사용해서 빠르게 LLM 서빙하기

     * RTX 4090(24G)에서 Falcon(ReLU)-40B-FP16 실행시 llama.cpp 보다 11배 빠름
     * 기기의 Activation Locality를 활용하는 CPU/GPU 하이브리드 LLM 추론엔진
          + 일관되게 활성화되는 일부의 핫뉴런, 특정 입력에 따라 달라지는 대다수의 콜드뉴런으로 구분
          + 핫 뉴런은 GPU에 미리 로드하여 빠르게 활성화, 콜드 뉴런은 CPU에서 계산해서 GPU 메모리 요구량과 CPU-GPU 데이터 전송을 크게 줄임
     * 적응형 예측기와 뉴런 인식 희소 연산자를 통합하여 뉴런 활성화와 계산 희소성의 효율성을 최적화
     * 단일 NVIDIA RTX 4090 GPU에서 다양한 LLM(OPT-175B 포함)에 걸쳐 평균 13.20 토큰/초, 최고 29.08 토큰/초의 토큰 생성 속도를 달성
          + 이는 최상위 서버급 A100 GPU가 달성한 것보다 18% 낮은 수치에 불과
          + 모델 정확도를 유지하면서 최대 11.69배까지 llama.cpp의 성능을 크게 뛰어넘는 것

   4090이 소비자용이긴 하죠 ㅋㅋ.....
"
"https://news.hada.io/topic?id=12429","폭스바겐, 새 차량에 물리적 버튼 재도입 예정","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       폭스바겐, 새 차량에 물리적 버튼 재도입 예정

폭스바겐, 새 차량에 물리적 버튼 복귀

     * 폭스바겐이 전 차량 라인업을 전기화하는 과정에서 현대적인 인테리어 디자인을 채택함.
     * 최소주의 디자인 언어와 업계 추세에 맞춰 물리적 인테리어 버튼을 터치스크린 컨트롤로 대체함.

실제 버튼 부재에 대한 비판으로 인한 후퇴

     * 실제 버튼이 없고 복잡한 인포테인먼트 조작에 대한 비판으로 폭스바겐이 결정을 번복함.
     * 폭스바겐은 ID.2all 콘셉트 차량부터 물리적 버튼을 다시 도입하기 시작함.

인테리어 개선을 위한 노력

     * 전 CEO 헤르베르트 디스의 지휘 아래, 폭스바겐은 테슬라를 따라 대부분의 컨트롤을 인포테인먼트 스크린으로 중앙집중화함.
     * 물리적 스티어링 휠 버튼을 터치 감응식 용량성 버튼으로 대체했으나, 이는 고객의 불만을 초래함.

스티어링 휠 버튼과 브랜드 이미지 회복

     * 폭스바겐은 스티어링 휠 버튼에 대한 입장을 되돌리고 브랜드 이미지를 회복하기 위해 노력 중임.
     * 현 CEO 토마스 샤퍼는 이러한 변화가 브랜드에 큰 손상을 입혔다고 언급함.

ID.2 콘셉트와 새로운 디자인 접근

     * 폭스바겐의 인테리어 디자이너 다리우스 와톨라는 ID.2 콘셉트가 고객 피드백에 따라 새로운 디자인 접근을 보여준다고 밝힘.
     * ID.2 콘셉트에는 터치스크린 아래에 물리적이고 백라이트가 있는 버튼이 배치됨.
     * 자주 사용되는 HVAC 컨트롤에 쉽게 접근할 수 있게 하고, 수동 볼륨 버튼과 중앙 조작 노브를 추가함.

느낌의 중요성과 물리적 컨트롤의 재도입

     * 폭스바겐은 운전자가 도로에서 눈을 떼지 않고도 버튼을 쉽게 느낄 수 있도록 금속 노브를 사용함.
     * CEO 토마스 샤퍼는 새 모델이 나올 때마다 버튼을 바꾸지 말고 최적화하며 미래로 가져가야 한다고 강조함.

소비자 피드백의 중요성

     * 소비자들이 대시보드에 아이패드를 달아놓은 것처럼 보이는 자동차 제조사들에게 반발함.
     * 폭스바겐은 미국 시장에서의 관련성을 되찾기 위해 소비자 피드백을 진지하게 받아들이고 있음.

GN⁺의 의견

     * 폭스바겐의 이번 결정은 사용자 경험을 중시하는 자동차 산업의 중요한 변화를 보여줌.
     * 물리적 버튼의 복귀는 기술의 발전과 사용자 편의성 사이의 균형을 찾으려는 시도로 볼 수 있음.
     * 이러한 변화는 다른 자동차 제조사들에게도 영향을 미칠 수 있으며, 향후 자동차 인테리어 디자인의 트렌드에 중요한 지표가 될 것임.

        Hacker News 의견

     * 이전 관련 토론 링크:
          + 17시간 전, 211개의 댓글이 달린 thedrive.com 기사: 링크
          + 1일 전, 52개의 댓글이 달린 afronomist.com 기사: 링크
     * 터치패드 인터페이스에 대한 비판:
          + 터치패드나 터치 기반 컨트롤은 대부분의 장치에서 사용하기에 끔찍함. 특히 조작 실수로 인명 피해가 발생할 수 있는 장치에서는 더욱 그러함.
     * 차량용 인포테인먼트 시스템에 대한 의견:
          + 차량 제조사들이 아이패드를 위한 자리를 디자인하고 애플이 Carplay를 통합하길 바람. 이상적인 설정으로, 2년 후에 구식이 될 인포테인먼트 시스템에 5,000달러를 지불하는 것보다 낫다고 생각함.
     * 차량 사용자 인터페이스(UX) 디자인에 대한 제안:
          + 사진 속 디자인이 합리적으로 보임. 내비게이션, 설정, 자주 사용하지 않는 기능을 위한 큰 화면. 볼륨 조절(또는 화면 설정 모드에서 다른 회전 제어)을 위한 노브와 주행 중 필요한 최소한의 기능을 제공하는 버튼들, 예를 들어 창문 제상기와 기후 조절 등이 있음.
          + 차량 UX가 안전하려면 많은 물리적 버튼이 필요하지 않음. 각 버튼에 별도의 케이블이 필요하지도 않음. 그 버튼 패드는 모든 모델, 모든 트림, 운전대 위치에 상관없이 동일한 N개의 버튼일 수 있음. 대시보드 앞에 ""날아다니는"" 화면 디자인은 현대적으로 느껴지지만 비용 절감을 위한 것이며, 버튼 패드에도 복사할 수 있음. 버튼 콘솔에 단일 케이블을 사용함. 제안된 방식대로 구축된다면 대규모 생산 문제나 비용이 될 것이라고 보이지 않음.
     * 차량 대시보드 테스트 경험담:
          + 밤에 긴 비행 후 공항에 도착하여 렌터카를 받고, 주차장을 나가기 전에 GPS 주소를 입력하고 헤드라이트를 켜는 버튼 작동을 시도함. 마지막으로, 2020년형 렉서스 SUV는 내비게이션 도구에 접근하기 전에 휴대폰에 렉서스 앱을 다운로드해야 한다고 주장함. 이것은 고급 차량임에도 불구하고.
          + 오늘날의 자동차들은 노키아 피처 폰 시대에 아무도 사용하지 않았던 기능(캘린더, 리마인더 등)의 희생자임. 하지만 경쟁에서 살아남기 위해서는 사람들이 사용하든 말든 그 기능을 갖추고 있어야 함.
     * 폭스바겐의 저가 모델에 대한 경험담:
          + 타오스와 제타는 폭스바겐의 가장 저렴한 모델로, 볼륨과 기후 조절을 위한 물리적 버튼이 있어 사용에 있어 마찰이 없음. 타오스를 소유하고 있어 GTI나 ID4 운전자보다 더 나은 경험을 더 적은 비용으로 누림.
     * 물리적 인터페이스에 대한 선호:
          + 운전, 가속, 제동, 방향 지시, 볼륨 조절, 문 손잡이, 와이퍼 등 가장 일반적으로 사용하는 것들에 대해서는 적절한 물리적 인터페이스를 선호함. 거의 모든 운전에서 이러한 것들을 사용할 것임.
          + 그러나 내비게이션 계획, 설정 탐색, 차량 구성, 통계 검토 등은 반응이 좋은 용량성 디스플레이 UI에서 수행하는 것을 선호함. 이러한 기능을 계속 개발하거나 유지해달라고 요청함.
     * 폭스바겐의 소프트웨어 그룹 Cariad에 대한 문제와 변화에 대한 언급:
          + Cariad는 몇 년 동안 여러 문제를 겪고 있으며 조직 개편을 겪고 있음. 이 기사는 PR처럼 느껴지며 개선이 이루어질 것이라는 희망을 주려는 것으로 보임.
     * 2016년형 Acura RDX의 컨트롤 스킴에 대한 평가:
          + 두 개의 화면, 하나는 터치를 위해 위치하고 각도가 조절되어 있고, 다른 하나는 운전자의 시야를 위함. 기후, 볼륨 조절 및 터치스크린 기능 및 메뉴 접근을 위한 물리적 컨트롤이 있음.
          + 이것은 극단적으로 인상적이라고 생각하는 디자이너들(또는 마케팅 담당자들)에게 문제가 아니라, 고객들이 극단적인 것에 감명받는다고 확신시킨 것으로 보임. 90년대에는 핸들에 수십 개의 버튼이 있었고, 오늘날에는 거대한 화면만 있음.
     * 자동차 창문 조작 버튼에 대한 비판:
          + 4개의 창문을 조작하기 위해 2개의 버튼만 있는 것으로 결정한 비즈니스 위원회의 구성원들은 남은 생애 동안 트라반트를 운전하도록 선고받아야 함. 그들이 무슨 생각을 했는지... 물론, 이것은 절박한 비용 절감 조치였음. 그렇게 어리석은 아이디어를 낼 수 있는 엔지니어는 없었을 것임.
"
"https://news.hada.io/topic?id=12406","Ask GN: 2023년 올해 최고의 지름은?","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Ask GN: 2023년 올해 최고의 지름은?

   올해 구매한 물품/서비스 중에서 가장 마음에 드는 것은 어떤 것인가요?
   전자제품, 생활용품, 구매/구독형 서비스, 소장형 콘텐츠 다 가능합니다.
   왜 만족스러운지 이유를 적어주시면 차후 지름 생활에 도움 될 것 같습니다.

   참고 :
     * 2022년 삶의 질을 향상시켜준 30만원 이하의 제품은?
     * 2021년 올해 최고의 지름은?

   모니터 델U3223QE
   책상위에 43인치 LG모니터를 사용하고 있었는데 너무 커서 한눈에 안들어오고 목이 아파서
   교체했는데 딱 좋네요.

   소형파워엠프 SMSL A100
   스피커 JBL STAGE A120
   LG모니터는 10W스피커 내장이어서 별도 스피커가 필요 없었는데 U3223QE를 스피커가 없는 모델이라
   모니터사이즈를 줄인 자리에 소형파워엠프하고 스피커를 놓았네요.
   소리도 만족스럽고..

   boox page 이북 리더요
   독서를 한동안 안 하다가, 지하철 출/퇴근 길에 독서를 즐길 수 있게 되었어요.
   지하철에서 읽기 딱 좋은 사이즈와 무게 같아요.

   약 9년정도 사용한 아이폰 6S+를 은퇴시키고 15프로맥스로 질렀네요..

   주말 운동용으로 구매했던 카본 당구 큐 및 용품 일체 입니다. ^^;

   자이언트 tcr 2 kom 자전거.
   덕분에 통영 그란폰도 완주할 수 있었던거 같습니다 ^^

   내년에는 자전거를 좀 타볼까 하고 알아보는 중이었는데.. 참고하겠습니다!

   Onyx Tab 10C (컬러전자책)과 Cannon R40(북스캐너) 입니다.
   집에 쌓여있던 책들을 전자화하는 재미가 쏠쏠. 그리고 전자책만 들고다니면 언제 어디서나 그곳 도서관이 되어버려서.

   올해 최고의 지름을 하기 위해서 열심히? 지름을 하고 있습니다.
   거의 6~7년간 사용한 컴퓨터에서 벗어나서 새로운 컴퓨터를 맞추고 있어요.

   부품 고민, 호환성 고민, 성능 고민, 감성 고민을 하다 보니 끝도 없이 비싸지고 있지만...
   아무튼 올해 최고의 지름이 되어야만 합니다. ㅠㅠ

   앗 저도 올해 집에 PC를 업그레이드 했네요.
   라이젠 7950X에 4070 정도로 타협했습니다.

   저도 이번에 7950X3D를 충동구매 해버려서(?) 이걸 쓰게 될 것 같은데, 혹시 AMD CPU 쓰시면서 겪으신 문제는 딱히 없으셨나요?
   평생 인텔만 써오다 처음 AMD 쓰는 거라 약간 걱정이네요.

   저도 라이젠이 처음이라 걱정했는데, 쓰다보니 제가 뭘 사용하고 있는지 차이를 못 느꼈습니다.
   아주 특별한 것을 돌리지 않는한 큰 문제 없는 것 같아요.

   지피티 4 구독과 코파일럿이요 !
   지속적으로 사용하면 좋지만, 제가 꾸준히 개발이나 활용을 안해서 생산성을 뽑아내지는 못하구 있습니다ㅠ

   DeepL 구독이요

   DeepL 결제창까지 들어갔다가 멈췄는데, 번역이 확실히 개선되었다고 느끼셨나요...?
   웹페이지 자동 번역 기능 때문에 아직도 고민중입니다...

   개인적으로는 구글번역보다 낫다고 생각하고 있습니다. 특히 번역 결과에 대해서 중간중간 용어들을 더 적절한 표현이나 단어로 수정 선택하면 향후에 어느 정도 개선이 되지 않나 싶기도 합니다. 업무 목적으로 영어 사용 빈도가 높은 편인데 한영 영한 번역 모두 많은 도움이 됩니다.

   답변 고맙습니다. +_+ 조만간 결제해봐야겠네요...!

   맥북 M2 Max.. 아이폰 15 프로..

   아반떼 md 16년형 중고차입니다. 출퇴근 + 일상용입니다. 기동성의 중요성을 깨닫고 있습니다. 편하긴 한데 직접 운전하는건 피곤하네요 ㅠㅠ

   저의 올해 최고 지름은 ""Bambu Lab X1 Carbon Combo"" 3D 프린터 입니다.

   기존 3D 프린터가 너무 느리기도 하고 레벨링 및 이런 저런 단점때문에 사기를 꺼렸는데요.
   빠른 속도와 레벨링 할 필요가 없다는 소문에 이리저리 알아보고 구입한 제품입니다.
   엄청 만족하며 사용중입니다. 보드게임을 좋아하는 사람한테는 궁합이 정말 좋은 것 같아요.
   보드게임 정리용 오거나이저가 은근 비싼데, 원하는 것들 마음대로 출력해서 정리하다보니 이미 구입가격은 다 뽑은듯 합니다.
   PLA 외에도 ABS/ASA/PAHT-CF 같은 고강도 소재들도 출력이 가능하고요.
   보드게임 업그레이드용 다양한 컴포넌트도 뽑고 있고, 구석구석 필요했던 생활용품들도 마음대로 뽑을 수 있다는게 장점이네요.
   Thingiverse, Printables, Makerworld 등에 다양한 3D 모델이 올라와 있어서 둘러보는 재미도 있습니다.
   덕분에 OpenSCAD, Fusion360 도구들도 조금씩 배우고 있습니다.
   아마도 베드가 좀 더 넓은 모델이 나오면 하나 더 구입할듯 하네요.
"
"https://news.hada.io/topic?id=12357","데이터베이스 기초","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               데이터베이스 기초

bashdb의 기본

     * 가장 간단한 데이터베이스 프로그램인 bashdb는 두 개의 bash 함수로 구성됨.
     * db_set 함수는 데이터를 파일에 추가하고, db_get 함수는 데이터를 검색함.
     * bashdb의 문제점으로 내구성, 원자성, 고립성, 성능 등이 있음.

bashdb를 ACID로 개선하기

     * ACID는 원자성, 일관성, 고립성, 내구성을 의미하는 데이터베이스 트랜잭션의 속성임.
     * bashdb의 내구성을 개선하기 위해 db_set에 sync 명령어를 추가함.
     * 고립성을 위해 flock 프로그램을 사용하여 파일 잠금을 추가함.

내구성

     * fsync와 fdatasync는 쓰기 버퍼를 디스크에 플러시하는 시스템 호출임.
     * sync 명령어는 모든 '더러운' 페이지를 디스크에 플러시하며, -d 플래그는 fdatasync를 호출함.

고립성

     * flock을 사용하여 bashdb에 다중 프로세스 고립성을 제공함.
     * flock은 파일 잠금을 위한 리눅스 프로그램으로, -s 플래그를 사용하여 동시 읽기를 허용함.

나쁜 소식

     * bashdb로 원자성을 보장하는 간단한 방법을 찾을 수 없음.
     * 성능 향상을 위해 O(n) 알고리즘을 개선할 필요가 있음.

저장 엔진

     * 저장 엔진의 목적은 지속적인 저장소에 데이터를 읽고 쓰는 추상화를 제공하는 것임.
     * 저장 엔진 설계는 디스크 I/O와 디스크 탐색을 최소화하는 것을 목표로 함.

  가변 B-트리

     * B-트리는 BST의 공간적 국소성을 갖는 변형으로, 디스크 I/O와 탐색을 최소화함.
     * B-트리는 노드가 더 많은 자식을 가질 수 있게 일반화된 BST임.

  불변 LSM 트리

     * LSM 트리는 쓰기 중심의 워크로드에 유리한 순차적으로 쓰여진 불변 데이터 구조임.
     * LSM 트리는 메모리에 데이터를 버퍼링하고, 일정 용량에 도달하면 정렬된 SSTable로 플러시함.

    블룸 필터

     * 블룸 필터는 집합 내에 항목이 존재하지 않는지 효율적으로 확인할 수 있는 확률적 데이터 구조임.
     * 블룸 필터는 해시 함수를 사용하여 작동하며, 공간 복잡도가 O(log n)임.

  Write Ahead Log

     * WAL은 모든 트랜잭션 작업을 로그하는 특별한 파일로, 데이터베이스 프로세스가 시작될 때 상태를 재구성함.

  고립성

     * 고립성을 달성하기 위해 비관적 잠금, 낙관적 잠금 또는 MVCC를 사용할 수 있음.
     * ANSI/ISO 표준 SQL 92는 다양한 읽기 고립 수준을 정의함.

분산 시스템

     * 분산 시스템은 복잡성을 추가하며, 가용성과 수평적 확장을 위해 데이터를 여러 기계에 분산시킬 수 있음.
     * CAP 이론에 따라 시스템은 일관성, 가용성, 분할 허용 중 두 가지만 보장할 수 있음.

  일관된 해싱

     * 일관된 해싱은 노드 추가 또는 제거 시 마이그레이션되는 항목의 양을 줄이는 데이터 분할 방법임.

   GN⁺의 의견:
     * 데이터베이스의 기본적인 문제와 ACID 속성에 대한 이해는 데이터베이스 엔지니어링의 핵심임.
     * bashdb 예제는 실제 데이터베이스 시스템에서 발생하는 문제를 이해하는 데 도움이 됨.
     * 저장 엔진과 분산 시스템의 설계는 데이터베이스의 성능과 신뢰성을 결정하는 중요한 요소임.

        Hacker News 의견

     * 첫 번째 댓글 요약:
          + LSM 기반 데이터베이스의 특성 중 하나는 삭제된 레코드나 톰스톤(tombstone)이 오랫동안 남아 있다는 것임.
          + 최종 레벨에서만 톰스톤을 건너뛰어야 하며, 모든 레벨에서 건너뛰면 안 됨.
          + 그렇지 않으면 상위 레벨의 톰스톤이 제거되어 하위 레벨의 항목이 다시 나타날 수 있음.
          + RocksDB와 같은 데이터베이스는 이 문제를 최적화하여 해결하려고 함.
     * 두 번째 댓글 요약:
          + 분산 시스템을 배우는 것을 피하면 위험할 수 있음.
          + 실제로 모든 비트리비얼(중요하지 않은) 생산 시스템은 분산 시스템임.
          + 데이터베이스가 복제 세트인 경우, 그것은 분산 시스템임.
          + 분산 시스템에 대해 배우고 싶다면 jepsen.io와 raft.github.io를 확인할 것.
     * 세 번째 댓글 요약:
          + 일관성에 대해 데이터베이스 일관성과 애플리케이션 일관성이 있음.
          + 한 테이블에서는 ACID(원자성, 일관성, 격리성, 지속성)를 달성할 수 있지만, 여러 테이블에 걸친 쓰기에서 실패할 수 있음.
          + 여러 테이블을 동시에 업데이트하는 트랜잭션을 다룰 때, 모든 테이블이 동시에 업데이트되거나 전혀 업데이트되지 않아야 함.
     * 네 번째 댓글 요약:
          + 데이터베이스를 구축하는 데 관련된 다양한 개념에 대한 훌륭한 개요를 제공하는 글임.
          + SIMD를 사용하여 단일 기계에서 성능을 끌어올리는 것부터 합의 알고리즘에 이르기까지 다룸.
          + 데이터베이스 신뢰성과 분산 시스템에 적용되는 형식적 방법에 대한 언급이 있음.
          + 아마존 S3 팀이 TLA+를 사용하여 모델링하는 방법에 대한 흥미로운 논문이 있음.
     * 다섯 번째 댓글 요약:
          + 많은 사람들이 SQL을 배워 데이터베이스를 배우지만, B-트리를 이해함으로써 RDBMS의 강점과 약점을 더 잘 이해할 수 있음.
          + 인덱스를 추가하여 데이터베이스를 빠르게 하려고 하지만, 실제로는 문제를 가리는 것에 불과함.
          + 일부 문제는 B-트리에 적합하지만, 많은 문제는 그렇지 않음.
          + SQL은 원격 B-트리 시스템에 대한 쿼리 인터페이스에 불과함.
     * 여섯 번째 댓글 요약:
          + 많은 개발자들이 어느 시점에서 자신만의 작은 데이터베이스를 만들어보는 단계를 거침.
          + 이 과정을 통해 무엇이 작동하지 않는지에 대해 많은 것을 배울 수 있음.
          + 자신만의 데이터베이스를 만드는 것은 기존 솔루션에 대한 존중을 높이는 데 도움이 됨.
          + 디스크로부터 데이터를 빠르고 신뢰성 있게 전송하는 것이 어려운 일임.
     * 일곱 번째 댓글 요약:
          + Bash 버전에서 원자성은 파일을 임시 파일로 복사한 다음 수정하고 sync; mv; sync를 사용하여 달성할 수 있음.
     * 여덟 번째 댓글 요약:
          + 문서 API가 MongoDB와 유사하고, 리더가 없는 복제가 Cassandra와 유사하며, 스레드당 코어 아키텍처가 ScyllaDB와 유사한 매우 멋진 디자인임.
          + 이 모든 것이 Rust로 구현되었음.
     * 아홉 번째 댓글 요약:
          + 'Database Internals'라는 책이 놀라울 정도로 훌륭하며, 내부에 대한 심층적인 탐구를 제공함.
          + 다른 비슷한 책이 있는지 물어봄.
     * 열 번째 댓글 요약:
          + 'Database Design and Implementation'이라는 책도 자바로 작성된 많은 예제와 함께 매우 훌륭한 독서임.
          + 실제 연구를 위해서는 Andy (Pavlo), Viktor Leis, Thorsten Grust, Thomas Neumann 등의 작업을 추천함.
"
"https://news.hada.io/topic?id=12462","연구진, 마우스에서 유방암 전이를 조절하는 '켜고/끄기' 스위치 발견","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 연구진, 마우스에서 유방암 전이를 조절하는 '켜고/끄기' 스위치 발견

유방암 전이의 켜짐/꺼짐 스위치 발견

     * 스탠포드 대학과 아크 연구소의 새로운 연구는 새롭고 더 효과적인 면역요법을 이끌어낼 수 있으며, 기존 약물에 대한 환자 반응을 더 잘 예측하는 데 도움이 될 수 있음.
     * 연구팀은 ENPP1이라는 단백질이 유방암의 면역요법 저항과 전이 능력을 제어하는 스위치 역할을 한다는 것을 발견함.
     * 높은 ENPP1 수준은 면역요법 저항과 후속 전이와 연결되어 있으며, 이 연구는 새로운 면역요법 개발과 기존 약물에 대한 환자 반응 예측 개선에 기여할 수 있음.

차가운 종양 녹이기

     * 면역요법은 멜라노마와 일부 폐암과 같은 ""뜨거운"" 종양에서는 효과적이지만, 유방암과 췌장암과 같은 많은 ""차가운"" 종양은 T 세포 침투가 부족하여 효과가 없음.
     * Li는 cGAMP라는 분자를 시작점으로 삼아, 이 분자가 손상된 DNA를 가진 세포에 의해 생산되며, STING 경로를 통해 면역 반응을 활성화시켜 종양을 뜨겁게 만들 수 있음을 밝혀냄.
     * ENPP1 단백질이 cGAMP를 분해하여 차가운 종양이 차가워지는 것을 돕는다는 가설을 세움.

켜짐/꺼짐 스위치

     * Li는 샌프란시스코 대학의 두 교수와 협력하여 I-SPY 2 유방암 시험에 참여한 환자 데이터를 분석함.
     * ENPP1 수준이 높은 환자들은 면역요법에 대한 반응이 낮고 전이 가능성이 높았으며, 낮은 환자들은 높은 반응과 전이가 없음을 발견함.
     * 마우스 연구를 통해 ENPP1을 제거하거나 그 기능만을 없애는 것이 종양 성장과 전이 감소에 직접적인 영향을 미친다는 것을 증명함.

폭포 위에 서다

     * 면역 경로는 종종 ""폭포""로 묘사되며, 신호의 연속이 반응을 이끌어내는 하류 작용을 유발함.
     * ENPP1이 면역 시스템의 감지를 막기 위한 큰 댐 역할을 한다는 것이 밝혀짐.
     * 이는 의료진이 유방암 환자에게 적합한 치료를 더 잘 결정할 수 있게 하며, ENPP1을 파괴하는 약물이 기존 치료법의 효과를 높일 수 있음을 의미함.
     * 이 연구는 유방암에 초점을 맞췄지만, 다른 종류의 차가운 종양에서도 ENPP1이 중요한 역할을 할 것이라고 Li는 믿음.

GN⁺의 의견

     * 이 연구는 면역요법이 효과적이지 않은 유방암 환자들에게 새로운 희망을 제공함. ENPP1 단백질이 면역 반응을 조절하는 중요한 역할을 하기 때문에, 이를 타겟으로 하는 치료법 개발이 가능해질 수 있음.
     * 차가운 종양을 뜨겁게 만드는 방법을 찾는 것은 암 치료의 새로운 지평을 열 수 있으며, 이는 다양한 암 유형에 적용될 수 있는 중대한 발견임.
     * ENPP1 수준을 통해 환자의 치료 반응을 예측하고, 이를 기반으로 개인 맞춤형 치료 전략을 수립하는 데 도움이 될 것임은 매우 흥미롭고 중요한 발전임.

        Hacker News 의견

     * Li는 샌프란시스코 대학의 두 교수와 협력을 시작했는데, 이들 중 한 명은 혁신적인 유방암 시험인 I-SPY 2 Trial을 이끄는 클리니션 Laura Van’t Veer이다. 하지만 이들 연구자들은 사실 샌프란시스코 대학이 아닌 UCSF에 소속되어 있으며, UCSF는 스탠퍼드보다 훨씬 영향력 있는 유방암 연구 분야의 선두주자임.
          +

     UCSF와 샌프란시스코 대학의 혼동에 대한 지적. UCSF가 유방암 연구 분야에서 세계적인 리더임을 강조.
     * ENPP1 수치가 높은 환자들은 pembrolizumab에 대한 반응이 낮고 전이 가능성이 높았으며, ENPP1 수치가 낮은 환자들은 pembrolizumab에 대한 반응이 높고 전이가 없었다. ENPP1은 면역요법에 대한 반응과 재발 가능성을 예측함.
          +

     ENPP1 수치와 유방암 전이 및 pembrolizumab 면역요법에 대한 반응 간의 상관관계 연구 결과 요약.
     * 이 연구는 새로운 소식이 아니며 몇 년 동안 진행된 연구 주제임. 2022년의 연구 논문도 있음.
          +

     ENPP1과 유방암 연구가 최근의 것이 아니라 몇 년간 진행된 주제임을 밝힘.
     * 연구자들은 ENPP1 단백질과 유방암 전이 사이의 상관관계를 발견했으며, 이는 pembrolizumab 면역요법 저항성의 강력한 지표로 여겨짐. 이 정보는 약물의 적절한 용량을 더 빨리 찾거나 특정 약물 클래스를 전혀 사용하지 않는 데 도움이 될 수 있음. 또한, 추가 연구 후 새로운 약물이 이 단백질을 공격하여 면역 체계가 암을 더 잘 저항할 수 있는지 확인할 수 있음을 희망함.
          +

     ENPP1 단백질이 pembrolizumab 면역요법 저항성과 강력한 연관이 있으며, 이는 약물 치료에 중요한 정보를 제공할 수 있음.
     * 부수적인 문제로, 실험에 사용되는 쥐를 산업 규모로 생산하는 사람들이 있을 것임. 전체 쥐를 모델링할 수 있는 시점은 얼마나 멀었는지, 마지막으로 들은 바에 따르면 작은 벌레를 전부 매핑할 수 있었지만 쥐는 그보다 훨씬 복잡함. 그러나 컴퓨팅 파워는 계속 증가함.
          +

     실험용 쥐의 산업적 대량 생산과 전체 쥐 모델링 가능성에 대한 논의. 컴퓨팅 파워의 증가에도 불구하고 쥐 모델링의 복잡성을 언급.
     * ""off""라는 답변을 선택함.
          +

     간결한 의견 표현.
     * ""in mice""라는 댓글이 있음.
          +

     연구가 쥐에서 이루어졌음을 지적하는 댓글.
     * [flagged]라고 표시된 댓글이 있음.
          +

     특정 댓글이 신고되었거나 적절하지 않다고 표시됨.
     * 곧 치료법이 나올 것으로 기대함.
          +

     연구 결과에 기반한 치료법 개발에 대한 기대감 표현.
"
"https://news.hada.io/topic?id=12437","Show GN: Snack - 여러 AI에게 한 번에 물어보세요","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Show GN: Snack - 여러 AI에게 한 번에 물어보세요

   더 이상 만족스러운 답변을 얻기 위해 프롬프트를 깎지마세요! 한 번에 여러 AI에게 물어보면 간단한 프롬프트로도 훨씬 더 빠르게 원하는 수준의 답변을 얻을 수 있습니다.

   지금 바로 GPT-4 Turbo, Gemini Pro, Upstage SOLAR, Mixtral 5X7B, 01.ai Yi 등 다양한 LLM을 한 자리에서 만나보세요


   안녕하세요, 평소에 GeekNews를 열심히 Slack에서 받아만 보다가 처음으로 글을 남겨보네요. 최근에 일을 하면서 영어로 문서 작업을 할 일이 생겨 GPT를 엄청나게 자주 사용했는데요. 단순히 말이 되는 번역이 아니라 좀 더 괜찮은 표현을 찾으려고 반복적으로 생성을 요청하는 제 모습을 보고 그냥 한 번에 여러 AI에게 일을 시키고 받아보면 편하겠다는 생각이 들어서 한 2주간 재밌게 뚝딱 만들어봤습니다.

   워낙 GPT-4가 비싸다보니... 첫 10건 까지만 무료이고 이후에는 유료 결제를 하셔야만 사용하실 수 있습니다. 혹시라도 23년도 연말까지 결제를 하실 경우 HELLOGEEKNEWS 쿠폰 코드를 입력하시면 1년간 20% 할인된 금액에 이용해보실 수 있습니다.

   아직 시작하는 단계라 어떠한 피드백도 좋으니 편하게 의견 주시면 정말 큰 도움이 될 것 같습니다. 그럼 잘 부탁드립니다!

   와우 2주 만에 저걸 다 만드신 건가요..
   쩔긴 하는데 뭔가 너무 비싸서 써볼 의향은 모르겠군요..

   openrouter.ai가 더욱 확장된 서비스를 염가 혹은 무료로 제공하고 있어요 참고하심 좋을 것 같아요.
"
"https://news.hada.io/topic?id=12442","Show GN: 보일다운, 수많은 탭을 하나로. 흩어진 업무용 툴 정보, 메시지를 한 곳에서","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Show GN: 보일다운, 수많은 탭을 하나로. 흩어진 업무용 툴 정보, 메시지를 한 곳에서

  보일다운

   보일다운은 매 아침마다 여러 계정과 도구를 이동하면서 소비했던 당신의 시간을 지켜줍니다.
   흩어졌던 정보를 모아 한 눈에 파악할 수 있고, 클릭 한 번으로 다양한 툴에 있는 할 일을 정리하세요!

   또한, 여러 계정을 사용하고 계신다구요?
   멀티 계정 기능을 통해서 여러 계정에서 한 번에 흩어졌던 정보를 한 눈에 파악할 수 있습니다.

  서비스 설명

     * 흩어진 업무용 도구에 메시지, 정보를 취합합니다.
          + 현재는 슬랙, 지라, 구글 메일, 노션, 깃헙, 컨플루언스 등 연동할 수 있어요.
     * 각 대시보드를 나눠서 담당하는 팀마다 만들 수 있어요.
     * 이후 더 많은 기능들이 준비되어 있습니다.
     * 28일 무료 사용 가능, 이후 월간 8달러

   좋은 서비스처럼 보이는데, 한 가지 확인하고 싶은게 있습니다.

   Trusted by professionals at top companies. 에 여러 회사가 있고, 재직중인 회사 및 지인들의 회사도 포함이 되어 있는데요. 우선 사내 시스템을 검색해 보면 회사 내에서는 사용 사례가 없는 것 같거든요.
   이런 형태의 로고 노출은 사내 절차가 상당히 까다로워서 저나 지인들이 약간 의아해 하고 있는 상태인데요. 해당 항목에 노출되고 있는 회사들은 회사측과 조율 후 컨펌해서 포함된게 맞는건가요?

   오해의 소지가 있는 것처럼 보여서 정확한 사실 관계를 확인하기 위해 브랜드팀에 연락해볼 예정인데요.

   혹여나 회사와 동의없이 사용중인 상태라면 내려주시면 좋을 것 같습니다.

   안녕하세요, monovision님
   우선 바쁘실텐데 신경쓰이게 만들어 죄송합니다 ‍ㅠㅠ

   해당 기업들에 직접 연동된 것은 아닙니다.
   다만, 클로즈드 베타를 신청해주신 유저분들 중 해당 기업들에 소속된 분들이 계셔서 사용했습니다!

   그래서 워딩 또한 해당 기업이 사용하는 것이 아닌 해당 기업에 소속된 분들께서 사용한다는 의미로 'Trusted by top companes' 가 아닌 'Trusted by professionals at top companies' 라는 워딩을 사용했습니다.

   혹시 그럼에도 오해의 소지가 있다 느껴지실까요ㅠㅠ
   만약 여전히 그렇게 느껴지신다면 official@lotlas.com 으로 기업명을 보내주세요 바로 내리도록 하겠습니다...!

   이건 조심하셔야할 것 같습니다.

   제가 법적인 분야는 모르지만, 문구가 문제가 아니라
   로고를 이런 용도로 사용한 것 자체가 문제가 될 수 있다는 생각이 들어요.

   그리고 위와 별개로 각 회사의 로고 사용 정책도 면밀하게 확인하실 필요가 있습니다.
   많은 기업들이 로고의 변형(저렇게 흰색 반투명으로 만드는 행위)을 금지하고 있어서요.

   아... 그렇군요ㅠㅠ

   로고 섹션 즉각 삭제했습니다 :)
   관심 갖고 친절하게 알려주셔서 감사해요!

   저는 Sidekick브라우저를 비슷한 용도로 사용중인데 너무 좋네요!
   한번 사용해 봐야겠습니다! 혹시 앱으로도 배포 예정이신가요?

   오호! 이미 Sidekick을 사용하고 계셨군요 :) 탭에서 볼 수 있단 장점이 있죠!
   앱이라고 말씀하시는 것은 크롬 익스텐션을 말씀하시는 걸까요? 아니면 iOS/AOS 쪽 말씀하시는 걸까요!
   감사합니다 :)

   데스크톱 앱을 말씀하시는거 같아요

   월간 8달러 빡시네요.. ㅠ

   추가적으로 어떤 이유에서 비싸다고 느껴지셨는데 말씀주시면 추후 가격 정책에 있어서 많은 도움이 될 것 같습니다!

   저도 가격이 있어보이긴 하네요. 개인적으로 드는 생각으로는
    1. Slack 유료가 7.25달러인데, 8달러?
    2. 연 결제가 월 5달러인데, 월 결제는 8달면 가격차이가 커서 월 결제가 바가지(?) 비슷하게 느껴지는 것도 있어보여요. 예를 들면 예전에 소, 중, 대 가격을 4.5만원, 5만원, 5.5만원 해놓은 족발집을 갔었는데 둘이 가서 뭘 시켜도 짜증나더라고요. 둘이서 소를 시키자니 중, 대가 5000원, 10000원차이고 그렇다고 대를 시키자니 둘이 와서 중이나 대를 시키자니 둘이 와서 먹을 수 있나? 하는. 결론적으론 월 8달러를 하시려면, 연 결제 금액을 올리셔야 덜 바가지처럼 느껴질듯 합니다.

   더 많은 기능들이 준비되고 있어서 8달러 그 이상 값어치를 하려고 해요 :)
   이후에 업데이트에선 8달러 이상 가치를 보여드릴 수 있도록 하겠습니다! 감사합니다.

   오... Use case 보니 좀 후킹되네요
"
"https://news.hada.io/topic?id=12359","레고가 새로운 레고 세트를 만드는 방법","                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         레고가 새로운 레고 세트를 만드는 방법

Marc Corfmat의 레고 세트 디자인 여정

     * Marc Corfmat은 청소년 시절부터 레고의 공식 세트 디자인 기회를 노리기 시작함.
     * 그와 그의 형제 Nick은 어릴 때부터 캘리포니아와 프랑스 La Rochelle의 할머니 집에서 레고 모델을 만들어 YouTube에 공유함.
     * 2020년, 레고 아이디어 프로그램을 통해 그들의 디자인을 현실로 만들 기회를 얻기 시작함.
     * Marc는 아바타: 더 라스트 에어벤더 기반의 디자인으로 10,000표를 획득하고, _Tintin_과 The Polar Express 디자인도 인기를 얻음.
     * 그러나 레고는 _아바타_와 The Polar Express 디자인을 거절함. 레고는 거절 이유를 밝히지 않으나, 여러 요소를 고려함.

Polaroid 카메라 디자인의 탄생

     * Marc는 자신의 아이디어 중 하나인 Polaroid 카메라 디자인을 시도하기로 결정함.
     * 그는 Polaroid의 상징적인 1977년 모델 OneStep의 디자인을 좋아했고, 적절한 크기의 렌즈 링을 찾아 디자인을 시작함.
     * Marc의 디자인은 움직임을 포함하여 ""필름 장전""과 ""사진 배출"" 기능을 가지고 있었음.
     * 이 디자인은 빠르게 10,000명의 지지를 얻었고, 레고로부터 연락을 받음.

레고 Polaroid OneStep SX-70 인스턴트 카메라

     * 레고는 Marc의 디자인을 기반으로 한 클래식 레인보우 스트라이프 Polaroid OneStep SX-70 인스턴트 카메라의 사전 주문을 시작함.
     * 이 세트는 $80 / €80 / £70의 가격으로 판매되며, 레고는 제품의 제작 과정과 팬 디자인을 실제 제품으로 전환하는 과정에 대해 인터뷰를 제공함.

레고 아이디어 프로그램의 과정

     * 모든 프로젝트는 원래 팬 창작물을 실제로 재현해보는 것으로 시작함.
     * 레고 디자이너는 브릭 라이브러리에서 필요한 부품을 가져와 프로토타입을 만듦.
     * 모든 세트는 품질 관리를 거쳐 변경이 필요하며, 이 과정에서 여러 부서와 협력함.

Polaroid CEO의 요청

     * Polaroid CEO Oskar Smolokowski는 레고 Polaroid의 셔터 버튼이 실제로 작동하기를 원함.
     * 레고는 여러 시도 끝에 작동하는 셔터 버튼을 만들어내는 데 성공함.

사진 타일의 디자인

     * 레고는 사진 타일 대신 양면에 인쇄할 수 있는 얇은 폴리프로필렌 플라스틱 ""포일""을 사용하기로 결정함.
     * 레고 그래픽 디자이너 Matthew Parsons는 세트에 포함될 사진 카드를 디자인함.

최종 디자인의 안전성

     * 레고의 안전 부서는 런처가 안전하게 작동하는지 지속적으로 테스트함.
     * 최종 디자인은 사진이 적절한 각도로 살짝 튀어나오도록 하여 쉽게 잡을 수 있게 함.

레고 Polaroid의 디테일

     * 레고 Polaroid은 실제 카메라와 매우 유사한 크기, 모양, 무게를 가짐.
     * 세트의 뒷면에는 실제 카메라 스트랩을 연상시키는 디자인이 있음.

레고의 복잡성 관리

     * 레고는 매년 디자이너들에게 제한된 수의 ""프레임""을 할당하여 새로운 부품을 관리함.
     * 이 시스템은 디자이너들이 창의적으로 문제를 해결하도록 도전함.

Marc Corfmat의 조언

     * Marc는 자신의 디자인을 마치 판매할 제품처럼 디자인하고, 기능을 강조할 것을 조언함.
     * 그는 또한 계속 시도하고 희망을 가질 것을 권장함.

   GN⁺의 의견:
    1. Marc Corfmat의 끈기와 창의성은 레고 팬들에게 영감을 줄 수 있는 중요한 요소임.
    2. 레고 아이디어 프로그램은 팬들이 자신의 창작물을 실제 제품으로 만들 수 있는 기회를 제공하여 매우 흥미로운 점임.
    3. 레고 Polaroid 카메라 세트의 세밀한 디테일과 기능은 레고와 Polaroid의 상징성을 잘 결합한 예로서, 레고 애호가들에게 매력적인 제품임.
"
