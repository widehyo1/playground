input {
    jdbc {
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        jdbc_fetch_size => 1000
        schedule => "*/60 * * * * *"
        statement => "
            SELECT
                  page_num
                , page_content
                , knowinfo_id
                , create_dt
                , modified_dt
            FROM
                playground.knowinfo_content kc
            WHERE
                COALESCE(modified_dt, create_dt) > :sql_last_value
            ORDER BY 
                knowinfo_id ASC, page_cnt ASC
            ;
        "
        use_column_value => true
        tracking_column => "modified_dt"
        tracking_column_type => "timestamp"
        last_run_metadata_path => "/usr/share/logstash/last_run_child_knowinfo"
        tags => ["child_knowinfo_data_input"]
    }
}

filter {
    if "child_knowinfo_data_input" in [tags] {
        mutate {
            # 자식 문서의 ID 생성: page_cnt와 knowinfo_id를 결합
            add_field => { "child_id" => "%{page_cnt}-%{knowinfo_id}" }
        }

        # knowinfo_id로 그룹화후 5초에 1개씩 이벤트 처리 
        throttle {
            key => "%{knowinfo_id}"
            period => 5
            max_age => 10
            before_count => -1
            after_count => 1
            max_counters => 100000
            periodic_flush => true
            enable_metric => false
        }

        if !([modified_dt]) {
            mutate {
                replace => { "modified_dt" => "%{create_dt}" }
            }
        }

        mutate {
            add_field => { "[join_field][name]" => "child" }
        }
        mutate {
            add_field => { "[join_field][parent]" => "%{knowinfo_id}" }
        }

    }
}

output {
    if "child_knowinfo_data_input" in [tags] {
        elasticsearch {
            index => "knowinfo_data"
            hosts => "${ELASTIC_HOSTS}"
            user=> "${ELASTIC_USER}"
            password=> "${ELASTIC_PASSWORD}"
            cacert=> "certs/ca/ca.crt"
            document_id => "%{child_id}"
            routing => "%{knowinfo_id}"
            action => "index"
            doc_as_upsert => true
        }
        stdout { codec => json_lines }
    }
}
